
Open_loop_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062bc  080062bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080062bc  080062bc  000162bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062c4  080062c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c4  080062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080062cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000000c  080062d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080062d8  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010ecc  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002371  00000000  00000000  00030f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  000332c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab2  00000000  00000000  00034098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002786b  00000000  00000000  00034b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001011e  00000000  00000000  0005c3b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fabfb  00000000  00000000  0006c4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039fc  00000000  00000000  001670d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  0016aacc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800625c 	.word	0x0800625c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800625c 	.word	0x0800625c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_UART_RxCpltCallback>:
 *
 * @param huart	UART Handle.
 * @retval none
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, UART_Rx_data, UART_RX_BUFFER_SIZE);
 80004cc:	2208      	movs	r2, #8
 80004ce:	4906      	ldr	r1, [pc, #24]	; (80004e8 <HAL_UART_RxCpltCallback+0x24>)
 80004d0:	4806      	ldr	r0, [pc, #24]	; (80004ec <HAL_UART_RxCpltCallback+0x28>)
 80004d2:	f004 faf5 	bl	8004ac0 <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&huart2, UART_Tx_data, sizeof(UART_Tx_data));
 80004d6:	220c      	movs	r2, #12
 80004d8:	4905      	ldr	r1, [pc, #20]	; (80004f0 <HAL_UART_RxCpltCallback+0x2c>)
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <HAL_UART_RxCpltCallback+0x28>)
 80004dc:	f004 fa92 	bl	8004a04 <HAL_UART_Transmit_IT>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000208 	.word	0x20000208
 80004ec:	200000f0 	.word	0x200000f0
 80004f0:	20000210 	.word	0x20000210

080004f4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]

}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a0e      	ldr	r2, [pc, #56]	; (800054c <HAL_ADC_ConvCpltCallback+0x44>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d108      	bne.n	800052a <HAL_ADC_ConvCpltCallback+0x22>
	{
		adc1_value = HAL_ADC_GetValue(&hadc1);
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <HAL_ADC_ConvCpltCallback+0x44>)
 800051a:	f001 fa75 	bl	8001a08 <HAL_ADC_GetValue>
 800051e:	4603      	mov	r3, r0
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <HAL_ADC_ConvCpltCallback+0x48>)
 8000522:	6013      	str	r3, [r2, #0]
		adc1_valid = 1;
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000526:	2201      	movs	r2, #1
 8000528:	701a      	strb	r2, [r3, #0]
	}

	if (hadc == &hadc2)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <HAL_ADC_ConvCpltCallback+0x50>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d108      	bne.n	8000544 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		adc2_value = HAL_ADC_GetValue(&hadc2);
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <HAL_ADC_ConvCpltCallback+0x50>)
 8000534:	f001 fa68 	bl	8001a08 <HAL_ADC_GetValue>
 8000538:	4603      	mov	r3, r0
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_ADC_ConvCpltCallback+0x54>)
 800053c:	6013      	str	r3, [r2, #0]
		adc2_valid = 1	;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <HAL_ADC_ConvCpltCallback+0x58>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
	}
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000028 	.word	0x20000028
 8000550:	2000021c 	.word	0x2000021c
 8000554:	20000220 	.word	0x20000220
 8000558:	2000008c 	.word	0x2000008c
 800055c:	20000224 	.word	0x20000224
 8000560:	20000228 	.word	0x20000228

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fd39 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f899 	bl	80006a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000572:	f000 f8e8 	bl	8000746 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 fa41 	bl	80009fc <MX_GPIO_Init>
  MX_DMA_Init();
 800057a:	f000 fa19 	bl	80009b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800057e:	f000 f9e7 	bl	8000950 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000582:	f000 f90b 	bl	800079c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000586:	f000 f97f 	bl	8000888 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  float torque;
  float const torqueMax = 200;
 800058a:	4b38      	ldr	r3, [pc, #224]	; (800066c <main+0x108>)
 800058c:	617b      	str	r3, [r7, #20]
  float const torqueMin = 0;
 800058e:	f04f 0300 	mov.w	r3, #0
 8000592:	613b      	str	r3, [r7, #16]

  float steeringAngle;
  float const steeringAngleMax = 30;
 8000594:	4b36      	ldr	r3, [pc, #216]	; (8000670 <main+0x10c>)
 8000596:	60fb      	str	r3, [r7, #12]
  float const steeringAngleMin = -30;
 8000598:	4b36      	ldr	r3, [pc, #216]	; (8000674 <main+0x110>)
 800059a:	60bb      	str	r3, [r7, #8]


  HAL_UART_Receive_IT(&huart2, UART_Rx_data, UART_RX_BUFFER_SIZE);
 800059c:	2208      	movs	r2, #8
 800059e:	4936      	ldr	r1, [pc, #216]	; (8000678 <main+0x114>)
 80005a0:	4836      	ldr	r0, [pc, #216]	; (800067c <main+0x118>)
 80005a2:	f004 fa8d 	bl	8004ac0 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart2, UART_Tx_data, sizeof(UART_Tx_data));
 80005a6:	220c      	movs	r2, #12
 80005a8:	4935      	ldr	r1, [pc, #212]	; (8000680 <main+0x11c>)
 80005aa:	4834      	ldr	r0, [pc, #208]	; (800067c <main+0x118>)
 80005ac:	f004 fa2a 	bl	8004a04 <HAL_UART_Transmit_IT>
  HAL_ADC_Start_IT(&hadc1);
 80005b0:	4834      	ldr	r0, [pc, #208]	; (8000684 <main+0x120>)
 80005b2:	f001 f8fb 	bl	80017ac <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 80005b6:	4834      	ldr	r0, [pc, #208]	; (8000688 <main+0x124>)
 80005b8:	f001 f8f8 	bl	80017ac <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (adc1_valid == 1)
 80005bc:	4b33      	ldr	r3, [pc, #204]	; (800068c <main+0x128>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d124      	bne.n	800060e <main+0xaa>
	  {
		  torque = (float) adc1_value * (torqueMax - torqueMin)/4095 + torqueMin;
 80005c4:	4b32      	ldr	r3, [pc, #200]	; (8000690 <main+0x12c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	ee07 3a90 	vmov	s15, r3
 80005cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005d0:	edd7 6a05 	vldr	s13, [r7, #20]
 80005d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80005d8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80005dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005e0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8000694 <main+0x130>
 80005e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80005ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005f0:	edc7 7a01 	vstr	s15, [r7, #4]
		  SIM_set_torques(UART_Tx_data, torque, torque);
 80005f4:	edd7 0a01 	vldr	s1, [r7, #4]
 80005f8:	ed97 0a01 	vldr	s0, [r7, #4]
 80005fc:	4820      	ldr	r0, [pc, #128]	; (8000680 <main+0x11c>)
 80005fe:	f000 fa79 	bl	8000af4 <SIM_set_torques>

		  adc1_valid = 0;
 8000602:	4b22      	ldr	r3, [pc, #136]	; (800068c <main+0x128>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);
 8000608:	481e      	ldr	r0, [pc, #120]	; (8000684 <main+0x120>)
 800060a:	f001 f8cf 	bl	80017ac <HAL_ADC_Start_IT>
	  }

	  if (adc2_valid == 1)
 800060e:	4b22      	ldr	r3, [pc, #136]	; (8000698 <main+0x134>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d122      	bne.n	800065c <main+0xf8>
	  {
		  steeringAngle = (float) adc2_value*(steeringAngleMax - steeringAngleMin)/4095 + steeringAngleMin;
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <main+0x138>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	ee07 3a90 	vmov	s15, r3
 800061e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000622:	edd7 6a03 	vldr	s13, [r7, #12]
 8000626:	edd7 7a02 	vldr	s15, [r7, #8]
 800062a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800062e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000632:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000694 <main+0x130>
 8000636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800063a:	ed97 7a02 	vldr	s14, [r7, #8]
 800063e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000642:	edc7 7a00 	vstr	s15, [r7]
		  SIM_set_steering_angle(UART_Tx_data, steeringAngle);
 8000646:	ed97 0a00 	vldr	s0, [r7]
 800064a:	480d      	ldr	r0, [pc, #52]	; (8000680 <main+0x11c>)
 800064c:	f000 fa92 	bl	8000b74 <SIM_set_steering_angle>

		  adc2_valid = 0;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <main+0x134>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc2);
 8000656:	480c      	ldr	r0, [pc, #48]	; (8000688 <main+0x124>)
 8000658:	f001 f8a8 	bl	80017ac <HAL_ADC_Start_IT>

	  }


	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800065c:	2110      	movs	r1, #16
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <main+0x13c>)
 8000660:	f002 fe48 	bl	80032f4 <HAL_GPIO_TogglePin>
	  HAL_Delay(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f000 fd37 	bl	80010d8 <HAL_Delay>
	  if (adc1_valid == 1)
 800066a:	e7a7      	b.n	80005bc <main+0x58>
 800066c:	43480000 	.word	0x43480000
 8000670:	41f00000 	.word	0x41f00000
 8000674:	c1f00000 	.word	0xc1f00000
 8000678:	20000208 	.word	0x20000208
 800067c:	200000f0 	.word	0x200000f0
 8000680:	20000210 	.word	0x20000210
 8000684:	20000028 	.word	0x20000028
 8000688:	2000008c 	.word	0x2000008c
 800068c:	20000220 	.word	0x20000220
 8000690:	2000021c 	.word	0x2000021c
 8000694:	457ff000 	.word	0x457ff000
 8000698:	20000228 	.word	0x20000228
 800069c:	20000224 	.word	0x20000224
 80006a0:	48000400 	.word	0x48000400

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b096      	sub	sp, #88	; 0x58
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2244      	movs	r2, #68	; 0x44
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fda6 	bl	8006204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ca:	f002 fe3b 	bl	8003344 <HAL_PWREx_ControlVoltageScaling>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d4:	f000 fa79 	bl	8000bca <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e2:	2310      	movs	r3, #16
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ea:	2302      	movs	r3, #2
 80006ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006f2:	230a      	movs	r3, #10
 80006f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f6:	2307      	movs	r3, #7
 80006f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fe72 	bl	80033f0 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000712:	f000 fa5a 	bl	8000bca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2303      	movs	r3, #3
 800071c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072a:	463b      	mov	r3, r7
 800072c:	2104      	movs	r1, #4
 800072e:	4618      	mov	r0, r3
 8000730:	f003 fa3a 	bl	8003ba8 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800073a:	f000 fa46 	bl	8000bca <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3758      	adds	r7, #88	; 0x58
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b0a2      	sub	sp, #136	; 0x88
 800074a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800074c:	463b      	mov	r3, r7
 800074e:	2288      	movs	r2, #136	; 0x88
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fd56 	bl	8006204 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000758:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800075c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800075e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000762:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000770:	2307      	movs	r3, #7
 8000772:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800077c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000780:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	463b      	mov	r3, r7
 8000784:	4618      	mov	r0, r3
 8000786:	f003 fc33 	bl	8003ff0 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000790:	f000 fa1b 	bl	8000bca <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	3788      	adds	r7, #136	; 0x88
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
 80007bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007be:	4b2f      	ldr	r3, [pc, #188]	; (800087c <MX_ADC1_Init+0xe0>)
 80007c0:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <MX_ADC1_Init+0xe4>)
 80007c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007c4:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_ADC1_Init+0xe0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ca:	4b2c      	ldr	r3, [pc, #176]	; (800087c <MX_ADC1_Init+0xe0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_ADC1_Init+0xe0>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d6:	4b29      	ldr	r3, [pc, #164]	; (800087c <MX_ADC1_Init+0xe0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007dc:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_ADC1_Init+0xe0>)
 80007de:	2204      	movs	r2, #4
 80007e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e2:	4b26      	ldr	r3, [pc, #152]	; (800087c <MX_ADC1_Init+0xe0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_ADC1_Init+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_ADC1_Init+0xe0>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_ADC1_Init+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_ADC1_Init+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_ADC1_Init+0xe0>)
 8000804:	2200      	movs	r2, #0
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_ADC1_Init+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <MX_ADC1_Init+0xe0>)
 8000812:	2200      	movs	r2, #0
 8000814:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_ADC1_Init+0xe0>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081e:	4817      	ldr	r0, [pc, #92]	; (800087c <MX_ADC1_Init+0xe0>)
 8000820:	f000 fe74 	bl	800150c <HAL_ADC_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800082a:	f000 f9ce 	bl	8000bca <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4810      	ldr	r0, [pc, #64]	; (800087c <MX_ADC1_Init+0xe0>)
 800083a:	f001 fff1 	bl	8002820 <HAL_ADCEx_MultiModeConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000844:	f000 f9c1 	bl	8000bca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_ADC1_Init+0xe8>)
 800084a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800084c:	2306      	movs	r3, #6
 800084e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000854:	237f      	movs	r3, #127	; 0x7f
 8000856:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000858:	2304      	movs	r3, #4
 800085a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_ADC1_Init+0xe0>)
 8000866:	f001 fb0b 	bl	8001e80 <HAL_ADC_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000870:	f000 f9ab 	bl	8000bca <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3728      	adds	r7, #40	; 0x28
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000028 	.word	0x20000028
 8000880:	50040000 	.word	0x50040000
 8000884:	04300002 	.word	0x04300002

08000888 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800089e:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <MX_ADC2_Init+0xc0>)
 80008a2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008a4:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b0:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008be:	2204      	movs	r2, #4
 80008c0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_ADC2_Init+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008fe:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_ADC2_Init+0xbc>)
 8000900:	f000 fe04 	bl	800150c <HAL_ADC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800090a:	f000 f95e 	bl	8000bca <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_ADC2_Init+0xc4>)
 8000910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000912:	2306      	movs	r3, #6
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091a:	237f      	movs	r3, #127	; 0x7f
 800091c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091e:	2304      	movs	r3, #4
 8000920:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000926:	463b      	mov	r3, r7
 8000928:	4619      	mov	r1, r3
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <MX_ADC2_Init+0xbc>)
 800092c:	f001 faa8 	bl	8001e80 <HAL_ADC_ConfigChannel>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000936:	f000 f948 	bl	8000bca <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2000008c 	.word	0x2000008c
 8000948:	50040100 	.word	0x50040100
 800094c:	08600004 	.word	0x08600004

08000950 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_USART2_UART_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x58>)
 8000994:	f003 ffe8 	bl	8004968 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800099e:	f000 f914 	bl	8000bca <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000f0 	.word	0x200000f0
 80009ac:	40004400 	.word	0x40004400

080009b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_DMA_Init+0x48>)
 80009b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ba:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <MX_DMA_Init+0x48>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6493      	str	r3, [r2, #72]	; 0x48
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_DMA_Init+0x48>)
 80009c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2100      	movs	r1, #0
 80009d2:	2010      	movs	r0, #16
 80009d4:	f002 f8af 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009d8:	2010      	movs	r0, #16
 80009da:	f002 f8c8 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2011      	movs	r0, #17
 80009e4:	f002 f8a7 	bl	8002b36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009e8:	2011      	movs	r0, #17
 80009ea:	f002 f8c0 	bl	8002b6e <HAL_NVIC_EnableIRQ>

}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4b35      	ldr	r3, [pc, #212]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a34      	ldr	r2, [pc, #208]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b32      	ldr	r3, [pc, #200]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b29      	ldr	r3, [pc, #164]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4b26      	ldr	r3, [pc, #152]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a60:	f043 0302 	orr.w	r3, r3, #2
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_GPIO_Init+0xec>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2120      	movs	r1, #32
 8000a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7a:	f002 fc23 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2110      	movs	r1, #16
 8000a82:	481a      	ldr	r0, [pc, #104]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000a84:	f002 fc1e 	bl	80032c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4814      	ldr	r0, [pc, #80]	; (8000af0 <MX_GPIO_Init+0xf4>)
 8000aa0:	f002 fa66 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f002 fa57 	bl	8002f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <MX_GPIO_Init+0xf0>)
 8000ada:	f002 fa49 	bl	8002f70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	; 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	48000400 	.word	0x48000400
 8000af0:	48000800 	.word	0x48000800

08000af4 <SIM_set_torques>:
 * @param	float torqueRight Reference torque for right wheel.
 *
 * 	@retval None
 */
void SIM_set_torques(uint8_t *Tx_data, float torqueLeft, float torqueRight)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b089      	sub	sp, #36	; 0x24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b00:	edc7 0a01 	vstr	s1, [r7, #4]
	// bitmask for extracting 1 byte at the time
	uint8_t bitmask = 0xff;
 8000b04:	23ff      	movs	r3, #255	; 0xff
 8000b06:	76fb      	strb	r3, [r7, #27]

	// Turns the bits to uint32_t.
	uint32_t tempLeft = * (uint32_t *) &torqueLeft;
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	617b      	str	r3, [r7, #20]
	uint32_t tempRight = * (uint32_t *) &torqueRight;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	613b      	str	r3, [r7, #16]

    // Puts the values into temp buffer.
	for (int i = 0; i < 4; i++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	e021      	b.n	8000b60 <SIM_set_torques+0x6c>
	{
		*(Tx_data + i) 		= (uint8_t) (tempLeft >> (24 - 8*i)) & bitmask;
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	f1c3 0303 	rsb	r3, r3, #3
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2a:	b2d9      	uxtb	r1, r3
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	7efa      	ldrb	r2, [r7, #27]
 8000b34:	400a      	ands	r2, r1
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	701a      	strb	r2, [r3, #0]
		*(Tx_data + 4 + i) 	= (uint8_t) (tempRight >> (24 - 8*i)) & bitmask;
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	f1c3 0303 	rsb	r3, r3, #3
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	fa22 f303 	lsr.w	r3, r2, r3
 8000b48:	b2d9      	uxtb	r1, r3
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3304      	adds	r3, #4
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4413      	add	r3, r2
 8000b52:	7efa      	ldrb	r2, [r7, #27]
 8000b54:	400a      	ands	r2, r1
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	61fb      	str	r3, [r7, #28]
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	ddda      	ble.n	8000b1c <SIM_set_torques+0x28>
	}

}
 8000b66:	bf00      	nop
 8000b68:	bf00      	nop
 8000b6a:	3724      	adds	r7, #36	; 0x24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <SIM_set_steering_angle>:
 * @param	float steeringAngle steering angle.
 *
 * 	@retval None
 */
void SIM_set_steering_angle(uint8_t *Tx_data, float steeringAngle)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	ed87 0a00 	vstr	s0, [r7]

	// bitmask for extracting 1 byte at the time
	uint8_t bitmask = 0xff;
 8000b80:	23ff      	movs	r3, #255	; 0xff
 8000b82:	74fb      	strb	r3, [r7, #19]

	// Turns the bits to uint32_t.
	uint32_t tempSteer = * (uint32_t *) &steeringAngle;
 8000b84:	463b      	mov	r3, r7
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 4; i++)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	e012      	b.n	8000bb6 <SIM_set_steering_angle+0x42>
	{
		*(Tx_data + 8 + i) 	= (uint8_t) (tempSteer >> (24 - 8*i)) & bitmask;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f1c3 0303 	rsb	r3, r3, #3
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9e:	b2d9      	uxtb	r1, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	7cfa      	ldrb	r2, [r7, #19]
 8000baa:	400a      	ands	r2, r1
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	dde9      	ble.n	8000b90 <SIM_set_steering_angle+0x1c>
	}

}
 8000bbc:	bf00      	nop
 8000bbe:	bf00      	nop
 8000bc0:	371c      	adds	r7, #28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bce:	b672      	cpsid	i
}
 8000bd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <Error_Handler+0x8>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08c      	sub	sp, #48	; 0x30
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a3b      	ldr	r2, [pc, #236]	; (8000d28 <HAL_ADC_MspInit+0x10c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d135      	bne.n	8000caa <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000c3e:	4b3b      	ldr	r3, [pc, #236]	; (8000d2c <HAL_ADC_MspInit+0x110>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	3301      	adds	r3, #1
 8000c44:	4a39      	ldr	r2, [pc, #228]	; (8000d2c <HAL_ADC_MspInit+0x110>)
 8000c46:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000c48:	4b38      	ldr	r3, [pc, #224]	; (8000d2c <HAL_ADC_MspInit+0x110>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d10b      	bne.n	8000c68 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000c50:	4b37      	ldr	r3, [pc, #220]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c54:	4a36      	ldr	r2, [pc, #216]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000c56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5c:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	4a30      	ldr	r2, [pc, #192]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c74:	4b2e      	ldr	r3, [pc, #184]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	617b      	str	r3, [r7, #20]
 8000c7e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c84:	230b      	movs	r3, #11
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4828      	ldr	r0, [pc, #160]	; (8000d34 <HAL_ADC_MspInit+0x118>)
 8000c94:	f002 f96c 	bl	8002f70 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	2012      	movs	r0, #18
 8000c9e:	f001 ff4a 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ca2:	2012      	movs	r0, #18
 8000ca4:	f001 ff63 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ca8:	e039      	b.n	8000d1e <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a22      	ldr	r2, [pc, #136]	; (8000d38 <HAL_ADC_MspInit+0x11c>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d134      	bne.n	8000d1e <HAL_ADC_MspInit+0x102>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_ADC_MspInit+0x110>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <HAL_ADC_MspInit+0x110>)
 8000cbc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_ADC_MspInit+0x110>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d10b      	bne.n	8000cde <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a19      	ldr	r2, [pc, #100]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_ADC_MspInit+0x114>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000cfa:	230b      	movs	r3, #11
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	480a      	ldr	r0, [pc, #40]	; (8000d34 <HAL_ADC_MspInit+0x118>)
 8000d0a:	f002 f931 	bl	8002f70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2012      	movs	r0, #18
 8000d14:	f001 ff0f 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d18:	2012      	movs	r0, #18
 8000d1a:	f001 ff28 	bl	8002b6e <HAL_NVIC_EnableIRQ>
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	50040000 	.word	0x50040000
 8000d2c:	2000022c 	.word	0x2000022c
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48000800 	.word	0x48000800
 8000d38:	50040100 	.word	0x50040100

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0ac      	sub	sp, #176	; 0xb0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2288      	movs	r2, #136	; 0x88
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f005 fa51 	bl	8006204 <memset>
  if(huart->Instance==USART2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a4f      	ldr	r2, [pc, #316]	; (8000ea4 <HAL_UART_MspInit+0x168>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	f040 8096 	bne.w	8000e9a <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d76:	f107 0314 	add.w	r3, r7, #20
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 f938 	bl	8003ff0 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff ff20 	bl	8000bca <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8a:	4b47      	ldr	r3, [pc, #284]	; (8000ea8 <HAL_UART_MspInit+0x16c>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8e:	4a46      	ldr	r2, [pc, #280]	; (8000ea8 <HAL_UART_MspInit+0x16c>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	6593      	str	r3, [r2, #88]	; 0x58
 8000d96:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <HAL_UART_MspInit+0x16c>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b41      	ldr	r3, [pc, #260]	; (8000ea8 <HAL_UART_MspInit+0x16c>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a40      	ldr	r2, [pc, #256]	; (8000ea8 <HAL_UART_MspInit+0x16c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b3e      	ldr	r3, [pc, #248]	; (8000ea8 <HAL_UART_MspInit+0x16c>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f002 f8c5 	bl	8002f70 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000de6:	4b31      	ldr	r3, [pc, #196]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000de8:	4a31      	ldr	r2, [pc, #196]	; (8000eb0 <HAL_UART_MspInit+0x174>)
 8000dea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000dec:	4b2f      	ldr	r3, [pc, #188]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000dee:	2202      	movs	r2, #2
 8000df0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df8:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e04:	4b29      	ldr	r3, [pc, #164]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e10:	4b26      	ldr	r3, [pc, #152]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e16:	4b25      	ldr	r3, [pc, #148]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e1c:	4823      	ldr	r0, [pc, #140]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000e1e:	f001 fec1 	bl	8002ba4 <HAL_DMA_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000e28:	f7ff fecf 	bl	8000bca <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000e30:	675a      	str	r2, [r3, #116]	; 0x74
 8000e32:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <HAL_UART_MspInit+0x170>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e38:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_UART_MspInit+0x17c>)
 8000e3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e40:	2202      	movs	r2, #2
 8000e42:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e46:	2210      	movs	r2, #16
 8000e48:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e52:	2280      	movs	r2, #128	; 0x80
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e70:	f001 fe98 	bl	8002ba4 <HAL_DMA_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000e7a:	f7ff fea6 	bl	8000bca <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e82:	671a      	str	r2, [r3, #112]	; 0x70
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_UART_MspInit+0x178>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2026      	movs	r0, #38	; 0x26
 8000e90:	f001 fe51 	bl	8002b36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e94:	2026      	movs	r0, #38	; 0x26
 8000e96:	f001 fe6a 	bl	8002b6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	37b0      	adds	r7, #176	; 0xb0
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	20000178 	.word	0x20000178
 8000eb0:	4002006c 	.word	0x4002006c
 8000eb4:	200001c0 	.word	0x200001c0
 8000eb8:	40020080 	.word	0x40020080

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec6:	e7fe      	b.n	8000ec6 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <MemManage_Handler+0x4>

08000ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f08:	f000 f8c6 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <DMA1_Channel6_IRQHandler+0x10>)
 8000f16:	f001 ff7c 	bl	8002e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000178 	.word	0x20000178

08000f24 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <DMA1_Channel7_IRQHandler+0x10>)
 8000f2a:	f001 ff72 	bl	8002e12 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200001c0 	.word	0x200001c0

08000f38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <ADC1_2_IRQHandler+0x14>)
 8000f3e:	f000 fd71 	bl	8001a24 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f42:	4803      	ldr	r0, [pc, #12]	; (8000f50 <ADC1_2_IRQHandler+0x18>)
 8000f44:	f000 fd6e 	bl	8001a24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000028 	.word	0x20000028
 8000f50:	2000008c 	.word	0x2000008c

08000f54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <USART2_IRQHandler+0x10>)
 8000f5a:	f003 fdfd 	bl	8004b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200000f0 	.word	0x200000f0

08000f68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <SystemInit+0x20>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <SystemInit+0x20>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f90:	f7ff ffea 	bl	8000f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fba:	f005 f92b 	bl	8006214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f7ff fad1 	bl	8000564 <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fd0:	080062cc 	.word	0x080062cc
  ldr r2, =_sbss
 8000fd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fd8:	20000234 	.word	0x20000234

08000fdc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC3_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_Init+0x3c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <HAL_Init+0x3c>)
 8000ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff6:	2003      	movs	r0, #3
 8000ff8:	f001 fd92 	bl	8002b20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f80f 	bl	8001020 <HAL_InitTick>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	e001      	b.n	8001012 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800100e:	f7ff fde1 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001012:	79fb      	ldrb	r3, [r7, #7]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800102c:	4b17      	ldr	r3, [pc, #92]	; (800108c <HAL_InitTick+0x6c>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d023      	beq.n	800107c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001034:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_InitTick+0x70>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <HAL_InitTick+0x6c>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fd9d 	bl	8002b8a <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10f      	bne.n	8001076 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d809      	bhi.n	8001070 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f001 fd67 	bl	8002b36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001068:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <HAL_InitTick+0x74>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e007      	b.n	8001080 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e004      	b.n	8001080 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e001      	b.n	8001080 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	20000000 	.word	0x20000000
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000230 	.word	0x20000230

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000230 	.word	0x20000230

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Delay+0x44>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000008 	.word	0x20000008

08001120 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	609a      	str	r2, [r3, #8]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	609a      	str	r2, [r3, #8]
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	3360      	adds	r3, #96	; 0x60
 800119a:	461a      	mov	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b08      	ldr	r3, [pc, #32]	; (80011cc <LL_ADC_SetOffset+0x44>)
 80011aa:	4013      	ands	r3, r2
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	4313      	orrs	r3, r2
 80011b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	03fff000 	.word	0x03fff000

080011d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3360      	adds	r3, #96	; 0x60
 80011de:	461a      	mov	r2, r3
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	3360      	adds	r3, #96	; 0x60
 800120c:	461a      	mov	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	431a      	orrs	r2, r3
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001226:	bf00      	nop
 8001228:	371c      	adds	r7, #28
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001258:	b480      	push	{r7}
 800125a:	b087      	sub	sp, #28
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3330      	adds	r3, #48	; 0x30
 8001268:	461a      	mov	r2, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	f003 030c 	and.w	r3, r3, #12
 8001274:	4413      	add	r3, r2
 8001276:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f003 031f 	and.w	r3, r3, #31
 8001282:	211f      	movs	r1, #31
 8001284:	fa01 f303 	lsl.w	r3, r1, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	401a      	ands	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	0e9b      	lsrs	r3, r3, #26
 8001290:	f003 011f 	and.w	r1, r3, #31
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	431a      	orrs	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b087      	sub	sp, #28
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3314      	adds	r3, #20
 80012e6:	461a      	mov	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	0e5b      	lsrs	r3, r3, #25
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	4413      	add	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	0d1b      	lsrs	r3, r3, #20
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	2107      	movs	r1, #7
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	401a      	ands	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	0d1b      	lsrs	r3, r3, #20
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	431a      	orrs	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001320:	bf00      	nop
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001344:	43db      	mvns	r3, r3
 8001346:	401a      	ands	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0318 	and.w	r3, r3, #24
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001350:	40d9      	lsrs	r1, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	400b      	ands	r3, r1
 8001356:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800135a:	431a      	orrs	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	0007ffff 	.word	0x0007ffff

08001374 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 031f 	and.w	r3, r3, #31
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6093      	str	r3, [r2, #8]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013e4:	d101      	bne.n	80013ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013e6:	2301      	movs	r3, #1
 80013e8:	e000      	b.n	80013ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800140c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001434:	d101      	bne.n	800143a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800145c:	f043 0201 	orr.w	r2, r3, #1
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <LL_ADC_IsEnabled+0x18>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <LL_ADC_IsEnabled+0x1a>
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014aa:	f043 0204 	orr.w	r2, r3, #4
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	2b04      	cmp	r3, #4
 80014d0:	d101      	bne.n	80014d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b08      	cmp	r3, #8
 80014f6:	d101      	bne.n	80014fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014f8:	2301      	movs	r3, #1
 80014fa:	e000      	b.n	80014fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e130      	b.n	8001788 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	2b00      	cmp	r3, #0
 8001532:	d109      	bne.n	8001548 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fb71 	bl	8000c1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff3f 	bl	80013d0 <LL_ADC_IsDeepPowerDownEnabled>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d004      	beq.n	8001562 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff25 	bl	80013ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff5a 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d115      	bne.n	800159e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff3e 	bl	80013f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800157c:	4b84      	ldr	r3, [pc, #528]	; (8001790 <HAL_ADC_Init+0x284>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	4a84      	ldr	r2, [pc, #528]	; (8001794 <HAL_ADC_Init+0x288>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	099b      	lsrs	r3, r3, #6
 800158a:	3301      	adds	r3, #1
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001590:	e002      	b.n	8001598 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	3b01      	subs	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f9      	bne.n	8001592 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff3c 	bl	8001420 <LL_ADC_IsInternalRegulatorEnabled>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10d      	bne.n	80015ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b2:	f043 0210 	orr.w	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	f043 0201 	orr.w	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff ff75 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80015d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f040 80c9 	bne.w	8001776 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 80c5 	bne.w	8001776 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015f4:	f043 0202 	orr.w	r2, r3, #2
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff35 	bl	8001470 <LL_ADC_IsEnabled>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d115      	bne.n	8001638 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800160c:	4862      	ldr	r0, [pc, #392]	; (8001798 <HAL_ADC_Init+0x28c>)
 800160e:	f7ff ff2f 	bl	8001470 <LL_ADC_IsEnabled>
 8001612:	4604      	mov	r4, r0
 8001614:	4861      	ldr	r0, [pc, #388]	; (800179c <HAL_ADC_Init+0x290>)
 8001616:	f7ff ff2b 	bl	8001470 <LL_ADC_IsEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	431c      	orrs	r4, r3
 800161e:	4860      	ldr	r0, [pc, #384]	; (80017a0 <HAL_ADC_Init+0x294>)
 8001620:	f7ff ff26 	bl	8001470 <LL_ADC_IsEnabled>
 8001624:	4603      	mov	r3, r0
 8001626:	4323      	orrs	r3, r4
 8001628:	2b00      	cmp	r3, #0
 800162a:	d105      	bne.n	8001638 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	4619      	mov	r1, r3
 8001632:	485c      	ldr	r0, [pc, #368]	; (80017a4 <HAL_ADC_Init+0x298>)
 8001634:	f7ff fd74 	bl	8001120 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7e5b      	ldrb	r3, [r3, #25]
 800163c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001642:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001648:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800164e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001656:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d106      	bne.n	8001674 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	3b01      	subs	r3, #1
 800166c:	045b      	lsls	r3, r3, #17
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	2b00      	cmp	r3, #0
 800167a:	d009      	beq.n	8001690 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	4b44      	ldr	r3, [pc, #272]	; (80017a8 <HAL_ADC_Init+0x29c>)
 8001698:	4013      	ands	r3, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	69b9      	ldr	r1, [r7, #24]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff1b 	bl	80014e4 <LL_ADC_INJ_IsConversionOngoing>
 80016ae:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d13d      	bne.n	8001732 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d13a      	bne.n	8001732 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016c0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016ca:	4313      	orrs	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d8:	f023 0302 	bic.w	r3, r3, #2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	69b9      	ldr	r1, [r7, #24]
 80016e2:	430b      	orrs	r3, r1
 80016e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d118      	bne.n	8001722 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016fa:	f023 0304 	bic.w	r3, r3, #4
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001706:	4311      	orrs	r1, r2
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800170c:	4311      	orrs	r1, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001712:	430a      	orrs	r2, r1
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	611a      	str	r2, [r3, #16]
 8001720:	e007      	b.n	8001732 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0201 	bic.w	r2, r2, #1
 8001730:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d10c      	bne.n	8001754 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f023 010f 	bic.w	r1, r3, #15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	1e5a      	subs	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
 8001752:	e007      	b.n	8001764 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 020f 	bic.w	r2, r2, #15
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001768:	f023 0303 	bic.w	r3, r3, #3
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	655a      	str	r2, [r3, #84]	; 0x54
 8001774:	e007      	b.n	8001786 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177a:	f043 0210 	orr.w	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001786:	7ffb      	ldrb	r3, [r7, #31]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3724      	adds	r7, #36	; 0x24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd90      	pop	{r4, r7, pc}
 8001790:	20000000 	.word	0x20000000
 8001794:	053e2d63 	.word	0x053e2d63
 8001798:	50040000 	.word	0x50040000
 800179c:	50040100 	.word	0x50040100
 80017a0:	50040200 	.word	0x50040200
 80017a4:	50040300 	.word	0x50040300
 80017a8:	fff0c007 	.word	0xfff0c007

080017ac <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017b4:	4891      	ldr	r0, [pc, #580]	; (80019fc <HAL_ADC_Start_IT+0x250>)
 80017b6:	f7ff fddd 	bl	8001374 <LL_ADC_GetMultimode>
 80017ba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fe7c 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 8110 	bne.w	80019ee <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_Start_IT+0x30>
 80017d8:	2302      	movs	r3, #2
 80017da:	e10b      	b.n	80019f4 <HAL_ADC_Start_IT+0x248>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 ff3d 	bl	8002664 <ADC_Enable>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017ee:	7dfb      	ldrb	r3, [r7, #23]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f040 80f7 	bne.w	80019e4 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017fe:	f023 0301 	bic.w	r3, r3, #1
 8001802:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a7c      	ldr	r2, [pc, #496]	; (8001a00 <HAL_ADC_Start_IT+0x254>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d002      	beq.n	800181a <HAL_ADC_Start_IT+0x6e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	e000      	b.n	800181c <HAL_ADC_Start_IT+0x70>
 800181a:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <HAL_ADC_Start_IT+0x258>)
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	4293      	cmp	r3, r2
 8001822:	d002      	beq.n	800182a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d105      	bne.n	8001836 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f023 0206 	bic.w	r2, r3, #6
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	659a      	str	r2, [r3, #88]	; 0x58
 800184e:	e002      	b.n	8001856 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	221c      	movs	r2, #28
 800185c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 021c 	bic.w	r2, r2, #28
 8001874:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	2b08      	cmp	r3, #8
 800187c:	d108      	bne.n	8001890 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0208 	orr.w	r2, r2, #8
 800188c:	605a      	str	r2, [r3, #4]
          break;
 800188e:	e008      	b.n	80018a2 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0204 	orr.w	r2, r2, #4
 800189e:	605a      	str	r2, [r3, #4]
          break;
 80018a0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d107      	bne.n	80018ba <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0210 	orr.w	r2, r2, #16
 80018b8:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a50      	ldr	r2, [pc, #320]	; (8001a00 <HAL_ADC_Start_IT+0x254>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d002      	beq.n	80018ca <HAL_ADC_Start_IT+0x11e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e000      	b.n	80018cc <HAL_ADC_Start_IT+0x120>
 80018ca:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_ADC_Start_IT+0x258>)
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d008      	beq.n	80018e6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d002      	beq.n	80018e6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	d13a      	bne.n	800195c <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d02d      	beq.n	8001950 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	2b08      	cmp	r3, #8
 800190a:	d110      	bne.n	800192e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0220 	bic.w	r2, r2, #32
 800191a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800192a:	605a      	str	r2, [r3, #4]
              break;
 800192c:	e010      	b.n	8001950 <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800193c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0220 	orr.w	r2, r2, #32
 800194c:	605a      	str	r2, [r3, #4]
              break;
 800194e:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fd9e 	bl	8001496 <LL_ADC_REG_StartConversion>
 800195a:	e04a      	b.n	80019f2 <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_ADC_Start_IT+0x254>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d002      	beq.n	8001978 <HAL_ADC_Start_IT+0x1cc>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	e000      	b.n	800197a <HAL_ADC_Start_IT+0x1ce>
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_ADC_Start_IT+0x258>)
 800197a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d034      	beq.n	80019f2 <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001990:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	2b08      	cmp	r3, #8
 800199e:	d110      	bne.n	80019c2 <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685a      	ldr	r2, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0220 	bic.w	r2, r2, #32
 80019ae:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019be:	605a      	str	r2, [r3, #4]
              break;
 80019c0:	e017      	b.n	80019f2 <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0220 	orr.w	r2, r2, #32
 80019e0:	605a      	str	r2, [r3, #4]
              break;
 80019e2:	e006      	b.n	80019f2 <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019ec:	e001      	b.n	80019f2 <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019ee:	2302      	movs	r3, #2
 80019f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	50040300 	.word	0x50040300
 8001a00:	50040100 	.word	0x50040100
 8001a04:	50040000 	.word	0x50040000

08001a08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	; 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a40:	4882      	ldr	r0, [pc, #520]	; (8001c4c <HAL_ADC_IRQHandler+0x228>)
 8001a42:	f7ff fc97 	bl	8001374 <LL_ADC_GetMultimode>
 8001a46:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d017      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x5e>
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d012      	beq.n	8001a82 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fec9 	bl	800280c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_ADC_IRQHandler+0x72>
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10a      	bne.n	8001aac <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8083 	beq.w	8001ba8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d07d      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fbb2 	bl	8001232 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d062      	beq.n	8001b9a <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <HAL_ADC_IRQHandler+0x22c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d002      	beq.n	8001ae4 <HAL_ADC_IRQHandler+0xc0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	e000      	b.n	8001ae6 <HAL_ADC_IRQHandler+0xc2>
 8001ae4:	4b5b      	ldr	r3, [pc, #364]	; (8001c54 <HAL_ADC_IRQHandler+0x230>)
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d008      	beq.n	8001b00 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d002      	beq.n	8001b00 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	2b09      	cmp	r3, #9
 8001afe:	d104      	bne.n	8001b0a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	623b      	str	r3, [r7, #32]
 8001b08:	e00c      	b.n	8001b24 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_ADC_IRQHandler+0x22c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d002      	beq.n	8001b1a <HAL_ADC_IRQHandler+0xf6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e000      	b.n	8001b1c <HAL_ADC_IRQHandler+0xf8>
 8001b1a:	4b4e      	ldr	r3, [pc, #312]	; (8001c54 <HAL_ADC_IRQHandler+0x230>)
 8001b1c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d135      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d12e      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fcbc 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d11a      	bne.n	8001b82 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 020c 	bic.w	r2, r2, #12
 8001b5a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d112      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f043 0201 	orr.w	r2, r3, #1
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
 8001b80:	e00b      	b.n	8001b9a <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	f043 0210 	orr.w	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	f043 0201 	orr.w	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe fcb4 	bl	8000508 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	220c      	movs	r2, #12
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_ADC_IRQHandler+0x198>
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f003 0320 	and.w	r3, r3, #32
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10b      	bne.n	8001bd4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 809f 	beq.w	8001d06 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8099 	beq.w	8001d06 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fb5d 	bl	80012b0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001bf6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fb18 	bl	8001232 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c02:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_ADC_IRQHandler+0x22c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d002      	beq.n	8001c14 <HAL_ADC_IRQHandler+0x1f0>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	e000      	b.n	8001c16 <HAL_ADC_IRQHandler+0x1f2>
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_ADC_IRQHandler+0x230>)
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d008      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b06      	cmp	r3, #6
 8001c28:	d002      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b07      	cmp	r3, #7
 8001c2e:	d104      	bne.n	8001c3a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	623b      	str	r3, [r7, #32]
 8001c38:	e013      	b.n	8001c62 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_ADC_IRQHandler+0x22c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_ADC_IRQHandler+0x234>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	e007      	b.n	8001c5a <HAL_ADC_IRQHandler+0x236>
 8001c4a:	bf00      	nop
 8001c4c:	50040300 	.word	0x50040300
 8001c50:	50040100 	.word	0x50040100
 8001c54:	50040000 	.word	0x50040000
 8001c58:	4b7d      	ldr	r3, [pc, #500]	; (8001e50 <HAL_ADC_IRQHandler+0x42c>)
 8001c5a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d047      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_ADC_IRQHandler+0x25e>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d03f      	beq.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d13a      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	d133      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d12e      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fc20 	bl	80014e4 <LL_ADC_INJ_IsConversionOngoing>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d11a      	bne.n	8001ce0 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cb8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d112      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd6:	f043 0201 	orr.w	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	655a      	str	r2, [r3, #84]	; 0x54
 8001cde:	e00b      	b.n	8001cf8 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	f043 0210 	orr.w	r2, r3, #16
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 fd5f 	bl	80027bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2260      	movs	r2, #96	; 0x60
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d011      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x310>
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f896 	bl	8001e58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2280      	movs	r2, #128	; 0x80
 8001d32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d012      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x340>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00d      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 fd45 	bl	80027e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d012      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x370>
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00d      	beq.n	8001d94 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fd37 	bl	80027f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d036      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x3e8>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	f003 0310 	and.w	r3, r3, #16
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d031      	beq.n	8001e0c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001db0:	2301      	movs	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
 8001db4:	e014      	b.n	8001de0 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d008      	beq.n	8001dce <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001dbc:	4825      	ldr	r0, [pc, #148]	; (8001e54 <HAL_ADC_IRQHandler+0x430>)
 8001dbe:	f7ff fae7 	bl	8001390 <LL_ADC_GetMultiDMATransfer>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	e008      	b.n	8001de0 <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d10e      	bne.n	8001e04 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dea:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f043 0202 	orr.w	r2, r3, #2
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f834 	bl	8001e6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d018      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x424>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d013      	beq.n	8001e48 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	f043 0208 	orr.w	r2, r3, #8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e40:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fcc4 	bl	80027d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e48:	bf00      	nop
 8001e4a:	3728      	adds	r7, #40	; 0x28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	50040000 	.word	0x50040000
 8001e54:	50040300 	.word	0x50040300

08001e58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b0b6      	sub	sp, #216	; 0xd8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x22>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e3c9      	b.n	8002636 <HAL_ADC_ConfigChannel+0x7b6>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fb05 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f040 83aa 	bne.w	8002610 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d824      	bhi.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	3b02      	subs	r3, #2
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d81b      	bhi.n	8001f0e <HAL_ADC_ConfigChannel+0x8e>
 8001ed6:	a201      	add	r2, pc, #4	; (adr r2, 8001edc <HAL_ADC_ConfigChannel+0x5c>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001eed 	.word	0x08001eed
 8001ee0:	08001ef5 	.word	0x08001ef5
 8001ee4:	08001efd 	.word	0x08001efd
 8001ee8:	08001f05 	.word	0x08001f05
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001eec:	230c      	movs	r3, #12
 8001eee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ef2:	e010      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ef4:	2312      	movs	r3, #18
 8001ef6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001efa:	e00c      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001efc:	2318      	movs	r3, #24
 8001efe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f02:	e008      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f0c:	e003      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f0e:	2306      	movs	r3, #6
 8001f10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001f14:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001f24:	f7ff f998 	bl	8001258 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fac6 	bl	80014be <LL_ADC_REG_IsConversionOngoing>
 8001f32:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fad2 	bl	80014e4 <LL_ADC_INJ_IsConversionOngoing>
 8001f40:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f040 81a4 	bne.w	8002296 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 819f 	bne.w	8002296 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	461a      	mov	r2, r3
 8001f66:	f7ff f9b6 	bl	80012d6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	08db      	lsrs	r3, r3, #3
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	2b04      	cmp	r3, #4
 8001f8a:	d00a      	beq.n	8001fa2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6919      	ldr	r1, [r3, #16]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f9c:	f7ff f8f4 	bl	8001188 <LL_ADC_SetOffset>
 8001fa0:	e179      	b.n	8002296 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f911 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10a      	bne.n	8001fce <HAL_ADC_ConfigChannel+0x14e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f906 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	0e9b      	lsrs	r3, r3, #26
 8001fc8:	f003 021f 	and.w	r2, r3, #31
 8001fcc:	e01e      	b.n	800200c <HAL_ADC_ConfigChannel+0x18c>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f8fb 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ff0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ff4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	e004      	b.n	800200a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002000:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x1a4>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0e9b      	lsrs	r3, r3, #26
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	e018      	b.n	8002056 <HAL_ADC_ConfigChannel+0x1d6>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800203c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002040:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002048:	2320      	movs	r3, #32
 800204a:	e004      	b.n	8002056 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800204c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002050:	fab3 f383 	clz	r3, r3
 8002054:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002056:	429a      	cmp	r2, r3
 8002058:	d106      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff f8ca 	bl	80011fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2101      	movs	r1, #1
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff f8ae 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8002074:	4603      	mov	r3, r0
 8002076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10a      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x214>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2101      	movs	r1, #1
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff f8a3 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 800208a:	4603      	mov	r3, r0
 800208c:	0e9b      	lsrs	r3, r3, #26
 800208e:	f003 021f 	and.w	r2, r3, #31
 8002092:	e01e      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x252>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f898 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80020b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80020ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e004      	b.n	80020d0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80020c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d105      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x26a>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	e018      	b.n	800211c <HAL_ADC_ConfigChannel+0x29c>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80020fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002102:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002106:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800210e:	2320      	movs	r3, #32
 8002110:	e004      	b.n	800211c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002112:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800211c:	429a      	cmp	r2, r3
 800211e:	d106      	bne.n	800212e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2200      	movs	r2, #0
 8002126:	2101      	movs	r1, #1
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff f867 	bl	80011fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2102      	movs	r1, #2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff f84b 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10a      	bne.n	800215a <HAL_ADC_ConfigChannel+0x2da>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2102      	movs	r1, #2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff f840 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8002150:	4603      	mov	r3, r0
 8002152:	0e9b      	lsrs	r3, r3, #26
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	e01e      	b.n	8002198 <HAL_ADC_ConfigChannel+0x318>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2102      	movs	r1, #2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff f835 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8002166:	4603      	mov	r3, r0
 8002168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800217c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002180:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002188:	2320      	movs	r3, #32
 800218a:	e004      	b.n	8002196 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 800218c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002190:	fab3 f383 	clz	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x330>
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	0e9b      	lsrs	r3, r3, #26
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	e014      	b.n	80021da <HAL_ADC_ConfigChannel+0x35a>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80021be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80021c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80021cc:	2320      	movs	r3, #32
 80021ce:	e004      	b.n	80021da <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80021d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021da:	429a      	cmp	r2, r3
 80021dc:	d106      	bne.n	80021ec <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	2102      	movs	r1, #2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f808 	bl	80011fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2103      	movs	r1, #3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe ffec 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10a      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x398>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2103      	movs	r1, #3
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe ffe1 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	0e9b      	lsrs	r3, r3, #26
 8002212:	f003 021f 	and.w	r2, r3, #31
 8002216:	e017      	b.n	8002248 <HAL_ADC_ConfigChannel+0x3c8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2103      	movs	r1, #3
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe ffd6 	bl	80011d0 <LL_ADC_GetOffsetChannel>
 8002224:	4603      	mov	r3, r0
 8002226:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002232:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e003      	b.n	8002246 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800223e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x3e0>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0e9b      	lsrs	r3, r3, #26
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	e011      	b.n	8002284 <HAL_ADC_ConfigChannel+0x404>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800226e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002270:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002272:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e003      	b.n	8002284 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800227c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	2103      	movs	r1, #3
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe ffb3 	bl	80011fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f8e8 	bl	8001470 <LL_ADC_IsEnabled>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 8140 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6818      	ldr	r0, [r3, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	461a      	mov	r2, r3
 80022b6:	f7ff f839 	bl	800132c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	4a8f      	ldr	r2, [pc, #572]	; (80024fc <HAL_ADC_ConfigChannel+0x67c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	f040 8131 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10b      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x46e>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	0e9b      	lsrs	r3, r3, #26
 80022dc:	3301      	adds	r3, #1
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	2b09      	cmp	r3, #9
 80022e4:	bf94      	ite	ls
 80022e6:	2301      	movls	r3, #1
 80022e8:	2300      	movhi	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	e019      	b.n	8002322 <HAL_ADC_ConfigChannel+0x4a2>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002300:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002306:	2320      	movs	r3, #32
 8002308:	e003      	b.n	8002312 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800230a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230c:	fab3 f383 	clz	r3, r3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	2b09      	cmp	r3, #9
 800231a:	bf94      	ite	ls
 800231c:	2301      	movls	r3, #1
 800231e:	2300      	movhi	r3, #0
 8002320:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002322:	2b00      	cmp	r3, #0
 8002324:	d079      	beq.n	800241a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232e:	2b00      	cmp	r3, #0
 8002330:	d107      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x4c2>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0e9b      	lsrs	r3, r3, #26
 8002338:	3301      	adds	r3, #1
 800233a:	069b      	lsls	r3, r3, #26
 800233c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002340:	e015      	b.n	800236e <HAL_ADC_ConfigChannel+0x4ee>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234a:	fa93 f3a3 	rbit	r3, r3
 800234e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002352:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800235a:	2320      	movs	r3, #32
 800235c:	e003      	b.n	8002366 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800235e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	3301      	adds	r3, #1
 8002368:	069b      	lsls	r3, r3, #26
 800236a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_ADC_ConfigChannel+0x50e>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0e9b      	lsrs	r3, r3, #26
 8002380:	3301      	adds	r3, #1
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	e017      	b.n	80023be <HAL_ADC_ConfigChannel+0x53e>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800239c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80023a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80023a6:	2320      	movs	r3, #32
 80023a8:	e003      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80023aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	2101      	movs	r1, #1
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	ea42 0103 	orr.w	r1, r2, r3
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10a      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x564>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	0e9b      	lsrs	r3, r3, #26
 80023d4:	3301      	adds	r3, #1
 80023d6:	f003 021f 	and.w	r2, r3, #31
 80023da:	4613      	mov	r3, r2
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	4413      	add	r3, r2
 80023e0:	051b      	lsls	r3, r3, #20
 80023e2:	e018      	b.n	8002416 <HAL_ADC_ConfigChannel+0x596>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ec:	fa93 f3a3 	rbit	r3, r3
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80023f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80023fc:	2320      	movs	r3, #32
 80023fe:	e003      	b.n	8002408 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	3301      	adds	r3, #1
 800240a:	f003 021f 	and.w	r2, r3, #31
 800240e:	4613      	mov	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4413      	add	r3, r2
 8002414:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002416:	430b      	orrs	r3, r1
 8002418:	e081      	b.n	800251e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x5b6>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	3301      	adds	r3, #1
 800242e:	069b      	lsls	r3, r3, #26
 8002430:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002434:	e015      	b.n	8002462 <HAL_ADC_ConfigChannel+0x5e2>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800244e:	2320      	movs	r3, #32
 8002450:	e003      	b.n	800245a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	3301      	adds	r3, #1
 800245c:	069b      	lsls	r3, r3, #26
 800245e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x602>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	3301      	adds	r3, #1
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	2101      	movs	r1, #1
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	e017      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x632>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	61bb      	str	r3, [r7, #24]
  return result;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e003      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	fab3 f383 	clz	r3, r3
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	3301      	adds	r3, #1
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	ea42 0103 	orr.w	r1, r2, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <HAL_ADC_ConfigChannel+0x65e>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e9b      	lsrs	r3, r3, #26
 80024c8:	3301      	adds	r3, #1
 80024ca:	f003 021f 	and.w	r2, r3, #31
 80024ce:	4613      	mov	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	3b1e      	subs	r3, #30
 80024d6:	051b      	lsls	r3, r3, #20
 80024d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024dc:	e01e      	b.n	800251c <HAL_ADC_ConfigChannel+0x69c>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	60fb      	str	r3, [r7, #12]
  return result;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d104      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80024f6:	2320      	movs	r3, #32
 80024f8:	e006      	b.n	8002508 <HAL_ADC_ConfigChannel+0x688>
 80024fa:	bf00      	nop
 80024fc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	f003 021f 	and.w	r2, r3, #31
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	3b1e      	subs	r3, #30
 8002516:	051b      	lsls	r3, r3, #20
 8002518:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fed7 	bl	80012d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b44      	ldr	r3, [pc, #272]	; (8002640 <HAL_ADC_ConfigChannel+0x7c0>)
 800252e:	4013      	ands	r3, r2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d07a      	beq.n	800262a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002534:	4843      	ldr	r0, [pc, #268]	; (8002644 <HAL_ADC_ConfigChannel+0x7c4>)
 8002536:	f7fe fe19 	bl	800116c <LL_ADC_GetCommonPathInternalCh>
 800253a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a41      	ldr	r2, [pc, #260]	; (8002648 <HAL_ADC_ConfigChannel+0x7c8>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d12c      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800254c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d126      	bne.n	80025a2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3c      	ldr	r2, [pc, #240]	; (800264c <HAL_ADC_ConfigChannel+0x7cc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_ADC_ConfigChannel+0x6e8>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a3b      	ldr	r2, [pc, #236]	; (8002650 <HAL_ADC_ConfigChannel+0x7d0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d15d      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800256c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002570:	4619      	mov	r1, r3
 8002572:	4834      	ldr	r0, [pc, #208]	; (8002644 <HAL_ADC_ConfigChannel+0x7c4>)
 8002574:	f7fe fde7 	bl	8001146 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002578:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_ADC_ConfigChannel+0x7d4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	4a36      	ldr	r2, [pc, #216]	; (8002658 <HAL_ADC_ConfigChannel+0x7d8>)
 8002580:	fba2 2303 	umull	r2, r3, r2, r3
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002592:	e002      	b.n	800259a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	3b01      	subs	r3, #1
 8002598:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025a0:	e040      	b.n	8002624 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a2d      	ldr	r2, [pc, #180]	; (800265c <HAL_ADC_ConfigChannel+0x7dc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d118      	bne.n	80025de <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d112      	bne.n	80025de <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a23      	ldr	r2, [pc, #140]	; (800264c <HAL_ADC_ConfigChannel+0x7cc>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d004      	beq.n	80025cc <HAL_ADC_ConfigChannel+0x74c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a22      	ldr	r2, [pc, #136]	; (8002650 <HAL_ADC_ConfigChannel+0x7d0>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d12d      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d4:	4619      	mov	r1, r3
 80025d6:	481b      	ldr	r0, [pc, #108]	; (8002644 <HAL_ADC_ConfigChannel+0x7c4>)
 80025d8:	f7fe fdb5 	bl	8001146 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025dc:	e024      	b.n	8002628 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1f      	ldr	r2, [pc, #124]	; (8002660 <HAL_ADC_ConfigChannel+0x7e0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d120      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d11a      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_ADC_ConfigChannel+0x7cc>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d115      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002602:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002606:	4619      	mov	r1, r3
 8002608:	480e      	ldr	r0, [pc, #56]	; (8002644 <HAL_ADC_ConfigChannel+0x7c4>)
 800260a:	f7fe fd9c 	bl	8001146 <LL_ADC_SetCommonPathInternalCh>
 800260e:	e00c      	b.n	800262a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f043 0220 	orr.w	r2, r3, #32
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002622:	e002      	b.n	800262a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002624:	bf00      	nop
 8002626:	e000      	b.n	800262a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002628:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002632:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002636:	4618      	mov	r0, r3
 8002638:	37d8      	adds	r7, #216	; 0xd8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	80080000 	.word	0x80080000
 8002644:	50040300 	.word	0x50040300
 8002648:	c7520000 	.word	0xc7520000
 800264c:	50040000 	.word	0x50040000
 8002650:	50040200 	.word	0x50040200
 8002654:	20000000 	.word	0x20000000
 8002658:	053e2d63 	.word	0x053e2d63
 800265c:	cb840000 	.word	0xcb840000
 8002660:	80000001 	.word	0x80000001

08002664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fefb 	bl	8001470 <LL_ADC_IsEnabled>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d169      	bne.n	8002754 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <ADC_Enable+0xfc>)
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00d      	beq.n	80026aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	f043 0210 	orr.w	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269e:	f043 0201 	orr.w	r2, r3, #1
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e055      	b.n	8002756 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe feca 	bl	8001448 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026b4:	482b      	ldr	r0, [pc, #172]	; (8002764 <ADC_Enable+0x100>)
 80026b6:	f7fe fd59 	bl	800116c <LL_ADC_GetCommonPathInternalCh>
 80026ba:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d013      	beq.n	80026ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c4:	4b28      	ldr	r3, [pc, #160]	; (8002768 <ADC_Enable+0x104>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	4a28      	ldr	r2, [pc, #160]	; (800276c <ADC_Enable+0x108>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	1c5a      	adds	r2, r3, #1
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026de:	e002      	b.n	80026e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f9      	bne.n	80026e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026ec:	f7fe fce8 	bl	80010c0 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026f2:	e028      	b.n	8002746 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fe feb9 	bl	8001470 <LL_ADC_IsEnabled>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d104      	bne.n	800270e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fe9d 	bl	8001448 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800270e:	f7fe fcd7 	bl	80010c0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d914      	bls.n	8002746 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b01      	cmp	r3, #1
 8002728:	d00d      	beq.n	8002746 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f043 0210 	orr.w	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e007      	b.n	8002756 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d1cf      	bne.n	80026f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	8000003f 	.word	0x8000003f
 8002764:	50040300 	.word	0x50040300
 8002768:	20000000 	.word	0x20000000
 800276c:	053e2d63 	.word	0x053e2d63

08002770 <LL_ADC_IsEnabled>:
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <LL_ADC_IsEnabled+0x18>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <LL_ADC_IsEnabled+0x1a>
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <LL_ADC_REG_IsConversionOngoing>:
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d101      	bne.n	80027ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b09f      	sub	sp, #124	; 0x7c
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800283a:	2302      	movs	r3, #2
 800283c:	e093      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002846:	2300      	movs	r3, #0
 8002848:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800284a:	2300      	movs	r3, #0
 800284c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a47      	ldr	r2, [pc, #284]	; (8002970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d102      	bne.n	800285e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002858:	4b46      	ldr	r3, [pc, #280]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	e001      	b.n	8002862 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e072      	b.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff87 	bl	8002796 <LL_ADC_REG_IsConversionOngoing>
 8002888:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff ff81 	bl	8002796 <LL_ADC_REG_IsConversionOngoing>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d154      	bne.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800289a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800289c:	2b00      	cmp	r3, #0
 800289e:	d151      	bne.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80028a0:	4b35      	ldr	r3, [pc, #212]	; (8002978 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80028a2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d02c      	beq.n	8002906 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80028ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028be:	035b      	lsls	r3, r3, #13
 80028c0:	430b      	orrs	r3, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028c8:	4829      	ldr	r0, [pc, #164]	; (8002970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028ca:	f7ff ff51 	bl	8002770 <LL_ADC_IsEnabled>
 80028ce:	4604      	mov	r4, r0
 80028d0:	4828      	ldr	r0, [pc, #160]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028d2:	f7ff ff4d 	bl	8002770 <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	431c      	orrs	r4, r3
 80028da:	4828      	ldr	r0, [pc, #160]	; (800297c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80028dc:	f7ff ff48 	bl	8002770 <LL_ADC_IsEnabled>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4323      	orrs	r3, r4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d137      	bne.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028f0:	f023 030f 	bic.w	r3, r3, #15
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	6811      	ldr	r1, [r2, #0]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	6892      	ldr	r2, [r2, #8]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	431a      	orrs	r2, r3
 8002900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002902:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002904:	e028      	b.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800290e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002910:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002912:	4817      	ldr	r0, [pc, #92]	; (8002970 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002914:	f7ff ff2c 	bl	8002770 <LL_ADC_IsEnabled>
 8002918:	4604      	mov	r4, r0
 800291a:	4816      	ldr	r0, [pc, #88]	; (8002974 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800291c:	f7ff ff28 	bl	8002770 <LL_ADC_IsEnabled>
 8002920:	4603      	mov	r3, r0
 8002922:	431c      	orrs	r4, r3
 8002924:	4815      	ldr	r0, [pc, #84]	; (800297c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002926:	f7ff ff23 	bl	8002770 <LL_ADC_IsEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	4323      	orrs	r3, r4
 800292e:	2b00      	cmp	r3, #0
 8002930:	d112      	bne.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800293a:	f023 030f 	bic.w	r3, r3, #15
 800293e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002940:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002942:	e009      	b.n	8002958 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002956:	e000      	b.n	800295a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002958:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002962:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002966:	4618      	mov	r0, r3
 8002968:	377c      	adds	r7, #124	; 0x7c
 800296a:	46bd      	mov	sp, r7
 800296c:	bd90      	pop	{r4, r7, pc}
 800296e:	bf00      	nop
 8002970:	50040000 	.word	0x50040000
 8002974:	50040100 	.word	0x50040100
 8002978:	50040300 	.word	0x50040300
 800297c:	50040200 	.word	0x50040200

08002980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002990:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b2:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <__NVIC_SetPriorityGrouping+0x44>)
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	60d3      	str	r3, [r2, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <__NVIC_GetPriorityGrouping+0x18>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	0a1b      	lsrs	r3, r3, #8
 80029d2:	f003 0307 	and.w	r3, r3, #7
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	db0b      	blt.n	8002a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	4907      	ldr	r1, [pc, #28]	; (8002a1c <__NVIC_EnableIRQ+0x38>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2001      	movs	r0, #1
 8002a06:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aec:	d301      	bcc.n	8002af2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aee:	2301      	movs	r3, #1
 8002af0:	e00f      	b.n	8002b12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <SysTick_Config+0x40>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002afa:	210f      	movs	r1, #15
 8002afc:	f04f 30ff 	mov.w	r0, #4294967295
 8002b00:	f7ff ff8e 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <SysTick_Config+0x40>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b0a:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <SysTick_Config+0x40>)
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	e000e010 	.word	0xe000e010

08002b20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ff29 	bl	8002980 <__NVIC_SetPriorityGrouping>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b48:	f7ff ff3e 	bl	80029c8 <__NVIC_GetPriorityGrouping>
 8002b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	6978      	ldr	r0, [r7, #20]
 8002b54:	f7ff ff8e 	bl	8002a74 <NVIC_EncodePriority>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff5d 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff31 	bl	80029e4 <__NVIC_EnableIRQ>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffa2 	bl	8002adc <SysTick_Config>
 8002b98:	4603      	mov	r3, r0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e098      	b.n	8002ce8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4b4d      	ldr	r3, [pc, #308]	; (8002cf4 <HAL_DMA_Init+0x150>)
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d80f      	bhi.n	8002be2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <HAL_DMA_Init+0x154>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a4b      	ldr	r2, [pc, #300]	; (8002cfc <HAL_DMA_Init+0x158>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	009a      	lsls	r2, r3, #2
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a48      	ldr	r2, [pc, #288]	; (8002d00 <HAL_DMA_Init+0x15c>)
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40
 8002be0:	e00e      	b.n	8002c00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <HAL_DMA_Init+0x160>)
 8002bea:	4413      	add	r3, r2
 8002bec:	4a43      	ldr	r2, [pc, #268]	; (8002cfc <HAL_DMA_Init+0x158>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	009a      	lsls	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a42      	ldr	r2, [pc, #264]	; (8002d08 <HAL_DMA_Init+0x164>)
 8002bfe:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c5a:	d039      	beq.n	8002cd0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	4a27      	ldr	r2, [pc, #156]	; (8002d00 <HAL_DMA_Init+0x15c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d11a      	bne.n	8002c9c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c66:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <HAL_DMA_Init+0x168>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f003 031c 	and.w	r3, r3, #28
 8002c72:	210f      	movs	r1, #15
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	4924      	ldr	r1, [pc, #144]	; (8002d0c <HAL_DMA_Init+0x168>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c80:	4b22      	ldr	r3, [pc, #136]	; (8002d0c <HAL_DMA_Init+0x168>)
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	f003 031c 	and.w	r3, r3, #28
 8002c90:	fa01 f303 	lsl.w	r3, r1, r3
 8002c94:	491d      	ldr	r1, [pc, #116]	; (8002d0c <HAL_DMA_Init+0x168>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	600b      	str	r3, [r1, #0]
 8002c9a:	e019      	b.n	8002cd0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c9c:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_DMA_Init+0x16c>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca4:	f003 031c 	and.w	r3, r3, #28
 8002ca8:	210f      	movs	r1, #15
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	4917      	ldr	r1, [pc, #92]	; (8002d10 <HAL_DMA_Init+0x16c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002cb6:	4b16      	ldr	r3, [pc, #88]	; (8002d10 <HAL_DMA_Init+0x16c>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f003 031c 	and.w	r3, r3, #28
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	4911      	ldr	r1, [pc, #68]	; (8002d10 <HAL_DMA_Init+0x16c>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40020407 	.word	0x40020407
 8002cf8:	bffdfff8 	.word	0xbffdfff8
 8002cfc:	cccccccd 	.word	0xcccccccd
 8002d00:	40020000 	.word	0x40020000
 8002d04:	bffdfbf8 	.word	0xbffdfbf8
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	400200a8 	.word	0x400200a8
 8002d10:	400204a8 	.word	0x400204a8

08002d14 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d008      	beq.n	8002d3e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e022      	b.n	8002d84 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 020e 	bic.w	r2, r2, #14
 8002d4c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f003 021c 	and.w	r2, r3, #28
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d70:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d005      	beq.n	8002db4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2204      	movs	r2, #4
 8002dac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	e029      	b.n	8002e08 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 020e 	bic.w	r2, r2, #14
 8002dc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	f003 021c 	and.w	r2, r3, #28
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	2101      	movs	r1, #1
 8002de2:	fa01 f202 	lsl.w	r2, r1, r2
 8002de6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
    }
  }
  return status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f003 031c 	and.w	r3, r3, #28
 8002e32:	2204      	movs	r2, #4
 8002e34:	409a      	lsls	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d026      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x7a>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d021      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d107      	bne.n	8002e66 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0204 	bic.w	r2, r2, #4
 8002e64:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6a:	f003 021c 	and.w	r2, r3, #28
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	2104      	movs	r1, #4
 8002e74:	fa01 f202 	lsl.w	r2, r1, r2
 8002e78:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d071      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e8a:	e06c      	b.n	8002f66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	f003 031c 	and.w	r3, r3, #28
 8002e94:	2202      	movs	r2, #2
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d02e      	beq.n	8002efe <HAL_DMA_IRQHandler+0xec>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d029      	beq.n	8002efe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 020a 	bic.w	r2, r2, #10
 8002ec6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	f003 021c 	and.w	r2, r3, #28
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2102      	movs	r1, #2
 8002ede:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d038      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002efc:	e033      	b.n	8002f66 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f003 031c 	and.w	r3, r3, #28
 8002f06:	2208      	movs	r2, #8
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02a      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x156>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d025      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 020e 	bic.w	r2, r2, #14
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f30:	f003 021c 	and.w	r2, r3, #28
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	2101      	movs	r1, #1
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f66:	bf00      	nop
 8002f68:	bf00      	nop
}
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7e:	e17f      	b.n	8003280 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2101      	movs	r1, #1
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8171 	beq.w	800327a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d005      	beq.n	8002fb0 <HAL_GPIO_Init+0x40>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0303 	and.w	r3, r3, #3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d130      	bne.n	8003012 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	2203      	movs	r2, #3
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	f003 0201 	and.w	r2, r3, #1
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b03      	cmp	r3, #3
 800301c:	d118      	bne.n	8003050 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003024:	2201      	movs	r2, #1
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	08db      	lsrs	r3, r3, #3
 800303a:	f003 0201 	and.w	r2, r3, #1
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b03      	cmp	r3, #3
 800305a:	d017      	beq.n	800308c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	2203      	movs	r2, #3
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4313      	orrs	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d123      	bne.n	80030e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	08da      	lsrs	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3208      	adds	r2, #8
 80030a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	220f      	movs	r2, #15
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691a      	ldr	r2, [r3, #16]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	08da      	lsrs	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3208      	adds	r2, #8
 80030da:	6939      	ldr	r1, [r7, #16]
 80030dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	2203      	movs	r2, #3
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0203 	and.w	r2, r3, #3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80ac 	beq.w	800327a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_GPIO_Init+0x330>)
 8003124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003126:	4a5e      	ldr	r2, [pc, #376]	; (80032a0 <HAL_GPIO_Init+0x330>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6613      	str	r3, [r2, #96]	; 0x60
 800312e:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_GPIO_Init+0x330>)
 8003130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800313a:	4a5a      	ldr	r2, [pc, #360]	; (80032a4 <HAL_GPIO_Init+0x334>)
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3302      	adds	r3, #2
 8003142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003146:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	220f      	movs	r2, #15
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003164:	d025      	beq.n	80031b2 <HAL_GPIO_Init+0x242>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a4f      	ldr	r2, [pc, #316]	; (80032a8 <HAL_GPIO_Init+0x338>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01f      	beq.n	80031ae <HAL_GPIO_Init+0x23e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a4e      	ldr	r2, [pc, #312]	; (80032ac <HAL_GPIO_Init+0x33c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_Init+0x23a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4d      	ldr	r2, [pc, #308]	; (80032b0 <HAL_GPIO_Init+0x340>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_Init+0x236>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a4c      	ldr	r2, [pc, #304]	; (80032b4 <HAL_GPIO_Init+0x344>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_Init+0x232>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a4b      	ldr	r2, [pc, #300]	; (80032b8 <HAL_GPIO_Init+0x348>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x22e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a4a      	ldr	r2, [pc, #296]	; (80032bc <HAL_GPIO_Init+0x34c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_Init+0x22a>
 8003196:	2306      	movs	r3, #6
 8003198:	e00c      	b.n	80031b4 <HAL_GPIO_Init+0x244>
 800319a:	2307      	movs	r3, #7
 800319c:	e00a      	b.n	80031b4 <HAL_GPIO_Init+0x244>
 800319e:	2305      	movs	r3, #5
 80031a0:	e008      	b.n	80031b4 <HAL_GPIO_Init+0x244>
 80031a2:	2304      	movs	r3, #4
 80031a4:	e006      	b.n	80031b4 <HAL_GPIO_Init+0x244>
 80031a6:	2303      	movs	r3, #3
 80031a8:	e004      	b.n	80031b4 <HAL_GPIO_Init+0x244>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e002      	b.n	80031b4 <HAL_GPIO_Init+0x244>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <HAL_GPIO_Init+0x244>
 80031b2:	2300      	movs	r3, #0
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	f002 0203 	and.w	r2, r2, #3
 80031ba:	0092      	lsls	r2, r2, #2
 80031bc:	4093      	lsls	r3, r2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031c4:	4937      	ldr	r1, [pc, #220]	; (80032a4 <HAL_GPIO_Init+0x334>)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	3302      	adds	r3, #2
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <HAL_GPIO_Init+0x350>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031f6:	4a32      	ldr	r2, [pc, #200]	; (80032c0 <HAL_GPIO_Init+0x350>)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031fc:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <HAL_GPIO_Init+0x350>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003220:	4a27      	ldr	r2, [pc, #156]	; (80032c0 <HAL_GPIO_Init+0x350>)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003226:	4b26      	ldr	r3, [pc, #152]	; (80032c0 <HAL_GPIO_Init+0x350>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800324a:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <HAL_GPIO_Init+0x350>)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_GPIO_Init+0x350>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	43db      	mvns	r3, r3
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4013      	ands	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_GPIO_Init+0x350>)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	3301      	adds	r3, #1
 800327e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	fa22 f303 	lsr.w	r3, r2, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	f47f ae78 	bne.w	8002f80 <HAL_GPIO_Init+0x10>
  }
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40010000 	.word	0x40010000
 80032a8:	48000400 	.word	0x48000400
 80032ac:	48000800 	.word	0x48000800
 80032b0:	48000c00 	.word	0x48000c00
 80032b4:	48001000 	.word	0x48001000
 80032b8:	48001400 	.word	0x48001400
 80032bc:	48001800 	.word	0x48001800
 80032c0:	40010400 	.word	0x40010400

080032c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
 80032d0:	4613      	mov	r3, r2
 80032d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d4:	787b      	ldrb	r3, [r7, #1]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032e0:	e002      	b.n	80032e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4013      	ands	r3, r2
 800330c:	041a      	lsls	r2, r3, #16
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43d9      	mvns	r1, r3
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	400b      	ands	r3, r1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	619a      	str	r2, [r3, #24]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <HAL_PWREx_GetVoltageRange+0x18>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	40007000 	.word	0x40007000

08003344 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003352:	d130      	bne.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800335c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003360:	d038      	beq.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003362:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800336a:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800336c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003370:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2232      	movs	r2, #50	; 0x32
 8003378:	fb02 f303 	mul.w	r3, r2, r3
 800337c:	4a1b      	ldr	r2, [pc, #108]	; (80033ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	0c9b      	lsrs	r3, r3, #18
 8003384:	3301      	adds	r3, #1
 8003386:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003388:	e002      	b.n	8003390 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	3b01      	subs	r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339c:	d102      	bne.n	80033a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f2      	bne.n	800338a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b0:	d110      	bne.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e00f      	b.n	80033d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d007      	beq.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033c4:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033cc:	4a05      	ldr	r2, [pc, #20]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40007000 	.word	0x40007000
 80033e8:	20000000 	.word	0x20000000
 80033ec:	431bde83 	.word	0x431bde83

080033f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e3ca      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003402:	4b97      	ldr	r3, [pc, #604]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800340c:	4b94      	ldr	r3, [pc, #592]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80e4 	beq.w	80035ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_RCC_OscConfig+0x4a>
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b0c      	cmp	r3, #12
 800342e:	f040 808b 	bne.w	8003548 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2b01      	cmp	r3, #1
 8003436:	f040 8087 	bne.w	8003548 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800343a:	4b89      	ldr	r3, [pc, #548]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d005      	beq.n	8003452 <HAL_RCC_OscConfig+0x62>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e3a2      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1a      	ldr	r2, [r3, #32]
 8003456:	4b82      	ldr	r3, [pc, #520]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d004      	beq.n	800346c <HAL_RCC_OscConfig+0x7c>
 8003462:	4b7f      	ldr	r3, [pc, #508]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346a:	e005      	b.n	8003478 <HAL_RCC_OscConfig+0x88>
 800346c:	4b7c      	ldr	r3, [pc, #496]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 800346e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003478:	4293      	cmp	r3, r2
 800347a:	d223      	bcs.n	80034c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 fd55 	bl	8003f30 <RCC_SetFlashLatencyFromMSIRange>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e383      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003490:	4b73      	ldr	r3, [pc, #460]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a72      	ldr	r2, [pc, #456]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003496:	f043 0308 	orr.w	r3, r3, #8
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b70      	ldr	r3, [pc, #448]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	496d      	ldr	r1, [pc, #436]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ae:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	4968      	ldr	r1, [pc, #416]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
 80034c2:	e025      	b.n	8003510 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c4:	4b66      	ldr	r3, [pc, #408]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a65      	ldr	r2, [pc, #404]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80034ca:	f043 0308 	orr.w	r3, r3, #8
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b63      	ldr	r3, [pc, #396]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4960      	ldr	r1, [pc, #384]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e2:	4b5f      	ldr	r3, [pc, #380]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	495b      	ldr	r1, [pc, #364]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fd15 	bl	8003f30 <RCC_SetFlashLatencyFromMSIRange>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e343      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003510:	f000 fc4a 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8003514:	4602      	mov	r2, r0
 8003516:	4b52      	ldr	r3, [pc, #328]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	4950      	ldr	r1, [pc, #320]	; (8003664 <HAL_RCC_OscConfig+0x274>)
 8003522:	5ccb      	ldrb	r3, [r1, r3]
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	fa22 f303 	lsr.w	r3, r2, r3
 800352c:	4a4e      	ldr	r2, [pc, #312]	; (8003668 <HAL_RCC_OscConfig+0x278>)
 800352e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003530:	4b4e      	ldr	r3, [pc, #312]	; (800366c <HAL_RCC_OscConfig+0x27c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd fd73 	bl	8001020 <HAL_InitTick>
 800353a:	4603      	mov	r3, r0
 800353c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800353e:	7bfb      	ldrb	r3, [r7, #15]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d052      	beq.n	80035ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	e327      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d032      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003550:	4b43      	ldr	r3, [pc, #268]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a42      	ldr	r2, [pc, #264]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800355c:	f7fd fdb0 	bl	80010c0 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003564:	f7fd fdac 	bl	80010c0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e310      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003576:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a36      	ldr	r2, [pc, #216]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003588:	f043 0308 	orr.w	r3, r3, #8
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b34      	ldr	r3, [pc, #208]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4931      	ldr	r1, [pc, #196]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 800359c:	4313      	orrs	r3, r2
 800359e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035a0:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	021b      	lsls	r3, r3, #8
 80035ae:	492c      	ldr	r1, [pc, #176]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	604b      	str	r3, [r1, #4]
 80035b4:	e01a      	b.n	80035ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035b6:	4b2a      	ldr	r3, [pc, #168]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a29      	ldr	r2, [pc, #164]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035c2:	f7fd fd7d 	bl	80010c0 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ca:	f7fd fd79 	bl	80010c0 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e2dd      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035dc:	4b20      	ldr	r3, [pc, #128]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x1da>
 80035e8:	e000      	b.n	80035ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d074      	beq.n	80036e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d005      	beq.n	800360a <HAL_RCC_OscConfig+0x21a>
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d10e      	bne.n	8003622 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d10b      	bne.n	8003622 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d064      	beq.n	80036e0 <HAL_RCC_OscConfig+0x2f0>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d160      	bne.n	80036e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e2ba      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x24a>
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e026      	b.n	8003688 <HAL_RCC_OscConfig+0x298>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003642:	d115      	bne.n	8003670 <HAL_RCC_OscConfig+0x280>
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a05      	ldr	r2, [pc, #20]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 800364a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a02      	ldr	r2, [pc, #8]	; (8003660 <HAL_RCC_OscConfig+0x270>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e014      	b.n	8003688 <HAL_RCC_OscConfig+0x298>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	08006274 	.word	0x08006274
 8003668:	20000000 	.word	0x20000000
 800366c:	20000004 	.word	0x20000004
 8003670:	4ba0      	ldr	r3, [pc, #640]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a9f      	ldr	r2, [pc, #636]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b9d      	ldr	r3, [pc, #628]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a9c      	ldr	r2, [pc, #624]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd fd16 	bl	80010c0 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fd fd12 	bl	80010c0 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e276      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036aa:	4b92      	ldr	r3, [pc, #584]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x2a8>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b8:	f7fd fd02 	bl	80010c0 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fd fcfe 	bl	80010c0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e262      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036d2:	4b88      	ldr	r3, [pc, #544]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x2d0>
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d060      	beq.n	80037b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_OscConfig+0x310>
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d119      	bne.n	800372e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d116      	bne.n	800372e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003700:	4b7c      	ldr	r3, [pc, #496]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_OscConfig+0x328>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e23f      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003718:	4b76      	ldr	r3, [pc, #472]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	061b      	lsls	r3, r3, #24
 8003726:	4973      	ldr	r1, [pc, #460]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800372c:	e040      	b.n	80037b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d023      	beq.n	800377e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003736:	4b6f      	ldr	r3, [pc, #444]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a6e      	ldr	r2, [pc, #440]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fd fcbd 	bl	80010c0 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374a:	f7fd fcb9 	bl	80010c0 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e21d      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375c:	4b65      	ldr	r3, [pc, #404]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b62      	ldr	r3, [pc, #392]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	495f      	ldr	r1, [pc, #380]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
 800377c:	e018      	b.n	80037b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377e:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a5c      	ldr	r2, [pc, #368]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fd fc99 	bl	80010c0 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003792:	f7fd fc95 	bl	80010c0 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e1f9      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037a4:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1f0      	bne.n	8003792 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d03c      	beq.n	8003836 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01c      	beq.n	80037fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c4:	4b4b      	ldr	r3, [pc, #300]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80037c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ca:	4a4a      	ldr	r2, [pc, #296]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d4:	f7fd fc74 	bl	80010c0 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037dc:	f7fd fc70 	bl	80010c0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e1d4      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ee:	4b41      	ldr	r3, [pc, #260]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80037f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ef      	beq.n	80037dc <HAL_RCC_OscConfig+0x3ec>
 80037fc:	e01b      	b.n	8003836 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fe:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	4a3b      	ldr	r2, [pc, #236]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380e:	f7fd fc57 	bl	80010c0 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003816:	f7fd fc53 	bl	80010c0 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e1b7      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 800382a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1ef      	bne.n	8003816 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80a6 	beq.w	8003990 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003844:	2300      	movs	r3, #0
 8003846:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003848:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10d      	bne.n	8003870 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003854:	4b27      	ldr	r3, [pc, #156]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003858:	4a26      	ldr	r2, [pc, #152]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 800385a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385e:	6593      	str	r3, [r2, #88]	; 0x58
 8003860:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386c:	2301      	movs	r3, #1
 800386e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003870:	4b21      	ldr	r3, [pc, #132]	; (80038f8 <HAL_RCC_OscConfig+0x508>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d118      	bne.n	80038ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800387c:	4b1e      	ldr	r3, [pc, #120]	; (80038f8 <HAL_RCC_OscConfig+0x508>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a1d      	ldr	r2, [pc, #116]	; (80038f8 <HAL_RCC_OscConfig+0x508>)
 8003882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003886:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003888:	f7fd fc1a 	bl	80010c0 <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003890:	f7fd fc16 	bl	80010c0 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e17a      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a2:	4b15      	ldr	r3, [pc, #84]	; (80038f8 <HAL_RCC_OscConfig+0x508>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d108      	bne.n	80038c8 <HAL_RCC_OscConfig+0x4d8>
 80038b6:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80038b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038bc:	4a0d      	ldr	r2, [pc, #52]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c6:	e029      	b.n	800391c <HAL_RCC_OscConfig+0x52c>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b05      	cmp	r3, #5
 80038ce:	d115      	bne.n	80038fc <HAL_RCC_OscConfig+0x50c>
 80038d0:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80038d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d6:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	4a03      	ldr	r2, [pc, #12]	; (80038f4 <HAL_RCC_OscConfig+0x504>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038f0:	e014      	b.n	800391c <HAL_RCC_OscConfig+0x52c>
 80038f2:	bf00      	nop
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40007000 	.word	0x40007000
 80038fc:	4b9c      	ldr	r3, [pc, #624]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	4a9b      	ldr	r2, [pc, #620]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800390c:	4b98      	ldr	r3, [pc, #608]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	4a97      	ldr	r2, [pc, #604]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003914:	f023 0304 	bic.w	r3, r3, #4
 8003918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d016      	beq.n	8003952 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fbcc 	bl	80010c0 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392c:	f7fd fbc8 	bl	80010c0 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	; 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e12a      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003942:	4b8b      	ldr	r3, [pc, #556]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ed      	beq.n	800392c <HAL_RCC_OscConfig+0x53c>
 8003950:	e015      	b.n	800397e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003952:	f7fd fbb5 	bl	80010c0 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003958:	e00a      	b.n	8003970 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395a:	f7fd fbb1 	bl	80010c0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	f241 3288 	movw	r2, #5000	; 0x1388
 8003968:	4293      	cmp	r3, r2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e113      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003970:	4b7f      	ldr	r3, [pc, #508]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ed      	bne.n	800395a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397e:	7ffb      	ldrb	r3, [r7, #31]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b7a      	ldr	r3, [pc, #488]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	4a79      	ldr	r2, [pc, #484]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80fe 	beq.w	8003b96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	2b02      	cmp	r3, #2
 80039a0:	f040 80d0 	bne.w	8003b44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039a4:	4b72      	ldr	r3, [pc, #456]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0203 	and.w	r2, r3, #3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d130      	bne.n	8003a1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	3b01      	subs	r3, #1
 80039c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d127      	bne.n	8003a1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d11f      	bne.n	8003a1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039e4:	2a07      	cmp	r2, #7
 80039e6:	bf14      	ite	ne
 80039e8:	2201      	movne	r2, #1
 80039ea:	2200      	moveq	r2, #0
 80039ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d113      	bne.n	8003a1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	3b01      	subs	r3, #1
 8003a00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d06e      	beq.n	8003af8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b0c      	cmp	r3, #12
 8003a1e:	d069      	beq.n	8003af4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a20:	4b53      	ldr	r3, [pc, #332]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a2c:	4b50      	ldr	r3, [pc, #320]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0ad      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a3c:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a4b      	ldr	r2, [pc, #300]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003a42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a48:	f7fd fb3a 	bl	80010c0 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fd fb36 	bl	80010c0 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e09a      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a62:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a6e:	4b40      	ldr	r3, [pc, #256]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <HAL_RCC_OscConfig+0x784>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a7e:	3a01      	subs	r2, #1
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	4311      	orrs	r1, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a88:	0212      	lsls	r2, r2, #8
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a90:	0852      	lsrs	r2, r2, #1
 8003a92:	3a01      	subs	r2, #1
 8003a94:	0552      	lsls	r2, r2, #21
 8003a96:	4311      	orrs	r1, r2
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a9c:	0852      	lsrs	r2, r2, #1
 8003a9e:	3a01      	subs	r2, #1
 8003aa0:	0652      	lsls	r2, r2, #25
 8003aa2:	4311      	orrs	r1, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aa8:	0912      	lsrs	r2, r2, #4
 8003aaa:	0452      	lsls	r2, r2, #17
 8003aac:	430a      	orrs	r2, r1
 8003aae:	4930      	ldr	r1, [pc, #192]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a2d      	ldr	r2, [pc, #180]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003abe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac0:	4b2b      	ldr	r3, [pc, #172]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003acc:	f7fd faf8 	bl	80010c0 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd faf4 	bl	80010c0 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e058      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae6:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0f0      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003af2:	e050      	b.n	8003b96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e04f      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d148      	bne.n	8003b96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a19      	ldr	r2, [pc, #100]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b10:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	4a16      	ldr	r2, [pc, #88]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b1c:	f7fd fad0 	bl	80010c0 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b24:	f7fd facc 	bl	80010c0 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e030      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b36:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0x734>
 8003b42:	e028      	b.n	8003b96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d023      	beq.n	8003b92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4a:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a08      	ldr	r2, [pc, #32]	; (8003b70 <HAL_RCC_OscConfig+0x780>)
 8003b50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fd fab3 	bl	80010c0 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b5c:	e00c      	b.n	8003b78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5e:	f7fd faaf 	bl	80010c0 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d905      	bls.n	8003b78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e013      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
 8003b70:	40021000 	.word	0x40021000
 8003b74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b78:	4b09      	ldr	r3, [pc, #36]	; (8003ba0 <HAL_RCC_OscConfig+0x7b0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1ec      	bne.n	8003b5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_OscConfig+0x7b0>)
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	4905      	ldr	r1, [pc, #20]	; (8003ba0 <HAL_RCC_OscConfig+0x7b0>)
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCC_OscConfig+0x7b4>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	60cb      	str	r3, [r1, #12]
 8003b90:	e001      	b.n	8003b96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	feeefffc 	.word	0xfeeefffc

08003ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0e7      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d910      	bls.n	8003bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 0207 	bic.w	r2, r3, #7
 8003bd2:	4970      	ldr	r1, [pc, #448]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bda:	4b6e      	ldr	r3, [pc, #440]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0cf      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d010      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	4b66      	ldr	r3, [pc, #408]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d908      	bls.n	8003c1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c08:	4b63      	ldr	r3, [pc, #396]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	4960      	ldr	r1, [pc, #384]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d04c      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2e:	4b5a      	ldr	r3, [pc, #360]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d121      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0a6      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c46:	4b54      	ldr	r3, [pc, #336]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d115      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e09a      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c5e:	4b4e      	ldr	r3, [pc, #312]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e08e      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c6e:	4b4a      	ldr	r3, [pc, #296]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e086      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c7e:	4b46      	ldr	r3, [pc, #280]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4943      	ldr	r1, [pc, #268]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c90:	f7fd fa16 	bl	80010c0 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7fd fa12 	bl	80010c0 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e06e      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 020c 	and.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1eb      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d010      	beq.n	8003cee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689a      	ldr	r2, [r3, #8]
 8003cd0:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d208      	bcs.n	8003cee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	492b      	ldr	r1, [pc, #172]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cee:	4b29      	ldr	r3, [pc, #164]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d210      	bcs.n	8003d1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfc:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f023 0207 	bic.w	r2, r3, #7
 8003d04:	4923      	ldr	r1, [pc, #140]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0c:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <HAL_RCC_ClockConfig+0x1ec>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d001      	beq.n	8003d1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e036      	b.n	8003d8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2a:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4918      	ldr	r1, [pc, #96]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0308 	and.w	r3, r3, #8
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d009      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d48:	4b13      	ldr	r3, [pc, #76]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4910      	ldr	r1, [pc, #64]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d5c:	f000 f824 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <HAL_RCC_ClockConfig+0x1f0>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	490b      	ldr	r1, [pc, #44]	; (8003d9c <HAL_RCC_ClockConfig+0x1f4>)
 8003d6e:	5ccb      	ldrb	r3, [r1, r3]
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
 8003d78:	4a09      	ldr	r2, [pc, #36]	; (8003da0 <HAL_RCC_ClockConfig+0x1f8>)
 8003d7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_RCC_ClockConfig+0x1fc>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd f94d 	bl	8001020 <HAL_InitTick>
 8003d86:	4603      	mov	r3, r0
 8003d88:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40022000 	.word	0x40022000
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	08006274 	.word	0x08006274
 8003da0:	20000000 	.word	0x20000000
 8003da4:	20000004 	.word	0x20000004

08003da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	2300      	movs	r3, #0
 8003db4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db6:	4b3e      	ldr	r3, [pc, #248]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc0:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_GetSysClockFreq+0x34>
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d121      	bne.n	8003e1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d11e      	bne.n	8003e1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ddc:	4b34      	ldr	r3, [pc, #208]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003de8:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	e005      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003df8:	4b2d      	ldr	r3, [pc, #180]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e04:	4a2b      	ldr	r2, [pc, #172]	; (8003eb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10d      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d102      	bne.n	8003e26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e20:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e22:	61bb      	str	r3, [r7, #24]
 8003e24:	e004      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e2c:	4b23      	ldr	r3, [pc, #140]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d134      	bne.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e36:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d003      	beq.n	8003e4e <HAL_RCC_GetSysClockFreq+0xa6>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0xac>
 8003e4c:	e005      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e4e:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e50:	617b      	str	r3, [r7, #20]
      break;
 8003e52:	e005      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e54:	4b19      	ldr	r3, [pc, #100]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8003e56:	617b      	str	r3, [r7, #20]
      break;
 8003e58:	e002      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	617b      	str	r3, [r7, #20]
      break;
 8003e5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e60:	4b13      	ldr	r3, [pc, #76]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	091b      	lsrs	r3, r3, #4
 8003e66:	f003 0307 	and.w	r3, r3, #7
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e6e:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	fb03 f202 	mul.w	r2, r3, r2
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	0e5b      	lsrs	r3, r3, #25
 8003e8c:	f003 0303 	and.w	r3, r3, #3
 8003e90:	3301      	adds	r3, #1
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ea0:	69bb      	ldr	r3, [r7, #24]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3724      	adds	r7, #36	; 0x24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	0800628c 	.word	0x0800628c
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	007a1200 	.word	0x007a1200

08003ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000000 	.word	0x20000000

08003ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003edc:	f7ff fff0 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	4904      	ldr	r1, [pc, #16]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003eee:	5ccb      	ldrb	r3, [r1, r3]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40021000 	.word	0x40021000
 8003f00:	08006284 	.word	0x08006284

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f08:	f7ff ffda 	bl	8003ec0 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b06      	ldr	r3, [pc, #24]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0adb      	lsrs	r3, r3, #11
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4904      	ldr	r1, [pc, #16]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	08006284 	.word	0x08006284

08003f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f48:	f7ff f9ee 	bl	8003328 <HAL_PWREx_GetVoltageRange>
 8003f4c:	6178      	str	r0, [r7, #20]
 8003f4e:	e014      	b.n	8003f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f50:	4b25      	ldr	r3, [pc, #148]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f5c:	4b22      	ldr	r3, [pc, #136]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f64:	60fb      	str	r3, [r7, #12]
 8003f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f68:	f7ff f9de 	bl	8003328 <HAL_PWREx_GetVoltageRange>
 8003f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f72:	4a1d      	ldr	r2, [pc, #116]	; (8003fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f80:	d10b      	bne.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b80      	cmp	r3, #128	; 0x80
 8003f86:	d919      	bls.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2ba0      	cmp	r3, #160	; 0xa0
 8003f8c:	d902      	bls.n	8003f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f8e:	2302      	movs	r3, #2
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	e013      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f94:	2301      	movs	r3, #1
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	e010      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b80      	cmp	r3, #128	; 0x80
 8003f9e:	d902      	bls.n	8003fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	e00a      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b80      	cmp	r3, #128	; 0x80
 8003faa:	d102      	bne.n	8003fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fac:	2302      	movs	r3, #2
 8003fae:	613b      	str	r3, [r7, #16]
 8003fb0:	e004      	b.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b70      	cmp	r3, #112	; 0x70
 8003fb6:	d101      	bne.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fb8:	2301      	movs	r3, #1
 8003fba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 0207 	bic.w	r2, r3, #7
 8003fc4:	4909      	ldr	r1, [pc, #36]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fcc:	4b07      	ldr	r3, [pc, #28]	; (8003fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d001      	beq.n	8003fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40022000 	.word	0x40022000

08003ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004008:	2b00      	cmp	r3, #0
 800400a:	d041      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004010:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004014:	d02a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004016:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800401a:	d824      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800401c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004020:	d008      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004022:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004026:	d81e      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800402c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004030:	d010      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004032:	e018      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004034:	4b86      	ldr	r3, [pc, #536]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a85      	ldr	r2, [pc, #532]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004040:	e015      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3304      	adds	r3, #4
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fabb 	bl	80045c4 <RCCEx_PLLSAI1_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004052:	e00c      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3320      	adds	r3, #32
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fba6 	bl	80047ac <RCCEx_PLLSAI2_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004064:	e003      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	74fb      	strb	r3, [r7, #19]
      break;
 800406a:	e000      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800406c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004074:	4b76      	ldr	r3, [pc, #472]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004082:	4973      	ldr	r1, [pc, #460]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800408a:	e001      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d041      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040a4:	d02a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80040a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040aa:	d824      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040b0:	d008      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040b6:	d81e      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040c0:	d010      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040c2:	e018      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040c4:	4b62      	ldr	r3, [pc, #392]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a61      	ldr	r2, [pc, #388]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040d0:	e015      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fa73 	bl	80045c4 <RCCEx_PLLSAI1_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040e2:	e00c      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3320      	adds	r3, #32
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fb5e 	bl	80047ac <RCCEx_PLLSAI2_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040f4:	e003      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	74fb      	strb	r3, [r7, #19]
      break;
 80040fa:	e000      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004104:	4b52      	ldr	r3, [pc, #328]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004112:	494f      	ldr	r1, [pc, #316]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800411a:	e001      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411c:	7cfb      	ldrb	r3, [r7, #19]
 800411e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 80a0 	beq.w	800426e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412e:	2300      	movs	r3, #0
 8004130:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800413e:	2301      	movs	r3, #1
 8004140:	e000      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004142:	2300      	movs	r3, #0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00d      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004148:	4b41      	ldr	r3, [pc, #260]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	4a40      	ldr	r2, [pc, #256]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004152:	6593      	str	r3, [r2, #88]	; 0x58
 8004154:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415c:	60bb      	str	r3, [r7, #8]
 800415e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004160:	2301      	movs	r3, #1
 8004162:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004164:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a3a      	ldr	r2, [pc, #232]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800416a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004170:	f7fc ffa6 	bl	80010c0 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004176:	e009      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7fc ffa2 	bl	80010c0 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d902      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	74fb      	strb	r3, [r7, #19]
        break;
 800418a:	e005      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800418c:	4b31      	ldr	r3, [pc, #196]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ef      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d15c      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800419e:	4b2c      	ldr	r3, [pc, #176]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d01f      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d019      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041bc:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ce:	4a20      	ldr	r2, [pc, #128]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d016      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fc ff61 	bl	80010c0 <HAL_GetTick>
 80041fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004200:	e00b      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f7fc ff5d 	bl	80010c0 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004210:	4293      	cmp	r3, r2
 8004212:	d902      	bls.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	74fb      	strb	r3, [r7, #19]
            break;
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0ec      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10c      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800422e:	4b08      	ldr	r3, [pc, #32]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004234:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423e:	4904      	ldr	r1, [pc, #16]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004246:	e009      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	74bb      	strb	r3, [r7, #18]
 800424c:	e006      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000
 8004254:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	7cfb      	ldrb	r3, [r7, #19]
 800425a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800425c:	7c7b      	ldrb	r3, [r7, #17]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d105      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004262:	4b9e      	ldr	r3, [pc, #632]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	4a9d      	ldr	r2, [pc, #628]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800426c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800427a:	4b98      	ldr	r3, [pc, #608]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f023 0203 	bic.w	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	4994      	ldr	r1, [pc, #592]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800429c:	4b8f      	ldr	r3, [pc, #572]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f023 020c 	bic.w	r2, r3, #12
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	498c      	ldr	r1, [pc, #560]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042be:	4b87      	ldr	r3, [pc, #540]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	4983      	ldr	r1, [pc, #524]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042e0:	4b7e      	ldr	r3, [pc, #504]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	497b      	ldr	r1, [pc, #492]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0310 	and.w	r3, r3, #16
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004302:	4b76      	ldr	r3, [pc, #472]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004310:	4972      	ldr	r1, [pc, #456]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004324:	4b6d      	ldr	r3, [pc, #436]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004332:	496a      	ldr	r1, [pc, #424]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004346:	4b65      	ldr	r3, [pc, #404]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004354:	4961      	ldr	r1, [pc, #388]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004368:	4b5c      	ldr	r3, [pc, #368]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004376:	4959      	ldr	r1, [pc, #356]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800438a:	4b54      	ldr	r3, [pc, #336]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	4950      	ldr	r1, [pc, #320]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ac:	4b4b      	ldr	r3, [pc, #300]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	4948      	ldr	r1, [pc, #288]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ce:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	493f      	ldr	r1, [pc, #252]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d028      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f0:	4b3a      	ldr	r3, [pc, #232]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fe:	4937      	ldr	r1, [pc, #220]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800440e:	d106      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004410:	4b32      	ldr	r3, [pc, #200]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a31      	ldr	r2, [pc, #196]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441a:	60d3      	str	r3, [r2, #12]
 800441c:	e011      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004422:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004426:	d10c      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3304      	adds	r3, #4
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f000 f8c8 	bl	80045c4 <RCCEx_PLLSAI1_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800443e:	7cfb      	ldrb	r3, [r7, #19]
 8004440:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d028      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800444e:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004454:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	491f      	ldr	r1, [pc, #124]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446c:	d106      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446e:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004478:	60d3      	str	r3, [r2, #12]
 800447a:	e011      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004484:	d10c      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f899 	bl	80045c4 <RCCEx_PLLSAI1_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004496:	7cfb      	ldrb	r3, [r7, #19]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02b      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ba:	4908      	ldr	r1, [pc, #32]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ca:	d109      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044cc:	4b03      	ldr	r3, [pc, #12]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	4a02      	ldr	r2, [pc, #8]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044d6:	60d3      	str	r3, [r2, #12]
 80044d8:	e014      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f867 	bl	80045c4 <RCCEx_PLLSAI1_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044fa:	7cfb      	ldrb	r3, [r7, #19]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02f      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004510:	4b2b      	ldr	r3, [pc, #172]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800451e:	4928      	ldr	r1, [pc, #160]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800452a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800452e:	d10d      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	2102      	movs	r1, #2
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f844 	bl	80045c4 <RCCEx_PLLSAI1_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d014      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004546:	7cfb      	ldrb	r3, [r7, #19]
 8004548:	74bb      	strb	r3, [r7, #18]
 800454a:	e011      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004554:	d10c      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3320      	adds	r3, #32
 800455a:	2102      	movs	r1, #2
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f925 	bl	80047ac <RCCEx_PLLSAI2_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800458a:	490d      	ldr	r1, [pc, #52]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ae:	4904      	ldr	r1, [pc, #16]	; (80045c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000

080045c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045d2:	4b75      	ldr	r3, [pc, #468]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d018      	beq.n	8004610 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045de:	4b72      	ldr	r3, [pc, #456]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0203 	and.w	r2, r3, #3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d10d      	bne.n	800460a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
       ||
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045f6:	4b6c      	ldr	r3, [pc, #432]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	091b      	lsrs	r3, r3, #4
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
       ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d047      	beq.n	800469a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	73fb      	strb	r3, [r7, #15]
 800460e:	e044      	b.n	800469a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d018      	beq.n	800464a <RCCEx_PLLSAI1_Config+0x86>
 8004618:	2b03      	cmp	r3, #3
 800461a:	d825      	bhi.n	8004668 <RCCEx_PLLSAI1_Config+0xa4>
 800461c:	2b01      	cmp	r3, #1
 800461e:	d002      	beq.n	8004626 <RCCEx_PLLSAI1_Config+0x62>
 8004620:	2b02      	cmp	r3, #2
 8004622:	d009      	beq.n	8004638 <RCCEx_PLLSAI1_Config+0x74>
 8004624:	e020      	b.n	8004668 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004626:	4b60      	ldr	r3, [pc, #384]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d11d      	bne.n	800466e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004636:	e01a      	b.n	800466e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004638:	4b5b      	ldr	r3, [pc, #364]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d116      	bne.n	8004672 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004648:	e013      	b.n	8004672 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800464a:	4b57      	ldr	r3, [pc, #348]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004656:	4b54      	ldr	r3, [pc, #336]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d109      	bne.n	8004676 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004666:	e006      	b.n	8004676 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      break;
 800466c:	e004      	b.n	8004678 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004676:	bf00      	nop
    }

    if(status == HAL_OK)
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10d      	bne.n	800469a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800467e:	4b4a      	ldr	r3, [pc, #296]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	3b01      	subs	r3, #1
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	430b      	orrs	r3, r1
 8004694:	4944      	ldr	r1, [pc, #272]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004696:	4313      	orrs	r3, r2
 8004698:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d17d      	bne.n	800479c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046a0:	4b41      	ldr	r3, [pc, #260]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a40      	ldr	r2, [pc, #256]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ac:	f7fc fd08 	bl	80010c0 <HAL_GetTick>
 80046b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046b2:	e009      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b4:	f7fc fd04 	bl	80010c0 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d902      	bls.n	80046c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	73fb      	strb	r3, [r7, #15]
        break;
 80046c6:	e005      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046c8:	4b37      	ldr	r3, [pc, #220]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ef      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d160      	bne.n	800479c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d111      	bne.n	8004704 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e0:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80046e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6892      	ldr	r2, [r2, #8]
 80046f0:	0211      	lsls	r1, r2, #8
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	68d2      	ldr	r2, [r2, #12]
 80046f6:	0912      	lsrs	r2, r2, #4
 80046f8:	0452      	lsls	r2, r2, #17
 80046fa:	430a      	orrs	r2, r1
 80046fc:	492a      	ldr	r1, [pc, #168]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	610b      	str	r3, [r1, #16]
 8004702:	e027      	b.n	8004754 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d112      	bne.n	8004730 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800470a:	4b27      	ldr	r3, [pc, #156]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004712:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6892      	ldr	r2, [r2, #8]
 800471a:	0211      	lsls	r1, r2, #8
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6912      	ldr	r2, [r2, #16]
 8004720:	0852      	lsrs	r2, r2, #1
 8004722:	3a01      	subs	r2, #1
 8004724:	0552      	lsls	r2, r2, #21
 8004726:	430a      	orrs	r2, r1
 8004728:	491f      	ldr	r1, [pc, #124]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800472a:	4313      	orrs	r3, r2
 800472c:	610b      	str	r3, [r1, #16]
 800472e:	e011      	b.n	8004754 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004730:	4b1d      	ldr	r3, [pc, #116]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004738:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	0211      	lsls	r1, r2, #8
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6952      	ldr	r2, [r2, #20]
 8004746:	0852      	lsrs	r2, r2, #1
 8004748:	3a01      	subs	r2, #1
 800474a:	0652      	lsls	r2, r2, #25
 800474c:	430a      	orrs	r2, r1
 800474e:	4916      	ldr	r1, [pc, #88]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004750:	4313      	orrs	r3, r2
 8004752:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004754:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a13      	ldr	r2, [pc, #76]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800475e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004760:	f7fc fcae 	bl	80010c0 <HAL_GetTick>
 8004764:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004766:	e009      	b.n	800477c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004768:	f7fc fcaa 	bl	80010c0 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d902      	bls.n	800477c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	73fb      	strb	r3, [r7, #15]
          break;
 800477a:	e005      	b.n	8004788 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0ef      	beq.n	8004768 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	4904      	ldr	r1, [pc, #16]	; (80047a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004798:	4313      	orrs	r3, r2
 800479a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000

080047ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047ba:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d018      	beq.n	80047f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047c6:	4b67      	ldr	r3, [pc, #412]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0203 	and.w	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d10d      	bne.n	80047f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
       ||
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d009      	beq.n	80047f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047de:	4b61      	ldr	r3, [pc, #388]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	f003 0307 	and.w	r3, r3, #7
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
       ||
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d047      	beq.n	8004882 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	73fb      	strb	r3, [r7, #15]
 80047f6:	e044      	b.n	8004882 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d018      	beq.n	8004832 <RCCEx_PLLSAI2_Config+0x86>
 8004800:	2b03      	cmp	r3, #3
 8004802:	d825      	bhi.n	8004850 <RCCEx_PLLSAI2_Config+0xa4>
 8004804:	2b01      	cmp	r3, #1
 8004806:	d002      	beq.n	800480e <RCCEx_PLLSAI2_Config+0x62>
 8004808:	2b02      	cmp	r3, #2
 800480a:	d009      	beq.n	8004820 <RCCEx_PLLSAI2_Config+0x74>
 800480c:	e020      	b.n	8004850 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800480e:	4b55      	ldr	r3, [pc, #340]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d11d      	bne.n	8004856 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800481e:	e01a      	b.n	8004856 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004820:	4b50      	ldr	r3, [pc, #320]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004828:	2b00      	cmp	r3, #0
 800482a:	d116      	bne.n	800485a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004830:	e013      	b.n	800485a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004832:	4b4c      	ldr	r3, [pc, #304]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10f      	bne.n	800485e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800483e:	4b49      	ldr	r3, [pc, #292]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d109      	bne.n	800485e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800484e:	e006      	b.n	800485e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      break;
 8004854:	e004      	b.n	8004860 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004856:	bf00      	nop
 8004858:	e002      	b.n	8004860 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800485e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004860:	7bfb      	ldrb	r3, [r7, #15]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004866:	4b3f      	ldr	r3, [pc, #252]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6819      	ldr	r1, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	3b01      	subs	r3, #1
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	430b      	orrs	r3, r1
 800487c:	4939      	ldr	r1, [pc, #228]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487e:	4313      	orrs	r3, r2
 8004880:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d167      	bne.n	8004958 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004888:	4b36      	ldr	r3, [pc, #216]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a35      	ldr	r2, [pc, #212]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 800488e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004894:	f7fc fc14 	bl	80010c0 <HAL_GetTick>
 8004898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800489a:	e009      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800489c:	f7fc fc10 	bl	80010c0 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d902      	bls.n	80048b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	73fb      	strb	r3, [r7, #15]
        break;
 80048ae:	e005      	b.n	80048bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048b0:	4b2c      	ldr	r3, [pc, #176]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ef      	bne.n	800489c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d14a      	bne.n	8004958 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d111      	bne.n	80048ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048c8:	4b26      	ldr	r3, [pc, #152]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80048d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6892      	ldr	r2, [r2, #8]
 80048d8:	0211      	lsls	r1, r2, #8
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	68d2      	ldr	r2, [r2, #12]
 80048de:	0912      	lsrs	r2, r2, #4
 80048e0:	0452      	lsls	r2, r2, #17
 80048e2:	430a      	orrs	r2, r1
 80048e4:	491f      	ldr	r1, [pc, #124]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	614b      	str	r3, [r1, #20]
 80048ea:	e011      	b.n	8004910 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048ec:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80048f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6892      	ldr	r2, [r2, #8]
 80048fc:	0211      	lsls	r1, r2, #8
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6912      	ldr	r2, [r2, #16]
 8004902:	0852      	lsrs	r2, r2, #1
 8004904:	3a01      	subs	r2, #1
 8004906:	0652      	lsls	r2, r2, #25
 8004908:	430a      	orrs	r2, r1
 800490a:	4916      	ldr	r1, [pc, #88]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 800490c:	4313      	orrs	r3, r2
 800490e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004910:	4b14      	ldr	r3, [pc, #80]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a13      	ldr	r2, [pc, #76]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fc fbd0 	bl	80010c0 <HAL_GetTick>
 8004920:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004922:	e009      	b.n	8004938 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004924:	f7fc fbcc 	bl	80010c0 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d902      	bls.n	8004938 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	73fb      	strb	r3, [r7, #15]
          break;
 8004936:	e005      	b.n	8004944 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004938:	4b0a      	ldr	r3, [pc, #40]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ef      	beq.n	8004924 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	4904      	ldr	r1, [pc, #16]	; (8004964 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004954:	4313      	orrs	r3, r2
 8004956:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40021000 	.word	0x40021000

08004968 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e040      	b.n	80049fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497e:	2b00      	cmp	r3, #0
 8004980:	d106      	bne.n	8004990 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fc f9d6 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2224      	movs	r2, #36	; 0x24
 8004994:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fe8a 	bl	80056c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 fbcf 	bl	8005158 <UART_SetConfig>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e01b      	b.n	80049fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 0201 	orr.w	r2, r2, #1
 80049f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 ff09 	bl	800580c <UART_CheckIdleState>
 80049fa:	4603      	mov	r3, r0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b08b      	sub	sp, #44	; 0x2c
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d147      	bne.n	8004aaa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_UART_Transmit_IT+0x22>
 8004a20:	88fb      	ldrh	r3, [r7, #6]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e040      	b.n	8004aac <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2221      	movs	r2, #33	; 0x21
 8004a52:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5c:	d107      	bne.n	8004a6e <HAL_UART_Transmit_IT+0x6a>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <HAL_UART_Transmit_IT+0xb4>)
 8004a6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a6c:	e002      	b.n	8004a74 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4a12      	ldr	r2, [pc, #72]	; (8004abc <HAL_UART_Transmit_IT+0xb8>)
 8004a72:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	613b      	str	r3, [r7, #16]
   return(result);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	623b      	str	r3, [r7, #32]
 8004a94:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a96:	69f9      	ldr	r1, [r7, #28]
 8004a98:	6a3a      	ldr	r2, [r7, #32]
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e6      	bne.n	8004a74 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	e000      	b.n	8004aac <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004aaa:	2302      	movs	r3, #2
  }
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	372c      	adds	r7, #44	; 0x2c
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	08005d65 	.word	0x08005d65
 8004abc:	08005cad 	.word	0x08005cad

08004ac0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	4613      	mov	r3, r2
 8004acc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ad4:	2b20      	cmp	r3, #32
 8004ad6:	d137      	bne.n	8004b48 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_UART_Receive_IT+0x24>
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e030      	b.n	8004b4a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2200      	movs	r2, #0
 8004aec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_UART_Receive_IT+0x94>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d01f      	beq.n	8004b38 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d018      	beq.n	8004b38 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	613b      	str	r3, [r7, #16]
   return(result);
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	69f9      	ldr	r1, [r7, #28]
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b38:	88fb      	ldrh	r3, [r7, #6]
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 ff74 	bl	8005a2c <UART_Start_Receive_IT>
 8004b44:	4603      	mov	r3, r0
 8004b46:	e000      	b.n	8004b4a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b48:	2302      	movs	r3, #2
  }
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3728      	adds	r7, #40	; 0x28
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40008000 	.word	0x40008000

08004b58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b0ba      	sub	sp, #232	; 0xe8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004b7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004b82:	f640 030f 	movw	r3, #2063	; 0x80f
 8004b86:	4013      	ands	r3, r2
 8004b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004b8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d115      	bne.n	8004bc0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00f      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 82ae 	beq.w	8005112 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
      }
      return;
 8004bbe:	e2a8      	b.n	8005112 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8117 	beq.w	8004df8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d106      	bne.n	8004be4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004bd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004bda:	4b85      	ldr	r3, [pc, #532]	; (8004df0 <HAL_UART_IRQHandler+0x298>)
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 810a 	beq.w	8004df8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d011      	beq.n	8004c14 <HAL_UART_IRQHandler+0xbc>
 8004bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2201      	movs	r2, #1
 8004c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c0a:	f043 0201 	orr.w	r2, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d011      	beq.n	8004c44 <HAL_UART_IRQHandler+0xec>
 8004c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00b      	beq.n	8004c44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2202      	movs	r2, #2
 8004c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c3a:	f043 0204 	orr.w	r2, r3, #4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d011      	beq.n	8004c74 <HAL_UART_IRQHandler+0x11c>
 8004c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00b      	beq.n	8004c74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2204      	movs	r2, #4
 8004c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6a:	f043 0202 	orr.w	r2, r3, #2
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d017      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c84:	f003 0320 	and.w	r3, r3, #32
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004c8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2208      	movs	r2, #8
 8004c9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca6:	f043 0208 	orr.w	r2, r3, #8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d012      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x18a>
 8004cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00c      	beq.n	8004ce2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8214 	beq.w	8005116 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00d      	beq.n	8004d16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d005      	beq.n	8004d3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d04f      	beq.n	8004dda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 ff3c 	bl	8005bb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d141      	bne.n	8004dd2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3308      	adds	r3, #8
 8004d54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3308      	adds	r3, #8
 8004d76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1d9      	bne.n	8004d4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d013      	beq.n	8004dca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da6:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <HAL_UART_IRQHandler+0x29c>)
 8004da8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fd ffee 	bl	8002d90 <HAL_DMA_Abort_IT>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d017      	beq.n	8004dea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc8:	e00f      	b.n	8004dea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f9ae 	bl	800512c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd0:	e00b      	b.n	8004dea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f9aa 	bl	800512c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd8:	e007      	b.n	8004dea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9a6 	bl	800512c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004de8:	e195      	b.n	8005116 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dea:	bf00      	nop
    return;
 8004dec:	e193      	b.n	8005116 <HAL_UART_IRQHandler+0x5be>
 8004dee:	bf00      	nop
 8004df0:	04000120 	.word	0x04000120
 8004df4:	08005c81 	.word	0x08005c81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	f040 814e 	bne.w	800509e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8147 	beq.w	800509e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 8140 	beq.w	800509e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2210      	movs	r2, #16
 8004e24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	f040 80b8 	bne.w	8004fa6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8167 	beq.w	800511a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e56:	429a      	cmp	r2, r3
 8004e58:	f080 815f 	bcs.w	800511a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f040 8086 	bne.w	8004f84 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ea6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eaa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004eae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004eba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1da      	bne.n	8004e78 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ed4:	f023 0301 	bic.w	r3, r3, #1
 8004ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ee6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004eea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004eee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ef2:	e841 2300 	strex	r3, r2, [r1]
 8004ef6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ef8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e1      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3308      	adds	r3, #8
 8004f04:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f22:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f24:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f2a:	e841 2300 	strex	r3, r2, [r1]
 8004f2e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1e3      	bne.n	8004efe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f54:	f023 0310 	bic.w	r3, r3, #16
 8004f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e4      	bne.n	8004f44 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fd fec8 	bl	8002d14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f8ce 	bl	8005140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004fa4:	e0b9      	b.n	800511a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80ab 	beq.w	800511e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 80a6 	beq.w	800511e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e4      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3308      	adds	r3, #8
 800500e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	623b      	str	r3, [r7, #32]
   return(result);
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800502c:	633a      	str	r2, [r7, #48]	; 0x30
 800502e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005030:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005034:	e841 2300 	strex	r3, r2, [r1]
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1e3      	bne.n	8005008 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2220      	movs	r2, #32
 8005044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	60fb      	str	r3, [r7, #12]
   return(result);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f023 0310 	bic.w	r3, r3, #16
 8005068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	69b9      	ldr	r1, [r7, #24]
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	617b      	str	r3, [r7, #20]
   return(result);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e4      	bne.n	8005054 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005090:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f852 	bl	8005140 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800509c:	e03f      	b.n	800511e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00e      	beq.n	80050c8 <HAL_UART_IRQHandler+0x570>
 80050aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80050ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80050be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f001 f895 	bl	80061f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80050c6:	e02d      	b.n	8005124 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80050c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00e      	beq.n	80050f2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d008      	beq.n	80050f2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01c      	beq.n	8005122 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
    }
    return;
 80050f0:	e017      	b.n	8005122 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d012      	beq.n	8005124 <HAL_UART_IRQHandler+0x5cc>
 80050fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00c      	beq.n	8005124 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fe8a 	bl	8005e24 <UART_EndTransmit_IT>
    return;
 8005110:	e008      	b.n	8005124 <HAL_UART_IRQHandler+0x5cc>
      return;
 8005112:	bf00      	nop
 8005114:	e006      	b.n	8005124 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005116:	bf00      	nop
 8005118:	e004      	b.n	8005124 <HAL_UART_IRQHandler+0x5cc>
      return;
 800511a:	bf00      	nop
 800511c:	e002      	b.n	8005124 <HAL_UART_IRQHandler+0x5cc>
      return;
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <HAL_UART_IRQHandler+0x5cc>
    return;
 8005122:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005124:	37e8      	adds	r7, #232	; 0xe8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop

0800512c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	460b      	mov	r3, r1
 800514a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b08a      	sub	sp, #40	; 0x28
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	431a      	orrs	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	4313      	orrs	r3, r2
 800517e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4ba4      	ldr	r3, [pc, #656]	; (8005418 <UART_SetConfig+0x2c0>)
 8005188:	4013      	ands	r3, r2
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005190:	430b      	orrs	r3, r1
 8005192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a99      	ldr	r2, [pc, #612]	; (800541c <UART_SetConfig+0x2c4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	4313      	orrs	r3, r2
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d4:	430a      	orrs	r2, r1
 80051d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a90      	ldr	r2, [pc, #576]	; (8005420 <UART_SetConfig+0x2c8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d126      	bne.n	8005230 <UART_SetConfig+0xd8>
 80051e2:	4b90      	ldr	r3, [pc, #576]	; (8005424 <UART_SetConfig+0x2cc>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d81b      	bhi.n	8005228 <UART_SetConfig+0xd0>
 80051f0:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <UART_SetConfig+0xa0>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	08005209 	.word	0x08005209
 80051fc:	08005219 	.word	0x08005219
 8005200:	08005211 	.word	0x08005211
 8005204:	08005221 	.word	0x08005221
 8005208:	2301      	movs	r3, #1
 800520a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520e:	e116      	b.n	800543e <UART_SetConfig+0x2e6>
 8005210:	2302      	movs	r3, #2
 8005212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005216:	e112      	b.n	800543e <UART_SetConfig+0x2e6>
 8005218:	2304      	movs	r3, #4
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521e:	e10e      	b.n	800543e <UART_SetConfig+0x2e6>
 8005220:	2308      	movs	r3, #8
 8005222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005226:	e10a      	b.n	800543e <UART_SetConfig+0x2e6>
 8005228:	2310      	movs	r3, #16
 800522a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800522e:	e106      	b.n	800543e <UART_SetConfig+0x2e6>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a7c      	ldr	r2, [pc, #496]	; (8005428 <UART_SetConfig+0x2d0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d138      	bne.n	80052ac <UART_SetConfig+0x154>
 800523a:	4b7a      	ldr	r3, [pc, #488]	; (8005424 <UART_SetConfig+0x2cc>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	f003 030c 	and.w	r3, r3, #12
 8005244:	2b0c      	cmp	r3, #12
 8005246:	d82d      	bhi.n	80052a4 <UART_SetConfig+0x14c>
 8005248:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <UART_SetConfig+0xf8>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005285 	.word	0x08005285
 8005254:	080052a5 	.word	0x080052a5
 8005258:	080052a5 	.word	0x080052a5
 800525c:	080052a5 	.word	0x080052a5
 8005260:	08005295 	.word	0x08005295
 8005264:	080052a5 	.word	0x080052a5
 8005268:	080052a5 	.word	0x080052a5
 800526c:	080052a5 	.word	0x080052a5
 8005270:	0800528d 	.word	0x0800528d
 8005274:	080052a5 	.word	0x080052a5
 8005278:	080052a5 	.word	0x080052a5
 800527c:	080052a5 	.word	0x080052a5
 8005280:	0800529d 	.word	0x0800529d
 8005284:	2300      	movs	r3, #0
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800528a:	e0d8      	b.n	800543e <UART_SetConfig+0x2e6>
 800528c:	2302      	movs	r3, #2
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005292:	e0d4      	b.n	800543e <UART_SetConfig+0x2e6>
 8005294:	2304      	movs	r3, #4
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800529a:	e0d0      	b.n	800543e <UART_SetConfig+0x2e6>
 800529c:	2308      	movs	r3, #8
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052a2:	e0cc      	b.n	800543e <UART_SetConfig+0x2e6>
 80052a4:	2310      	movs	r3, #16
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052aa:	e0c8      	b.n	800543e <UART_SetConfig+0x2e6>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a5e      	ldr	r2, [pc, #376]	; (800542c <UART_SetConfig+0x2d4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d125      	bne.n	8005302 <UART_SetConfig+0x1aa>
 80052b6:	4b5b      	ldr	r3, [pc, #364]	; (8005424 <UART_SetConfig+0x2cc>)
 80052b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052c0:	2b30      	cmp	r3, #48	; 0x30
 80052c2:	d016      	beq.n	80052f2 <UART_SetConfig+0x19a>
 80052c4:	2b30      	cmp	r3, #48	; 0x30
 80052c6:	d818      	bhi.n	80052fa <UART_SetConfig+0x1a2>
 80052c8:	2b20      	cmp	r3, #32
 80052ca:	d00a      	beq.n	80052e2 <UART_SetConfig+0x18a>
 80052cc:	2b20      	cmp	r3, #32
 80052ce:	d814      	bhi.n	80052fa <UART_SetConfig+0x1a2>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <UART_SetConfig+0x182>
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d008      	beq.n	80052ea <UART_SetConfig+0x192>
 80052d8:	e00f      	b.n	80052fa <UART_SetConfig+0x1a2>
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e0:	e0ad      	b.n	800543e <UART_SetConfig+0x2e6>
 80052e2:	2302      	movs	r3, #2
 80052e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052e8:	e0a9      	b.n	800543e <UART_SetConfig+0x2e6>
 80052ea:	2304      	movs	r3, #4
 80052ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f0:	e0a5      	b.n	800543e <UART_SetConfig+0x2e6>
 80052f2:	2308      	movs	r3, #8
 80052f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052f8:	e0a1      	b.n	800543e <UART_SetConfig+0x2e6>
 80052fa:	2310      	movs	r3, #16
 80052fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005300:	e09d      	b.n	800543e <UART_SetConfig+0x2e6>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a4a      	ldr	r2, [pc, #296]	; (8005430 <UART_SetConfig+0x2d8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d125      	bne.n	8005358 <UART_SetConfig+0x200>
 800530c:	4b45      	ldr	r3, [pc, #276]	; (8005424 <UART_SetConfig+0x2cc>)
 800530e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005312:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005316:	2bc0      	cmp	r3, #192	; 0xc0
 8005318:	d016      	beq.n	8005348 <UART_SetConfig+0x1f0>
 800531a:	2bc0      	cmp	r3, #192	; 0xc0
 800531c:	d818      	bhi.n	8005350 <UART_SetConfig+0x1f8>
 800531e:	2b80      	cmp	r3, #128	; 0x80
 8005320:	d00a      	beq.n	8005338 <UART_SetConfig+0x1e0>
 8005322:	2b80      	cmp	r3, #128	; 0x80
 8005324:	d814      	bhi.n	8005350 <UART_SetConfig+0x1f8>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <UART_SetConfig+0x1d8>
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d008      	beq.n	8005340 <UART_SetConfig+0x1e8>
 800532e:	e00f      	b.n	8005350 <UART_SetConfig+0x1f8>
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005336:	e082      	b.n	800543e <UART_SetConfig+0x2e6>
 8005338:	2302      	movs	r3, #2
 800533a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533e:	e07e      	b.n	800543e <UART_SetConfig+0x2e6>
 8005340:	2304      	movs	r3, #4
 8005342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005346:	e07a      	b.n	800543e <UART_SetConfig+0x2e6>
 8005348:	2308      	movs	r3, #8
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534e:	e076      	b.n	800543e <UART_SetConfig+0x2e6>
 8005350:	2310      	movs	r3, #16
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005356:	e072      	b.n	800543e <UART_SetConfig+0x2e6>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a35      	ldr	r2, [pc, #212]	; (8005434 <UART_SetConfig+0x2dc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d12a      	bne.n	80053b8 <UART_SetConfig+0x260>
 8005362:	4b30      	ldr	r3, [pc, #192]	; (8005424 <UART_SetConfig+0x2cc>)
 8005364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005370:	d01a      	beq.n	80053a8 <UART_SetConfig+0x250>
 8005372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005376:	d81b      	bhi.n	80053b0 <UART_SetConfig+0x258>
 8005378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800537c:	d00c      	beq.n	8005398 <UART_SetConfig+0x240>
 800537e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005382:	d815      	bhi.n	80053b0 <UART_SetConfig+0x258>
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <UART_SetConfig+0x238>
 8005388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538c:	d008      	beq.n	80053a0 <UART_SetConfig+0x248>
 800538e:	e00f      	b.n	80053b0 <UART_SetConfig+0x258>
 8005390:	2300      	movs	r3, #0
 8005392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005396:	e052      	b.n	800543e <UART_SetConfig+0x2e6>
 8005398:	2302      	movs	r3, #2
 800539a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800539e:	e04e      	b.n	800543e <UART_SetConfig+0x2e6>
 80053a0:	2304      	movs	r3, #4
 80053a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053a6:	e04a      	b.n	800543e <UART_SetConfig+0x2e6>
 80053a8:	2308      	movs	r3, #8
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ae:	e046      	b.n	800543e <UART_SetConfig+0x2e6>
 80053b0:	2310      	movs	r3, #16
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053b6:	e042      	b.n	800543e <UART_SetConfig+0x2e6>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a17      	ldr	r2, [pc, #92]	; (800541c <UART_SetConfig+0x2c4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d13a      	bne.n	8005438 <UART_SetConfig+0x2e0>
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <UART_SetConfig+0x2cc>)
 80053c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053d0:	d01a      	beq.n	8005408 <UART_SetConfig+0x2b0>
 80053d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053d6:	d81b      	bhi.n	8005410 <UART_SetConfig+0x2b8>
 80053d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053dc:	d00c      	beq.n	80053f8 <UART_SetConfig+0x2a0>
 80053de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e2:	d815      	bhi.n	8005410 <UART_SetConfig+0x2b8>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <UART_SetConfig+0x298>
 80053e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ec:	d008      	beq.n	8005400 <UART_SetConfig+0x2a8>
 80053ee:	e00f      	b.n	8005410 <UART_SetConfig+0x2b8>
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053f6:	e022      	b.n	800543e <UART_SetConfig+0x2e6>
 80053f8:	2302      	movs	r3, #2
 80053fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053fe:	e01e      	b.n	800543e <UART_SetConfig+0x2e6>
 8005400:	2304      	movs	r3, #4
 8005402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005406:	e01a      	b.n	800543e <UART_SetConfig+0x2e6>
 8005408:	2308      	movs	r3, #8
 800540a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800540e:	e016      	b.n	800543e <UART_SetConfig+0x2e6>
 8005410:	2310      	movs	r3, #16
 8005412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005416:	e012      	b.n	800543e <UART_SetConfig+0x2e6>
 8005418:	efff69f3 	.word	0xefff69f3
 800541c:	40008000 	.word	0x40008000
 8005420:	40013800 	.word	0x40013800
 8005424:	40021000 	.word	0x40021000
 8005428:	40004400 	.word	0x40004400
 800542c:	40004800 	.word	0x40004800
 8005430:	40004c00 	.word	0x40004c00
 8005434:	40005000 	.word	0x40005000
 8005438:	2310      	movs	r3, #16
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a9f      	ldr	r2, [pc, #636]	; (80056c0 <UART_SetConfig+0x568>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d17a      	bne.n	800553e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005448:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800544c:	2b08      	cmp	r3, #8
 800544e:	d824      	bhi.n	800549a <UART_SetConfig+0x342>
 8005450:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <UART_SetConfig+0x300>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	0800547d 	.word	0x0800547d
 800545c:	0800549b 	.word	0x0800549b
 8005460:	08005485 	.word	0x08005485
 8005464:	0800549b 	.word	0x0800549b
 8005468:	0800548b 	.word	0x0800548b
 800546c:	0800549b 	.word	0x0800549b
 8005470:	0800549b 	.word	0x0800549b
 8005474:	0800549b 	.word	0x0800549b
 8005478:	08005493 	.word	0x08005493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800547c:	f7fe fd2c 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8005480:	61f8      	str	r0, [r7, #28]
        break;
 8005482:	e010      	b.n	80054a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005484:	4b8f      	ldr	r3, [pc, #572]	; (80056c4 <UART_SetConfig+0x56c>)
 8005486:	61fb      	str	r3, [r7, #28]
        break;
 8005488:	e00d      	b.n	80054a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800548a:	f7fe fc8d 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 800548e:	61f8      	str	r0, [r7, #28]
        break;
 8005490:	e009      	b.n	80054a6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005496:	61fb      	str	r3, [r7, #28]
        break;
 8005498:	e005      	b.n	80054a6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80fb 	beq.w	80056a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d305      	bcc.n	80054ca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d903      	bls.n	80054d2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80054d0:	e0e8      	b.n	80056a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	2200      	movs	r2, #0
 80054d6:	461c      	mov	r4, r3
 80054d8:	4615      	mov	r5, r2
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	022b      	lsls	r3, r5, #8
 80054e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054e8:	0222      	lsls	r2, r4, #8
 80054ea:	68f9      	ldr	r1, [r7, #12]
 80054ec:	6849      	ldr	r1, [r1, #4]
 80054ee:	0849      	lsrs	r1, r1, #1
 80054f0:	2000      	movs	r0, #0
 80054f2:	4688      	mov	r8, r1
 80054f4:	4681      	mov	r9, r0
 80054f6:	eb12 0a08 	adds.w	sl, r2, r8
 80054fa:	eb43 0b09 	adc.w	fp, r3, r9
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	e9d7 2300 	ldrd	r2, r3, [r7]
 800550c:	4650      	mov	r0, sl
 800550e:	4659      	mov	r1, fp
 8005510:	f7fa fe5a 	bl	80001c8 <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4613      	mov	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005522:	d308      	bcc.n	8005536 <UART_SetConfig+0x3de>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800552a:	d204      	bcs.n	8005536 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	60da      	str	r2, [r3, #12]
 8005534:	e0b6      	b.n	80056a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800553c:	e0b2      	b.n	80056a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005546:	d15e      	bne.n	8005606 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005548:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800554c:	2b08      	cmp	r3, #8
 800554e:	d828      	bhi.n	80055a2 <UART_SetConfig+0x44a>
 8005550:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <UART_SetConfig+0x400>)
 8005552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005556:	bf00      	nop
 8005558:	0800557d 	.word	0x0800557d
 800555c:	08005585 	.word	0x08005585
 8005560:	0800558d 	.word	0x0800558d
 8005564:	080055a3 	.word	0x080055a3
 8005568:	08005593 	.word	0x08005593
 800556c:	080055a3 	.word	0x080055a3
 8005570:	080055a3 	.word	0x080055a3
 8005574:	080055a3 	.word	0x080055a3
 8005578:	0800559b 	.word	0x0800559b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800557c:	f7fe fcac 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 8005580:	61f8      	str	r0, [r7, #28]
        break;
 8005582:	e014      	b.n	80055ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005584:	f7fe fcbe 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8005588:	61f8      	str	r0, [r7, #28]
        break;
 800558a:	e010      	b.n	80055ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800558c:	4b4d      	ldr	r3, [pc, #308]	; (80056c4 <UART_SetConfig+0x56c>)
 800558e:	61fb      	str	r3, [r7, #28]
        break;
 8005590:	e00d      	b.n	80055ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005592:	f7fe fc09 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8005596:	61f8      	str	r0, [r7, #28]
        break;
 8005598:	e009      	b.n	80055ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800559e:	61fb      	str	r3, [r7, #28]
        break;
 80055a0:	e005      	b.n	80055ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d077      	beq.n	80056a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	005a      	lsls	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	085b      	lsrs	r3, r3, #1
 80055be:	441a      	add	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b0f      	cmp	r3, #15
 80055ce:	d916      	bls.n	80055fe <UART_SetConfig+0x4a6>
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d6:	d212      	bcs.n	80055fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f023 030f 	bic.w	r3, r3, #15
 80055e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	8afb      	ldrh	r3, [r7, #22]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	8afa      	ldrh	r2, [r7, #22]
 80055fa:	60da      	str	r2, [r3, #12]
 80055fc:	e052      	b.n	80056a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005604:	e04e      	b.n	80056a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005606:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800560a:	2b08      	cmp	r3, #8
 800560c:	d827      	bhi.n	800565e <UART_SetConfig+0x506>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <UART_SetConfig+0x4bc>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005639 	.word	0x08005639
 8005618:	08005641 	.word	0x08005641
 800561c:	08005649 	.word	0x08005649
 8005620:	0800565f 	.word	0x0800565f
 8005624:	0800564f 	.word	0x0800564f
 8005628:	0800565f 	.word	0x0800565f
 800562c:	0800565f 	.word	0x0800565f
 8005630:	0800565f 	.word	0x0800565f
 8005634:	08005657 	.word	0x08005657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005638:	f7fe fc4e 	bl	8003ed8 <HAL_RCC_GetPCLK1Freq>
 800563c:	61f8      	str	r0, [r7, #28]
        break;
 800563e:	e014      	b.n	800566a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005640:	f7fe fc60 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8005644:	61f8      	str	r0, [r7, #28]
        break;
 8005646:	e010      	b.n	800566a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005648:	4b1e      	ldr	r3, [pc, #120]	; (80056c4 <UART_SetConfig+0x56c>)
 800564a:	61fb      	str	r3, [r7, #28]
        break;
 800564c:	e00d      	b.n	800566a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800564e:	f7fe fbab 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8005652:	61f8      	str	r0, [r7, #28]
        break;
 8005654:	e009      	b.n	800566a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800565a:	61fb      	str	r3, [r7, #28]
        break;
 800565c:	e005      	b.n	800566a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005668:	bf00      	nop
    }

    if (pclk != 0U)
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d019      	beq.n	80056a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	085a      	lsrs	r2, r3, #1
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	441a      	add	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005682:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	2b0f      	cmp	r3, #15
 8005688:	d909      	bls.n	800569e <UART_SetConfig+0x546>
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005690:	d205      	bcs.n	800569e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	e002      	b.n	80056a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80056b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056be:	bf00      	nop
 80056c0:	40008000 	.word	0x40008000
 80056c4:	00f42400 	.word	0x00f42400

080056c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	430a      	orrs	r2, r1
 8005712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01a      	beq.n	80057de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c6:	d10a      	bne.n	80057de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	605a      	str	r2, [r3, #4]
  }
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b098      	sub	sp, #96	; 0x60
 8005810:	af02      	add	r7, sp, #8
 8005812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800581c:	f7fb fc50 	bl	80010c0 <HAL_GetTick>
 8005820:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b08      	cmp	r3, #8
 800582e:	d12e      	bne.n	800588e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005838:	2200      	movs	r2, #0
 800583a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f88c 	bl	800595c <UART_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d021      	beq.n	800588e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800585e:	653b      	str	r3, [r7, #80]	; 0x50
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005868:	647b      	str	r3, [r7, #68]	; 0x44
 800586a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800586e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e062      	b.n	8005954 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0304 	and.w	r3, r3, #4
 8005898:	2b04      	cmp	r3, #4
 800589a:	d149      	bne.n	8005930 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800589c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a4:	2200      	movs	r2, #0
 80058a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f856 	bl	800595c <UART_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d03c      	beq.n	8005930 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	623b      	str	r3, [r7, #32]
   return(result);
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d4:	633b      	str	r3, [r7, #48]	; 0x30
 80058d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e6      	bne.n	80058b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0301 	bic.w	r3, r3, #1
 80058fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3308      	adds	r3, #8
 8005906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005908:	61fa      	str	r2, [r7, #28]
 800590a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	69b9      	ldr	r1, [r7, #24]
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	617b      	str	r3, [r7, #20]
   return(result);
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e5      	bne.n	80058e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e011      	b.n	8005954 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2220      	movs	r2, #32
 8005934:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3758      	adds	r7, #88	; 0x58
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596c:	e049      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d045      	beq.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005976:	f7fb fba3 	bl	80010c0 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	429a      	cmp	r2, r3
 8005984:	d302      	bcc.n	800598c <UART_WaitOnFlagUntilTimeout+0x30>
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e048      	b.n	8005a22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d031      	beq.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d110      	bne.n	80059ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2208      	movs	r2, #8
 80059b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f8ff 	bl	8005bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2208      	movs	r2, #8
 80059be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e029      	b.n	8005a22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059dc:	d111      	bne.n	8005a02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f8e5 	bl	8005bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e00f      	b.n	8005a22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	68ba      	ldr	r2, [r7, #8]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	bf0c      	ite	eq
 8005a12:	2301      	moveq	r3, #1
 8005a14:	2300      	movne	r3, #0
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d0a6      	beq.n	800596e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b097      	sub	sp, #92	; 0x5c
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	d10e      	bne.n	8005a7e <UART_Start_Receive_IT+0x52>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d105      	bne.n	8005a74 <UART_Start_Receive_IT+0x48>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a72:	e02d      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	22ff      	movs	r2, #255	; 0xff
 8005a78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a7c:	e028      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10d      	bne.n	8005aa2 <UART_Start_Receive_IT+0x76>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <UART_Start_Receive_IT+0x6c>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	22ff      	movs	r2, #255	; 0xff
 8005a92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a96:	e01b      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	227f      	movs	r2, #127	; 0x7f
 8005a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa0:	e016      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aaa:	d10d      	bne.n	8005ac8 <UART_Start_Receive_IT+0x9c>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <UART_Start_Receive_IT+0x92>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	227f      	movs	r2, #127	; 0x7f
 8005ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005abc:	e008      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	223f      	movs	r2, #63	; 0x3f
 8005ac2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ac6:	e003      	b.n	8005ad0 <UART_Start_Receive_IT+0xa4>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2222      	movs	r2, #34	; 0x22
 8005adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3308      	adds	r3, #8
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af2:	f043 0301 	orr.w	r3, r3, #1
 8005af6:	657b      	str	r3, [r7, #84]	; 0x54
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b00:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b08:	e841 2300 	strex	r3, r2, [r1]
 8005b0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1e5      	bne.n	8005ae0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1c:	d107      	bne.n	8005b2e <UART_Start_Receive_IT+0x102>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d103      	bne.n	8005b2e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <UART_Start_Receive_IT+0x184>)
 8005b2a:	669a      	str	r2, [r3, #104]	; 0x68
 8005b2c:	e002      	b.n	8005b34 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4a20      	ldr	r2, [pc, #128]	; (8005bb4 <UART_Start_Receive_IT+0x188>)
 8005b32:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d019      	beq.n	8005b70 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	461a      	mov	r2, r3
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b62:	e841 2300 	strex	r3, r2, [r1]
 8005b66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1e6      	bne.n	8005b3c <UART_Start_Receive_IT+0x110>
 8005b6e:	e018      	b.n	8005ba2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	e853 3f00 	ldrex	r3, [r3]
 8005b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f043 0320 	orr.w	r3, r3, #32
 8005b84:	653b      	str	r3, [r7, #80]	; 0x50
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b8e:	623b      	str	r3, [r7, #32]
 8005b90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b92:	69f9      	ldr	r1, [r7, #28]
 8005b94:	6a3a      	ldr	r2, [r7, #32]
 8005b96:	e841 2300 	strex	r3, r2, [r1]
 8005b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e6      	bne.n	8005b70 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	375c      	adds	r7, #92	; 0x5c
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	08006035 	.word	0x08006035
 8005bb4:	08005e79 	.word	0x08005e79

08005bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b095      	sub	sp, #84	; 0x54
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bde:	643b      	str	r3, [r7, #64]	; 0x40
 8005be0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005be4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e6      	bne.n	8005bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e5      	bne.n	8005bf2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d118      	bne.n	8005c60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f023 0310 	bic.w	r3, r3, #16
 8005c42:	647b      	str	r3, [r7, #68]	; 0x44
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6979      	ldr	r1, [r7, #20]
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	613b      	str	r3, [r7, #16]
   return(result);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e6      	bne.n	8005c2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c74:	bf00      	nop
 8005c76:	3754      	adds	r7, #84	; 0x54
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff fa44 	bl	800512c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca4:	bf00      	nop
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b08f      	sub	sp, #60	; 0x3c
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cb8:	2b21      	cmp	r3, #33	; 0x21
 8005cba:	d14d      	bne.n	8005d58 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d132      	bne.n	8005d2e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ce8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e6      	bne.n	8005cc8 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6979      	ldr	r1, [r7, #20]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	613b      	str	r3, [r7, #16]
   return(result);
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e6      	bne.n	8005cfa <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005d2c:	e014      	b.n	8005d58 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d32:	781a      	ldrb	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	b292      	uxth	r2, r2
 8005d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005d58:	bf00      	nop
 8005d5a:	373c      	adds	r7, #60	; 0x3c
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b091      	sub	sp, #68	; 0x44
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d70:	2b21      	cmp	r3, #33	; 0x21
 8005d72:	d151      	bne.n	8005e18 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d132      	bne.n	8005de6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d94:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005da0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e6      	bne.n	8005d80 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	69b9      	ldr	r1, [r7, #24]
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e6      	bne.n	8005db2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005de4:	e018      	b.n	8005e18 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dee:	881a      	ldrh	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005df8:	b292      	uxth	r2, r2
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e00:	1c9a      	adds	r2, r3, #2
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005e18:	bf00      	nop
 8005e1a:	3744      	adds	r7, #68	; 0x44
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b088      	sub	sp, #32
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6979      	ldr	r1, [r7, #20]
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	613b      	str	r3, [r7, #16]
   return(result);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e6      	bne.n	8005e2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fa fb42 	bl	80004f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e70:	bf00      	nop
 8005e72:	3720      	adds	r7, #32
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b09c      	sub	sp, #112	; 0x70
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e90:	2b22      	cmp	r3, #34	; 0x22
 8005e92:	f040 80be 	bne.w	8006012 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005ea0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ea4:	b2d9      	uxtb	r1, r3
 8005ea6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb0:	400a      	ands	r2, r1
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	f040 80a3 	bne.w	8006026 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee8:	e853 3f00 	ldrex	r3, [r3]
 8005eec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005efe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f06:	e841 2300 	strex	r3, r2, [r1]
 8005f0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1e6      	bne.n	8005ee0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3308      	adds	r3, #8
 8005f18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	667b      	str	r3, [r7, #100]	; 0x64
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005f32:	647a      	str	r2, [r7, #68]	; 0x44
 8005f34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f3a:	e841 2300 	strex	r3, r2, [r1]
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1e5      	bne.n	8005f12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a34      	ldr	r2, [pc, #208]	; (8006030 <UART_RxISR_8BIT+0x1b8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d01f      	beq.n	8005fa4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d018      	beq.n	8005fa4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	e853 3f00 	ldrex	r3, [r3]
 8005f7e:	623b      	str	r3, [r7, #32]
   return(result);
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f86:	663b      	str	r3, [r7, #96]	; 0x60
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f90:	633b      	str	r3, [r7, #48]	; 0x30
 8005f92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e6      	bne.n	8005f72 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d12e      	bne.n	800600a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0310 	bic.w	r3, r3, #16
 8005fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fd0:	61fb      	str	r3, [r7, #28]
 8005fd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	69b9      	ldr	r1, [r7, #24]
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	617b      	str	r3, [r7, #20]
   return(result);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	2b10      	cmp	r3, #16
 8005ff0:	d103      	bne.n	8005ffa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2210      	movs	r2, #16
 8005ff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff f89c 	bl	8005140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006008:	e00d      	b.n	8006026 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fa fa5a 	bl	80004c4 <HAL_UART_RxCpltCallback>
}
 8006010:	e009      	b.n	8006026 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	8b1b      	ldrh	r3, [r3, #24]
 8006018:	b29a      	uxth	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0208 	orr.w	r2, r2, #8
 8006022:	b292      	uxth	r2, r2
 8006024:	831a      	strh	r2, [r3, #24]
}
 8006026:	bf00      	nop
 8006028:	3770      	adds	r7, #112	; 0x70
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40008000 	.word	0x40008000

08006034 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b09c      	sub	sp, #112	; 0x70
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006042:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800604c:	2b22      	cmp	r3, #34	; 0x22
 800604e:	f040 80be 	bne.w	80061ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006058:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006062:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006066:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800606a:	4013      	ands	r3, r2
 800606c:	b29a      	uxth	r2, r3
 800606e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006070:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006076:	1c9a      	adds	r2, r3, #2
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	f040 80a3 	bne.w	80061e2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80060aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060b0:	667b      	str	r3, [r7, #100]	; 0x64
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ba:	657b      	str	r3, [r7, #84]	; 0x54
 80060bc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80060c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e6      	bne.n	800609c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	f023 0301 	bic.w	r3, r3, #1
 80060e4:	663b      	str	r3, [r7, #96]	; 0x60
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3308      	adds	r3, #8
 80060ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ee:	643a      	str	r2, [r7, #64]	; 0x40
 80060f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e5      	bne.n	80060ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2220      	movs	r2, #32
 8006106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a34      	ldr	r2, [pc, #208]	; (80061ec <UART_RxISR_16BIT+0x1b8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d01f      	beq.n	8006160 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d018      	beq.n	8006160 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	61fb      	str	r3, [r7, #28]
   return(result);
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800614e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e6      	bne.n	800612e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006164:	2b01      	cmp	r3, #1
 8006166:	d12e      	bne.n	80061c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	e853 3f00 	ldrex	r3, [r3]
 800617a:	60bb      	str	r3, [r7, #8]
   return(result);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f023 0310 	bic.w	r3, r3, #16
 8006182:	65bb      	str	r3, [r7, #88]	; 0x58
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800618c:	61bb      	str	r3, [r7, #24]
 800618e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6979      	ldr	r1, [r7, #20]
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	e841 2300 	strex	r3, r2, [r1]
 8006198:	613b      	str	r3, [r7, #16]
   return(result);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1e6      	bne.n	800616e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f003 0310 	and.w	r3, r3, #16
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d103      	bne.n	80061b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2210      	movs	r2, #16
 80061b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fe ffbe 	bl	8005140 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061c4:	e00d      	b.n	80061e2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fa f97c 	bl	80004c4 <HAL_UART_RxCpltCallback>
}
 80061cc:	e009      	b.n	80061e2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	8b1b      	ldrh	r3, [r3, #24]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0208 	orr.w	r2, r2, #8
 80061de:	b292      	uxth	r2, r2
 80061e0:	831a      	strh	r2, [r3, #24]
}
 80061e2:	bf00      	nop
 80061e4:	3770      	adds	r7, #112	; 0x70
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40008000 	.word	0x40008000

080061f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <memset>:
 8006204:	4402      	add	r2, r0
 8006206:	4603      	mov	r3, r0
 8006208:	4293      	cmp	r3, r2
 800620a:	d100      	bne.n	800620e <memset+0xa>
 800620c:	4770      	bx	lr
 800620e:	f803 1b01 	strb.w	r1, [r3], #1
 8006212:	e7f9      	b.n	8006208 <memset+0x4>

08006214 <__libc_init_array>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4d0d      	ldr	r5, [pc, #52]	; (800624c <__libc_init_array+0x38>)
 8006218:	4c0d      	ldr	r4, [pc, #52]	; (8006250 <__libc_init_array+0x3c>)
 800621a:	1b64      	subs	r4, r4, r5
 800621c:	10a4      	asrs	r4, r4, #2
 800621e:	2600      	movs	r6, #0
 8006220:	42a6      	cmp	r6, r4
 8006222:	d109      	bne.n	8006238 <__libc_init_array+0x24>
 8006224:	4d0b      	ldr	r5, [pc, #44]	; (8006254 <__libc_init_array+0x40>)
 8006226:	4c0c      	ldr	r4, [pc, #48]	; (8006258 <__libc_init_array+0x44>)
 8006228:	f000 f818 	bl	800625c <_init>
 800622c:	1b64      	subs	r4, r4, r5
 800622e:	10a4      	asrs	r4, r4, #2
 8006230:	2600      	movs	r6, #0
 8006232:	42a6      	cmp	r6, r4
 8006234:	d105      	bne.n	8006242 <__libc_init_array+0x2e>
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	f855 3b04 	ldr.w	r3, [r5], #4
 800623c:	4798      	blx	r3
 800623e:	3601      	adds	r6, #1
 8006240:	e7ee      	b.n	8006220 <__libc_init_array+0xc>
 8006242:	f855 3b04 	ldr.w	r3, [r5], #4
 8006246:	4798      	blx	r3
 8006248:	3601      	adds	r6, #1
 800624a:	e7f2      	b.n	8006232 <__libc_init_array+0x1e>
 800624c:	080062c4 	.word	0x080062c4
 8006250:	080062c4 	.word	0x080062c4
 8006254:	080062c4 	.word	0x080062c4
 8006258:	080062c8 	.word	0x080062c8

0800625c <_init>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	bf00      	nop
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr

08006268 <_fini>:
 8006268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626a:	bf00      	nop
 800626c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800626e:	bc08      	pop	{r3}
 8006270:	469e      	mov	lr, r3
 8006272:	4770      	bx	lr
