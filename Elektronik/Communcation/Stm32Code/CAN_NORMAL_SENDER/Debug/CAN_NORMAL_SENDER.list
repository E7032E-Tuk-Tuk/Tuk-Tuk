
CAN_NORMAL_SENDER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b8  080027b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027b8  080027b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b8  080027b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080027cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080027cc  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c74  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001584  00000000  00000000  00026cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00028278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000052d  00000000  00000000  00028980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002476d  00000000  00000000  00028ead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000709b  00000000  00000000  0004d61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0a0e  00000000  00000000  000546b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b18  00000000  00000000  001350c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00136bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002760 	.word	0x08002760

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002760 	.word	0x08002760

080001c8 <HAL_GPIO_EXTI_Callback>:
uint32_t TxMailbox;

int datacheck = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin)
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d8:	d10b      	bne.n	80001f2 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		TxData[0] = 100;   // ms Delay
 80001da:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_GPIO_EXTI_Callback+0x34>)
 80001dc:	2264      	movs	r2, #100	; 0x64
 80001de:	701a      	strb	r2, [r3, #0]
		TxData[1] = 40;    // loop rep
 80001e0:	4b06      	ldr	r3, [pc, #24]	; (80001fc <HAL_GPIO_EXTI_Callback+0x34>)
 80001e2:	2228      	movs	r2, #40	; 0x28
 80001e4:	705a      	strb	r2, [r3, #1]

		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <HAL_GPIO_EXTI_Callback+0x38>)
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <HAL_GPIO_EXTI_Callback+0x34>)
 80001ea:	4906      	ldr	r1, [pc, #24]	; (8000204 <HAL_GPIO_EXTI_Callback+0x3c>)
 80001ec:	4806      	ldr	r0, [pc, #24]	; (8000208 <HAL_GPIO_EXTI_Callback+0x40>)
 80001ee:	f000 fd12 	bl	8000c16 <HAL_CAN_AddTxMessage>
	}
}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000084 	.word	0x20000084
 8000200:	20000094 	.word	0x20000094
 8000204:	20000050 	.word	0x20000050
 8000208:	20000028 	.word	0x20000028

0800020c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000214:	4b08      	ldr	r3, [pc, #32]	; (8000238 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000216:	4a09      	ldr	r2, [pc, #36]	; (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000218:	2100      	movs	r1, #0
 800021a:	6878      	ldr	r0, [r7, #4]
 800021c:	f000 fdcb 	bl	8000db6 <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2)
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	2b02      	cmp	r3, #2
 8000226:	d102      	bne.n	800022e <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	{
		datacheck = 1;
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800022a:	2201      	movs	r2, #1
 800022c:	601a      	str	r2, [r3, #0]
	}
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	2000008c 	.word	0x2000008c
 800023c:	20000068 	.word	0x20000068
 8000240:	20000098 	.word	0x20000098

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fa3b 	bl	80006c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f84f 	bl	80002f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f8f3 	bl	800043c <MX_GPIO_Init>
  MX_CAN1_Init();
 8000256:	f000 f89d 	bl	8000394 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 800025a:	481f      	ldr	r0, [pc, #124]	; (80002d8 <main+0x94>)
 800025c:	f000 fc97 	bl	8000b8e <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000260:	2102      	movs	r1, #2
 8000262:	481d      	ldr	r0, [pc, #116]	; (80002d8 <main+0x94>)
 8000264:	f000 fec9 	bl	8000ffa <HAL_CAN_ActivateNotification>


  TxHeader.DLC = 2;  // data length
 8000268:	4b1c      	ldr	r3, [pc, #112]	; (80002dc <main+0x98>)
 800026a:	2202      	movs	r2, #2
 800026c:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800026e:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <main+0x98>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <main+0x98>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x446;  // ID
 800027a:	4b18      	ldr	r3, [pc, #96]	; (80002dc <main+0x98>)
 800027c:	f240 4246 	movw	r2, #1094	; 0x446
 8000280:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (datacheck)
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <main+0x9c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d0fb      	beq.n	8000282 <main+0x3e>
	  {
		  // blink the LED
		  for (int i=0; i<RxData[1]; i++)
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	e00c      	b.n	80002aa <main+0x66>
		  {
			  HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000290:	2120      	movs	r1, #32
 8000292:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000296:	f001 fbd9 	bl	8001a4c <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 800029a:	4b12      	ldr	r3, [pc, #72]	; (80002e4 <main+0xa0>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fa8c 	bl	80007bc <HAL_Delay>
		  for (int i=0; i<RxData[1]; i++)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	3301      	adds	r3, #1
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <main+0xa0>)
 80002ac:	785b      	ldrb	r3, [r3, #1]
 80002ae:	461a      	mov	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4293      	cmp	r3, r2
 80002b4:	dbec      	blt.n	8000290 <main+0x4c>
		  }

		  datacheck = 0;
 80002b6:	4b0a      	ldr	r3, [pc, #40]	; (80002e0 <main+0x9c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]

			TxData[0] = 100;   // ms Delay
 80002bc:	4b0a      	ldr	r3, [pc, #40]	; (80002e8 <main+0xa4>)
 80002be:	2264      	movs	r2, #100	; 0x64
 80002c0:	701a      	strb	r2, [r3, #0]
			TxData[1] = 40;    // loop rep
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <main+0xa4>)
 80002c4:	2228      	movs	r2, #40	; 0x28
 80002c6:	705a      	strb	r2, [r3, #1]

			HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80002c8:	4b08      	ldr	r3, [pc, #32]	; (80002ec <main+0xa8>)
 80002ca:	4a07      	ldr	r2, [pc, #28]	; (80002e8 <main+0xa4>)
 80002cc:	4903      	ldr	r1, [pc, #12]	; (80002dc <main+0x98>)
 80002ce:	4802      	ldr	r0, [pc, #8]	; (80002d8 <main+0x94>)
 80002d0:	f000 fca1 	bl	8000c16 <HAL_CAN_AddTxMessage>
	  if (datacheck)
 80002d4:	e7d5      	b.n	8000282 <main+0x3e>
 80002d6:	bf00      	nop
 80002d8:	20000028 	.word	0x20000028
 80002dc:	20000050 	.word	0x20000050
 80002e0:	20000098 	.word	0x20000098
 80002e4:	2000008c 	.word	0x2000008c
 80002e8:	20000084 	.word	0x20000084
 80002ec:	20000094 	.word	0x20000094

080002f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b096      	sub	sp, #88	; 0x58
 80002f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	2244      	movs	r2, #68	; 0x44
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f002 fa02 	bl	8002708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000304:	463b      	mov	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
 800030a:	605a      	str	r2, [r3, #4]
 800030c:	609a      	str	r2, [r3, #8]
 800030e:	60da      	str	r2, [r3, #12]
 8000310:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000312:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000316:	f001 fbd9 	bl	8001acc <HAL_PWREx_ControlVoltageScaling>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000320:	f000 f8e2 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	2302      	movs	r3, #2
 8000326:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032e:	2310      	movs	r3, #16
 8000330:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000332:	2302      	movs	r3, #2
 8000334:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000336:	2302      	movs	r3, #2
 8000338:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800033a:	2301      	movs	r3, #1
 800033c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800033e:	230a      	movs	r3, #10
 8000340:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000342:	2307      	movs	r3, #7
 8000344:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000346:	2302      	movs	r3, #2
 8000348:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800034a:	2302      	movs	r3, #2
 800034c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800034e:	f107 0314 	add.w	r3, r7, #20
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fc10 	bl	8001b78 <HAL_RCC_OscConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800035e:	f000 f8c3 	bl	80004e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
 8000364:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000366:	2303      	movs	r3, #3
 8000368:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800036a:	2300      	movs	r3, #0
 800036c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000376:	463b      	mov	r3, r7
 8000378:	2104      	movs	r1, #4
 800037a:	4618      	mov	r0, r3
 800037c:	f001 ffd8 	bl	8002330 <HAL_RCC_ClockConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000386:	f000 f8af 	bl	80004e8 <Error_Handler>
  }
}
 800038a:	bf00      	nop
 800038c:	3758      	adds	r7, #88	; 0x58
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b08a      	sub	sp, #40	; 0x28
 8000398:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800039a:	4b26      	ldr	r3, [pc, #152]	; (8000434 <MX_CAN1_Init+0xa0>)
 800039c:	4a26      	ldr	r2, [pc, #152]	; (8000438 <MX_CAN1_Init+0xa4>)
 800039e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80003a0:	4b24      	ldr	r3, [pc, #144]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003a2:	2210      	movs	r2, #16
 80003a4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80003a6:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 80003b2:	4b20      	ldr	r3, [pc, #128]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003b4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80003b8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80003ba:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003c0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80003c2:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80003c8:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80003e6:	4813      	ldr	r0, [pc, #76]	; (8000434 <MX_CAN1_Init+0xa0>)
 80003e8:	f000 fa0c 	bl	8000804 <HAL_CAN_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80003f2:	f000 f879 	bl	80004e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80003f6:	2301      	movs	r3, #1
 80003f8:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80003fa:	230a      	movs	r3, #10
 80003fc:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 8000402:	f242 0360 	movw	r3, #8288	; 0x2060
 8000406:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x103<<5;
 800040c:	f242 0360 	movw	r3, #8288	; 0x2060
 8000410:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800041a:	2301      	movs	r3, #1
 800041c:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // how many filters to assign to the CAN1 (master can)
 800041e:	230d      	movs	r3, #13
 8000420:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000422:	463b      	mov	r3, r7
 8000424:	4619      	mov	r1, r3
 8000426:	4803      	ldr	r0, [pc, #12]	; (8000434 <MX_CAN1_Init+0xa0>)
 8000428:	f000 fae7 	bl	80009fa <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 800042c:	bf00      	nop
 800042e:	3728      	adds	r7, #40	; 0x28
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000028 	.word	0x20000028
 8000438:	40006400 	.word	0x40006400

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b088      	sub	sp, #32
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]
 8000450:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000452:	4b23      	ldr	r3, [pc, #140]	; (80004e0 <MX_GPIO_Init+0xa4>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a22      	ldr	r2, [pc, #136]	; (80004e0 <MX_GPIO_Init+0xa4>)
 8000458:	f043 0304 	orr.w	r3, r3, #4
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b20      	ldr	r3, [pc, #128]	; (80004e0 <MX_GPIO_Init+0xa4>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0304 	and.w	r3, r3, #4
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <MX_GPIO_Init+0xa4>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	4a1c      	ldr	r2, [pc, #112]	; (80004e0 <MX_GPIO_Init+0xa4>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000476:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <MX_GPIO_Init+0xa4>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	2120      	movs	r1, #32
 8000486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048a:	f001 fac7 	bl	8001a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800048e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000494:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4619      	mov	r1, r3
 80004a4:	480f      	ldr	r0, [pc, #60]	; (80004e4 <MX_GPIO_Init+0xa8>)
 80004a6:	f001 f90f 	bl	80016c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80004aa:	2320      	movs	r3, #32
 80004ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	4619      	mov	r1, r3
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004c4:	f001 f900 	bl	80016c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2101      	movs	r1, #1
 80004cc:	2028      	movs	r0, #40	; 0x28
 80004ce:	f001 f8c4 	bl	800165a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004d2:	2028      	movs	r0, #40	; 0x28
 80004d4:	f001 f8dd 	bl	8001692 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004d8:	bf00      	nop
 80004da:	3720      	adds	r7, #32
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000
 80004e4:	48000800 	.word	0x48000800

080004e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <Error_Handler+0x8>
	...

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_MspInit+0x44>)
 80004fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_MspInit+0x44>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	6613      	str	r3, [r2, #96]	; 0x60
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_MspInit+0x44>)
 8000508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <HAL_MspInit+0x44>)
 8000514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000516:	4a08      	ldr	r2, [pc, #32]	; (8000538 <HAL_MspInit+0x44>)
 8000518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800051c:	6593      	str	r3, [r2, #88]	; 0x58
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <HAL_MspInit+0x44>)
 8000520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a1c      	ldr	r2, [pc, #112]	; (80005cc <HAL_CAN_MspInit+0x90>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d131      	bne.n	80005c2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <HAL_CAN_MspInit+0x94>)
 8000560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000562:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <HAL_CAN_MspInit+0x94>)
 8000564:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000568:	6593      	str	r3, [r2, #88]	; 0x58
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <HAL_CAN_MspInit+0x94>)
 800056c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000576:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <HAL_CAN_MspInit+0x94>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a15      	ldr	r2, [pc, #84]	; (80005d0 <HAL_CAN_MspInit+0x94>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <HAL_CAN_MspInit+0x94>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800058e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005a0:	2309      	movs	r3, #9
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ae:	f001 f88b 	bl	80016c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2100      	movs	r1, #0
 80005b6:	2014      	movs	r0, #20
 80005b8:	f001 f84f 	bl	800165a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005bc:	2014      	movs	r0, #20
 80005be:	f001 f868 	bl	8001692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80005c2:	bf00      	nop
 80005c4:	3728      	adds	r7, #40	; 0x28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40006400 	.word	0x40006400
 80005d0:	40021000 	.word	0x40021000

080005d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005d8:	e7fe      	b.n	80005d8 <NMI_Handler+0x4>

080005da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005de:	e7fe      	b.n	80005de <HardFault_Handler+0x4>

080005e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <MemManage_Handler+0x4>

080005e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <BusFault_Handler+0x4>

080005ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <UsageFault_Handler+0x4>

080005f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000620:	f000 f8ac 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800062c:	4802      	ldr	r0, [pc, #8]	; (8000638 <CAN1_RX0_IRQHandler+0x10>)
 800062e:	f000 fd0a 	bl	8001046 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000028 	.word	0x20000028

0800063c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000640:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000644:	f001 fa1c 	bl	8001a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <SystemInit+0x20>)
 8000652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <SystemInit+0x20>)
 8000658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800065c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000670:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000674:	f7ff ffea 	bl	800064c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <LoopForever+0x6>)
  ldr r1, =_edata
 800067a:	490d      	ldr	r1, [pc, #52]	; (80006b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <LoopForever+0xe>)
  movs r3, #0
 800067e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000680:	e002      	b.n	8000688 <LoopCopyDataInit>

08000682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000686:	3304      	adds	r3, #4

08000688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800068c:	d3f9      	bcc.n	8000682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000690:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <LoopForever+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000694:	e001      	b.n	800069a <LoopFillZerobss>

08000696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000698:	3204      	adds	r2, #4

0800069a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800069c:	d3fb      	bcc.n	8000696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069e:	f002 f83b 	bl	8002718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006a2:	f7ff fdcf 	bl	8000244 <main>

080006a6 <LoopForever>:

LoopForever:
    b LoopForever
 80006a6:	e7fe      	b.n	80006a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b4:	080027c0 	.word	0x080027c0
  ldr r2, =_sbss
 80006b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006bc:	200000a0 	.word	0x200000a0

080006c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c0:	e7fe      	b.n	80006c0 <ADC1_2_IRQHandler>
	...

080006c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_Init+0x3c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_Init+0x3c>)
 80006d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006da:	2003      	movs	r0, #3
 80006dc:	f000 ffb2 	bl	8001644 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 f80f 	bl	8000704 <HAL_InitTick>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	e001      	b.n	80006f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006f2:	f7ff feff 	bl	80004f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40022000 	.word	0x40022000

08000704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800070c:	2300      	movs	r3, #0
 800070e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000710:	4b17      	ldr	r3, [pc, #92]	; (8000770 <HAL_InitTick+0x6c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d023      	beq.n	8000760 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_InitTick+0x70>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b14      	ldr	r3, [pc, #80]	; (8000770 <HAL_InitTick+0x6c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000726:	fbb3 f3f1 	udiv	r3, r3, r1
 800072a:	fbb2 f3f3 	udiv	r3, r2, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ffbd 	bl	80016ae <HAL_SYSTICK_Config>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10f      	bne.n	800075a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b0f      	cmp	r3, #15
 800073e:	d809      	bhi.n	8000754 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 ff87 	bl	800165a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800074c:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <HAL_InitTick+0x74>)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e007      	b.n	8000764 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
 8000758:	e004      	b.n	8000764 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	73fb      	strb	r3, [r7, #15]
 800075e:	e001      	b.n	8000764 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000008 	.word	0x20000008
 8000774:	20000000 	.word	0x20000000
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_IncTick+0x20>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_IncTick+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_IncTick+0x24>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000008 	.word	0x20000008
 80007a0:	2000009c 	.word	0x2000009c

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	2000009c 	.word	0x2000009c

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff ffee 	bl	80007a4 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_Delay+0x44>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e2:	bf00      	nop
 80007e4:	f7ff ffde 	bl	80007a4 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000008 	.word	0x20000008

08000804 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e0ed      	b.n	80009f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff fe8a 	bl	800053c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f042 0201 	orr.w	r2, r2, #1
 8000836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000838:	f7ff ffb4 	bl	80007a4 <HAL_GetTick>
 800083c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800083e:	e012      	b.n	8000866 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000840:	f7ff ffb0 	bl	80007a4 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d90b      	bls.n	8000866 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000852:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2205      	movs	r2, #5
 800085e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
 8000864:	e0c5      	b.n	80009f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0e5      	beq.n	8000840 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f022 0202 	bic.w	r2, r2, #2
 8000882:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000884:	f7ff ff8e 	bl	80007a4 <HAL_GetTick>
 8000888:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800088a:	e012      	b.n	80008b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800088c:	f7ff ff8a 	bl	80007a4 <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	2b0a      	cmp	r3, #10
 8000898:	d90b      	bls.n	80008b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2205      	movs	r2, #5
 80008aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e09f      	b.n	80009f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f003 0302 	and.w	r3, r3, #2
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1e5      	bne.n	800088c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7e1b      	ldrb	r3, [r3, #24]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d108      	bne.n	80008da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	e007      	b.n	80008ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7e5b      	ldrb	r3, [r3, #25]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d108      	bne.n	8000904 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	e007      	b.n	8000914 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000912:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	7e9b      	ldrb	r3, [r3, #26]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d108      	bne.n	800092e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 0220 	orr.w	r2, r2, #32
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	e007      	b.n	800093e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f022 0220 	bic.w	r2, r2, #32
 800093c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7edb      	ldrb	r3, [r3, #27]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d108      	bne.n	8000958 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f022 0210 	bic.w	r2, r2, #16
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e007      	b.n	8000968 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f042 0210 	orr.w	r2, r2, #16
 8000966:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	7f1b      	ldrb	r3, [r3, #28]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d108      	bne.n	8000982 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f042 0208 	orr.w	r2, r2, #8
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	e007      	b.n	8000992 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f022 0208 	bic.w	r2, r2, #8
 8000990:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	7f5b      	ldrb	r3, [r3, #29]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d108      	bne.n	80009ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f042 0204 	orr.w	r2, r2, #4
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	e007      	b.n	80009bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f022 0204 	bic.w	r2, r2, #4
 80009ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	431a      	orrs	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	431a      	orrs	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	ea42 0103 	orr.w	r1, r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	1e5a      	subs	r2, r3, #1
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	430a      	orrs	r2, r1
 80009e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b087      	sub	sp, #28
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a10:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a12:	7cfb      	ldrb	r3, [r7, #19]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d003      	beq.n	8000a20 <HAL_CAN_ConfigFilter+0x26>
 8000a18:	7cfb      	ldrb	r3, [r7, #19]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	f040 80aa 	bne.w	8000b74 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a26:	f043 0201 	orr.w	r2, r3, #1
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f003 031f 	and.w	r3, r3, #31
 8000a38:	2201      	movs	r2, #1
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d123      	bne.n	8000aa2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	401a      	ands	r2, r3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3248      	adds	r2, #72	; 0x48
 8000a82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a98:	6979      	ldr	r1, [r7, #20]
 8000a9a:	3348      	adds	r3, #72	; 0x48
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	440b      	add	r3, r1
 8000aa0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d122      	bne.n	8000af0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000aca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	3248      	adds	r2, #72	; 0x48
 8000ad0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ae4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ae6:	6979      	ldr	r1, [r7, #20]
 8000ae8:	3348      	adds	r3, #72	; 0x48
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	440b      	add	r3, r1
 8000aee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d109      	bne.n	8000b0c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000b0a:	e007      	b.n	8000b1c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	431a      	orrs	r2, r3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	691b      	ldr	r3, [r3, #16]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d109      	bne.n	8000b38 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000b36:	e007      	b.n	8000b48 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	431a      	orrs	r2, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d107      	bne.n	8000b60 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b66:	f023 0201 	bic.w	r2, r3, #1
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e006      	b.n	8000b82 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
  }
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	371c      	adds	r7, #28
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b084      	sub	sp, #16
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d12e      	bne.n	8000c00 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0201 	bic.w	r2, r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000bba:	f7ff fdf3 	bl	80007a4 <HAL_GetTick>
 8000bbe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bc0:	e012      	b.n	8000be8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bc2:	f7ff fdef 	bl	80007a4 <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b0a      	cmp	r3, #10
 8000bce:	d90b      	bls.n	8000be8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2205      	movs	r2, #5
 8000be0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e012      	b.n	8000c0e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1e5      	bne.n	8000bc2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e006      	b.n	8000c0e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
  }
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b089      	sub	sp, #36	; 0x24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	60f8      	str	r0, [r7, #12]
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c34:	7ffb      	ldrb	r3, [r7, #31]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d003      	beq.n	8000c42 <HAL_CAN_AddTxMessage+0x2c>
 8000c3a:	7ffb      	ldrb	r3, [r7, #31]
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	f040 80ad 	bne.w	8000d9c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d10a      	bne.n	8000c62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d105      	bne.n	8000c62 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f000 8095 	beq.w	8000d8c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	0e1b      	lsrs	r3, r3, #24
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	409a      	lsls	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	689b      	ldr	r3, [r3, #8]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d10d      	bne.n	8000c9a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c88:	68f9      	ldr	r1, [r7, #12]
 8000c8a:	6809      	ldr	r1, [r1, #0]
 8000c8c:	431a      	orrs	r2, r3
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3318      	adds	r3, #24
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	440b      	add	r3, r1
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	e00f      	b.n	8000cba <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ca4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000caa:	68f9      	ldr	r1, [r7, #12]
 8000cac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000cae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3318      	adds	r3, #24
 8000cb4:	011b      	lsls	r3, r3, #4
 8000cb6:	440b      	add	r3, r1
 8000cb8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	691a      	ldr	r2, [r3, #16]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3318      	adds	r3, #24
 8000cc6:	011b      	lsls	r3, r3, #4
 8000cc8:	440b      	add	r3, r1
 8000cca:	3304      	adds	r3, #4
 8000ccc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	7d1b      	ldrb	r3, [r3, #20]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d111      	bne.n	8000cfa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3318      	adds	r3, #24
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4413      	add	r3, r2
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	6811      	ldr	r1, [r2, #0]
 8000cea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3318      	adds	r3, #24
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3307      	adds	r3, #7
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	061a      	lsls	r2, r3, #24
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3306      	adds	r3, #6
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	431a      	orrs	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3305      	adds	r3, #5
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	4313      	orrs	r3, r2
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	3204      	adds	r2, #4
 8000d1a:	7812      	ldrb	r2, [r2, #0]
 8000d1c:	4610      	mov	r0, r2
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	6811      	ldr	r1, [r2, #0]
 8000d22:	ea43 0200 	orr.w	r2, r3, r0
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	011b      	lsls	r3, r3, #4
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3303      	adds	r3, #3
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	061a      	lsls	r2, r3, #24
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3302      	adds	r3, #2
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	041b      	lsls	r3, r3, #16
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3301      	adds	r3, #1
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	7812      	ldrb	r2, [r2, #0]
 8000d52:	4610      	mov	r0, r2
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	6811      	ldr	r1, [r2, #0]
 8000d58:	ea43 0200 	orr.w	r2, r3, r0
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	440b      	add	r3, r1
 8000d62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000d66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3318      	adds	r3, #24
 8000d70:	011b      	lsls	r3, r3, #4
 8000d72:	4413      	add	r3, r2
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	6811      	ldr	r1, [r2, #0]
 8000d7a:	f043 0201 	orr.w	r2, r3, #1
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3318      	adds	r3, #24
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	440b      	add	r3, r1
 8000d86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	e00e      	b.n	8000daa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e006      	b.n	8000daa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
  }
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000db6:	b480      	push	{r7}
 8000db8:	b087      	sub	sp, #28
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d003      	beq.n	8000dda <HAL_CAN_GetRxMessage+0x24>
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	f040 8103 	bne.w	8000fe0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10e      	bne.n	8000dfe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d116      	bne.n	8000e1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e0f7      	b.n	8000fee <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d107      	bne.n	8000e1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e0e8      	b.n	8000fee <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	331b      	adds	r3, #27
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4413      	add	r3, r2
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0204 	and.w	r2, r3, #4
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d10c      	bne.n	8000e54 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	331b      	adds	r3, #27
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	4413      	add	r3, r2
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	0d5b      	lsrs	r3, r3, #21
 8000e4a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e00b      	b.n	8000e6c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	331b      	adds	r3, #27
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	4413      	add	r3, r2
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	331b      	adds	r3, #27
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	4413      	add	r3, r2
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f003 0202 	and.w	r2, r3, #2
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	331b      	adds	r3, #27
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3304      	adds	r3, #4
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	611a      	str	r2, [r3, #16]
 8000ea0:	e00b      	b.n	8000eba <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	331b      	adds	r3, #27
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	4413      	add	r3, r2
 8000eae:	3304      	adds	r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 020f 	and.w	r2, r3, #15
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	331b      	adds	r3, #27
 8000ec2:	011b      	lsls	r3, r3, #4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	0a1b      	lsrs	r3, r3, #8
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	331b      	adds	r3, #27
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	4413      	add	r3, r2
 8000ede:	3304      	adds	r3, #4
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0c1b      	lsrs	r3, r3, #16
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	4413      	add	r3, r2
 8000ef4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	4413      	add	r3, r2
 8000f0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	0a1a      	lsrs	r2, r3, #8
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	0c1a      	lsrs	r2, r3, #16
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	3302      	adds	r3, #2
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	0e1a      	lsrs	r2, r3, #24
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	3303      	adds	r3, #3
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	011b      	lsls	r3, r3, #4
 8000f56:	4413      	add	r3, r2
 8000f58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3304      	adds	r3, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	011b      	lsls	r3, r3, #4
 8000f6e:	4413      	add	r3, r2
 8000f70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	0a1a      	lsrs	r2, r3, #8
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	3305      	adds	r3, #5
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4413      	add	r3, r2
 8000f8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	0c1a      	lsrs	r2, r3, #16
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	3306      	adds	r3, #6
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	4413      	add	r3, r2
 8000fa4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	0e1a      	lsrs	r2, r3, #24
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	3307      	adds	r3, #7
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d108      	bne.n	8000fcc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0220 	orr.w	r2, r2, #32
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	e007      	b.n	8000fdc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	691a      	ldr	r2, [r3, #16]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0220 	orr.w	r2, r2, #32
 8000fda:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e006      	b.n	8000fee <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
  }
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	371c      	adds	r7, #28
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b085      	sub	sp, #20
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800100a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800100c:	7bfb      	ldrb	r3, [r7, #15]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d002      	beq.n	8001018 <HAL_CAN_ActivateNotification+0x1e>
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d109      	bne.n	800102c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6959      	ldr	r1, [r3, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	430a      	orrs	r2, r1
 8001026:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	e006      	b.n	800103a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
  }
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b08a      	sub	sp, #40	; 0x28
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800104e:	2300      	movs	r3, #0
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001082:	6a3b      	ldr	r3, [r7, #32]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d07c      	beq.n	8001186 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d023      	beq.n	80010de <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2201      	movs	r2, #1
 800109c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 f983 	bl	80013b4 <HAL_CAN_TxMailbox0CompleteCallback>
 80010ae:	e016      	b.n	80010de <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d004      	beq.n	80010c4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
 80010c2:	e00c      	b.n	80010de <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	f003 0308 	and.w	r3, r3, #8
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d004      	beq.n	80010d8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
 80010d6:	e002      	b.n	80010de <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f000 f989 	bl	80013f0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d024      	beq.n	8001132 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 f963 	bl	80013c8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001102:	e016      	b.n	8001132 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110a:	2b00      	cmp	r3, #0
 800110c:	d004      	beq.n	8001118 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
 8001116:	e00c      	b.n	8001132 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800111e:	2b00      	cmp	r3, #0
 8001120:	d004      	beq.n	800112c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
 800112a:	e002      	b.n	8001132 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f969 	bl	8001404 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d024      	beq.n	8001186 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001144:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f943 	bl	80013dc <HAL_CAN_TxMailbox2CompleteCallback>
 8001156:	e016      	b.n	8001186 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
 800116a:	e00c      	b.n	8001186 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d004      	beq.n	8001180 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	e002      	b.n	8001186 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f949 	bl	8001418 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00c      	beq.n	80011aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	2b00      	cmp	r3, #0
 8001198:	d007      	beq.n	80011aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2210      	movs	r2, #16
 80011a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00b      	beq.n	80011cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d006      	beq.n	80011cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2208      	movs	r2, #8
 80011c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f930 	bl	800142c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d002      	beq.n	80011ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff f811 	bl	800020c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d00c      	beq.n	800120e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001204:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2210      	movs	r2, #16
 800120c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800120e:	6a3b      	ldr	r3, [r7, #32]
 8001210:	f003 0320 	and.w	r3, r3, #32
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00b      	beq.n	8001230 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d006      	beq.n	8001230 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2208      	movs	r2, #8
 8001228:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f912 	bl	8001454 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	2b00      	cmp	r3, #0
 8001238:	d009      	beq.n	800124e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	f003 0303 	and.w	r3, r3, #3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d002      	beq.n	800124e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f8f9 	bl	8001440 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800124e:	6a3b      	ldr	r3, [r7, #32]
 8001250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0310 	and.w	r3, r3, #16
 800125e:	2b00      	cmp	r3, #0
 8001260:	d006      	beq.n	8001270 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2210      	movs	r2, #16
 8001268:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f8fc 	bl	8001468 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2208      	movs	r2, #8
 800128a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f8f5 	bl	800147c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d07b      	beq.n	8001394 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d072      	beq.n	800138c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d008      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012c2:	6a3b      	ldr	r3, [r7, #32]
 80012c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d008      	beq.n	80012de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001300:	2b00      	cmp	r3, #0
 8001302:	d043      	beq.n	800138c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800130a:	2b00      	cmp	r3, #0
 800130c:	d03e      	beq.n	800138c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001314:	2b60      	cmp	r3, #96	; 0x60
 8001316:	d02b      	beq.n	8001370 <HAL_CAN_IRQHandler+0x32a>
 8001318:	2b60      	cmp	r3, #96	; 0x60
 800131a:	d82e      	bhi.n	800137a <HAL_CAN_IRQHandler+0x334>
 800131c:	2b50      	cmp	r3, #80	; 0x50
 800131e:	d022      	beq.n	8001366 <HAL_CAN_IRQHandler+0x320>
 8001320:	2b50      	cmp	r3, #80	; 0x50
 8001322:	d82a      	bhi.n	800137a <HAL_CAN_IRQHandler+0x334>
 8001324:	2b40      	cmp	r3, #64	; 0x40
 8001326:	d019      	beq.n	800135c <HAL_CAN_IRQHandler+0x316>
 8001328:	2b40      	cmp	r3, #64	; 0x40
 800132a:	d826      	bhi.n	800137a <HAL_CAN_IRQHandler+0x334>
 800132c:	2b30      	cmp	r3, #48	; 0x30
 800132e:	d010      	beq.n	8001352 <HAL_CAN_IRQHandler+0x30c>
 8001330:	2b30      	cmp	r3, #48	; 0x30
 8001332:	d822      	bhi.n	800137a <HAL_CAN_IRQHandler+0x334>
 8001334:	2b10      	cmp	r3, #16
 8001336:	d002      	beq.n	800133e <HAL_CAN_IRQHandler+0x2f8>
 8001338:	2b20      	cmp	r3, #32
 800133a:	d005      	beq.n	8001348 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800133c:	e01d      	b.n	800137a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001346:	e019      	b.n	800137c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001350:	e014      	b.n	800137c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	f043 0320 	orr.w	r3, r3, #32
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800135a:	e00f      	b.n	800137c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001364:	e00a      	b.n	800137c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800136e:	e005      	b.n	800137c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001378:	e000      	b.n	800137c <HAL_CAN_IRQHandler+0x336>
            break;
 800137a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800138a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2204      	movs	r2, #4
 8001392:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	2b00      	cmp	r3, #0
 8001398:	d008      	beq.n	80013ac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 f872 	bl	8001490 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014c0:	4013      	ands	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d6:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <__NVIC_SetPriorityGrouping+0x44>)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60d3      	str	r3, [r2, #12]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f0:	4b04      	ldr	r3, [pc, #16]	; (8001504 <__NVIC_GetPriorityGrouping+0x18>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	f003 0307 	and.w	r3, r3, #7
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	2b00      	cmp	r3, #0
 8001518:	db0b      	blt.n	8001532 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	f003 021f 	and.w	r2, r3, #31
 8001520:	4907      	ldr	r1, [pc, #28]	; (8001540 <__NVIC_EnableIRQ+0x38>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	095b      	lsrs	r3, r3, #5
 8001528:	2001      	movs	r0, #1
 800152a:	fa00 f202 	lsl.w	r2, r0, r2
 800152e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100

08001544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	2b00      	cmp	r3, #0
 8001556:	db0a      	blt.n	800156e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b2da      	uxtb	r2, r3
 800155c:	490c      	ldr	r1, [pc, #48]	; (8001590 <__NVIC_SetPriority+0x4c>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	0112      	lsls	r2, r2, #4
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	440b      	add	r3, r1
 8001568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800156c:	e00a      	b.n	8001584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4908      	ldr	r1, [pc, #32]	; (8001594 <__NVIC_SetPriority+0x50>)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	f003 030f 	and.w	r3, r3, #15
 800157a:	3b04      	subs	r3, #4
 800157c:	0112      	lsls	r2, r2, #4
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	440b      	add	r3, r1
 8001582:	761a      	strb	r2, [r3, #24]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001598:	b480      	push	{r7}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f1c3 0307 	rsb	r3, r3, #7
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	bf28      	it	cs
 80015b6:	2304      	movcs	r3, #4
 80015b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3304      	adds	r3, #4
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d902      	bls.n	80015c8 <NVIC_EncodePriority+0x30>
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3b03      	subs	r3, #3
 80015c6:	e000      	b.n	80015ca <NVIC_EncodePriority+0x32>
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	f04f 32ff 	mov.w	r2, #4294967295
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43da      	mvns	r2, r3
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ea:	43d9      	mvns	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	4313      	orrs	r3, r2
         );
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3724      	adds	r7, #36	; 0x24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001610:	d301      	bcc.n	8001616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001612:	2301      	movs	r3, #1
 8001614:	e00f      	b.n	8001636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001616:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <SysTick_Config+0x40>)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800161e:	210f      	movs	r1, #15
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f7ff ff8e 	bl	8001544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <SysTick_Config+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <SysTick_Config+0x40>)
 8001630:	2207      	movs	r2, #7
 8001632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	e000e010 	.word	0xe000e010

08001644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff29 	bl	80014a4 <__NVIC_SetPriorityGrouping>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800166c:	f7ff ff3e 	bl	80014ec <__NVIC_GetPriorityGrouping>
 8001670:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	6978      	ldr	r0, [r7, #20]
 8001678:	f7ff ff8e 	bl	8001598 <NVIC_EncodePriority>
 800167c:	4602      	mov	r2, r0
 800167e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff5d 	bl	8001544 <__NVIC_SetPriority>
}
 800168a:	bf00      	nop
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff31 	bl	8001508 <__NVIC_EnableIRQ>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffa2 	bl	8001600 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
	...

080016c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	e17f      	b.n	80019d8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	2101      	movs	r1, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	4013      	ands	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 8171 	beq.w	80019d2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d005      	beq.n	8001708 <HAL_GPIO_Init+0x40>
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 0201 	and.w	r2, r3, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b03      	cmp	r3, #3
 8001774:	d118      	bne.n	80017a8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800177c:	2201      	movs	r2, #1
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	08db      	lsrs	r3, r3, #3
 8001792:	f003 0201 	and.w	r2, r3, #1
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d017      	beq.n	80017e4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d123      	bne.n	8001838 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	08da      	lsrs	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3208      	adds	r2, #8
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	6939      	ldr	r1, [r7, #16]
 8001834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80ac 	beq.w	80019d2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	4b5f      	ldr	r3, [pc, #380]	; (80019f8 <HAL_GPIO_Init+0x330>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	4a5e      	ldr	r2, [pc, #376]	; (80019f8 <HAL_GPIO_Init+0x330>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6613      	str	r3, [r2, #96]	; 0x60
 8001886:	4b5c      	ldr	r3, [pc, #368]	; (80019f8 <HAL_GPIO_Init+0x330>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001892:	4a5a      	ldr	r2, [pc, #360]	; (80019fc <HAL_GPIO_Init+0x334>)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3302      	adds	r3, #2
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018bc:	d025      	beq.n	800190a <HAL_GPIO_Init+0x242>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4f      	ldr	r2, [pc, #316]	; (8001a00 <HAL_GPIO_Init+0x338>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d01f      	beq.n	8001906 <HAL_GPIO_Init+0x23e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4e      	ldr	r2, [pc, #312]	; (8001a04 <HAL_GPIO_Init+0x33c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d019      	beq.n	8001902 <HAL_GPIO_Init+0x23a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4d      	ldr	r2, [pc, #308]	; (8001a08 <HAL_GPIO_Init+0x340>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0x236>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4c      	ldr	r2, [pc, #304]	; (8001a0c <HAL_GPIO_Init+0x344>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00d      	beq.n	80018fa <HAL_GPIO_Init+0x232>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4b      	ldr	r2, [pc, #300]	; (8001a10 <HAL_GPIO_Init+0x348>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <HAL_GPIO_Init+0x22e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4a      	ldr	r2, [pc, #296]	; (8001a14 <HAL_GPIO_Init+0x34c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d101      	bne.n	80018f2 <HAL_GPIO_Init+0x22a>
 80018ee:	2306      	movs	r3, #6
 80018f0:	e00c      	b.n	800190c <HAL_GPIO_Init+0x244>
 80018f2:	2307      	movs	r3, #7
 80018f4:	e00a      	b.n	800190c <HAL_GPIO_Init+0x244>
 80018f6:	2305      	movs	r3, #5
 80018f8:	e008      	b.n	800190c <HAL_GPIO_Init+0x244>
 80018fa:	2304      	movs	r3, #4
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x244>
 80018fe:	2303      	movs	r3, #3
 8001900:	e004      	b.n	800190c <HAL_GPIO_Init+0x244>
 8001902:	2302      	movs	r3, #2
 8001904:	e002      	b.n	800190c <HAL_GPIO_Init+0x244>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <HAL_GPIO_Init+0x244>
 800190a:	2300      	movs	r3, #0
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	f002 0203 	and.w	r2, r2, #3
 8001912:	0092      	lsls	r2, r2, #2
 8001914:	4093      	lsls	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800191c:	4937      	ldr	r1, [pc, #220]	; (80019fc <HAL_GPIO_Init+0x334>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_GPIO_Init+0x350>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800194e:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <HAL_GPIO_Init+0x350>)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001954:	4b30      	ldr	r3, [pc, #192]	; (8001a18 <HAL_GPIO_Init+0x350>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001978:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <HAL_GPIO_Init+0x350>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800197e:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <HAL_GPIO_Init+0x350>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019a2:	4a1d      	ldr	r2, [pc, #116]	; (8001a18 <HAL_GPIO_Init+0x350>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019a8:	4b1b      	ldr	r3, [pc, #108]	; (8001a18 <HAL_GPIO_Init+0x350>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019cc:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <HAL_GPIO_Init+0x350>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	3301      	adds	r3, #1
 80019d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f47f ae78 	bne.w	80016d8 <HAL_GPIO_Init+0x10>
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	48000400 	.word	0x48000400
 8001a04:	48000800 	.word	0x48000800
 8001a08:	48000c00 	.word	0x48000c00
 8001a0c:	48001000 	.word	0x48001000
 8001a10:	48001400 	.word	0x48001400
 8001a14:	48001800 	.word	0x48001800
 8001a18:	40010400 	.word	0x40010400

08001a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a2c:	787b      	ldrb	r3, [r7, #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a3a:	887a      	ldrh	r2, [r7, #2]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	041a      	lsls	r2, r3, #16
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43d9      	mvns	r1, r3
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a8c:	695a      	ldr	r2, [r3, #20]
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a96:	4a05      	ldr	r2, [pc, #20]	; (8001aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fb92 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40007000 	.word	0x40007000

08001acc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ada:	d130      	bne.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001adc:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae8:	d038      	beq.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2232      	movs	r2, #50	; 0x32
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0c9b      	lsrs	r3, r3, #18
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b10:	e002      	b.n	8001b18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	3b01      	subs	r3, #1
 8001b16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b24:	d102      	bne.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f2      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b2e:	695b      	ldr	r3, [r3, #20]
 8001b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b38:	d110      	bne.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e00f      	b.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4a:	d007      	beq.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b54:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	20000000 	.word	0x20000000
 8001b74:	431bde83 	.word	0x431bde83

08001b78 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e3ca      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b97      	ldr	r3, [pc, #604]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b94:	4b94      	ldr	r3, [pc, #592]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80e4 	beq.w	8001d74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d007      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x4a>
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b0c      	cmp	r3, #12
 8001bb6:	f040 808b 	bne.w	8001cd0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	f040 8087 	bne.w	8001cd0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc2:	4b89      	ldr	r3, [pc, #548]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x62>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e3a2      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1a      	ldr	r2, [r3, #32]
 8001bde:	4b82      	ldr	r3, [pc, #520]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d004      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x7c>
 8001bea:	4b7f      	ldr	r3, [pc, #508]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf2:	e005      	b.n	8001c00 <HAL_RCC_OscConfig+0x88>
 8001bf4:	4b7c      	ldr	r3, [pc, #496]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d223      	bcs.n	8001c4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fd1d 	bl	8002648 <RCC_SetFlashLatencyFromMSIRange>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e383      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c18:	4b73      	ldr	r3, [pc, #460]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a72      	ldr	r2, [pc, #456]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	f043 0308 	orr.w	r3, r3, #8
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b70      	ldr	r3, [pc, #448]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	496d      	ldr	r1, [pc, #436]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c36:	4b6c      	ldr	r3, [pc, #432]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	4968      	ldr	r1, [pc, #416]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
 8001c4a:	e025      	b.n	8001c98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c4c:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a65      	ldr	r2, [pc, #404]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	4960      	ldr	r1, [pc, #384]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c6a:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	495b      	ldr	r1, [pc, #364]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fcdd 	bl	8002648 <RCC_SetFlashLatencyFromMSIRange>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e343      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c98:	f000 fc4a 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b52      	ldr	r3, [pc, #328]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	4950      	ldr	r1, [pc, #320]	; (8001dec <HAL_RCC_OscConfig+0x274>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a4e      	ldr	r2, [pc, #312]	; (8001df0 <HAL_RCC_OscConfig+0x278>)
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cb8:	4b4e      	ldr	r3, [pc, #312]	; (8001df4 <HAL_RCC_OscConfig+0x27c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fd21 	bl	8000704 <HAL_InitTick>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d052      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
 8001cce:	e327      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d032      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cd8:	4b43      	ldr	r3, [pc, #268]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a42      	ldr	r2, [pc, #264]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe fd5e 	bl	80007a4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cec:	f7fe fd5a 	bl	80007a4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e310      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cfe:	4b3a      	ldr	r3, [pc, #232]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a36      	ldr	r2, [pc, #216]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4931      	ldr	r1, [pc, #196]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	492c      	ldr	r1, [pc, #176]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
 8001d3c:	e01a      	b.n	8001d74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d4a:	f7fe fd2b 	bl	80007a4 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d52:	f7fe fd27 	bl	80007a4 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e2dd      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f0      	bne.n	8001d52 <HAL_RCC_OscConfig+0x1da>
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d074      	beq.n	8001e6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d005      	beq.n	8001d92 <HAL_RCC_OscConfig+0x21a>
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d10e      	bne.n	8001daa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d10b      	bne.n	8001daa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d064      	beq.n	8001e68 <HAL_RCC_OscConfig+0x2f0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d160      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e2ba      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db2:	d106      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x24a>
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a0b      	ldr	r2, [pc, #44]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e026      	b.n	8001e10 <HAL_RCC_OscConfig+0x298>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dca:	d115      	bne.n	8001df8 <HAL_RCC_OscConfig+0x280>
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a02      	ldr	r2, [pc, #8]	; (8001de8 <HAL_RCC_OscConfig+0x270>)
 8001dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x298>
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08002778 	.word	0x08002778
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000004 	.word	0x20000004
 8001df8:	4ba0      	ldr	r3, [pc, #640]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a9f      	ldr	r2, [pc, #636]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b9d      	ldr	r3, [pc, #628]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a9c      	ldr	r2, [pc, #624]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7fe fcc4 	bl	80007a4 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7fe fcc0 	bl	80007a4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	; 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e276      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e32:	4b92      	ldr	r3, [pc, #584]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0x2a8>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7fe fcb0 	bl	80007a4 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7fe fcac 	bl	80007a4 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	; 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e262      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5a:	4b88      	ldr	r3, [pc, #544]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x2d0>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d060      	beq.n	8001f38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_OscConfig+0x310>
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d119      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d116      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e88:	4b7c      	ldr	r3, [pc, #496]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x328>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e23f      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea0:	4b76      	ldr	r3, [pc, #472]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	061b      	lsls	r3, r3, #24
 8001eae:	4973      	ldr	r1, [pc, #460]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eb4:	e040      	b.n	8001f38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d023      	beq.n	8001f06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebe:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6e      	ldr	r2, [pc, #440]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eca:	f7fe fc6b 	bl	80007a4 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed2:	f7fe fc67 	bl	80007a4 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e21d      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee4:	4b65      	ldr	r3, [pc, #404]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef0:	4b62      	ldr	r3, [pc, #392]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	495f      	ldr	r1, [pc, #380]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
 8001f04:	e018      	b.n	8001f38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a5c      	ldr	r2, [pc, #368]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7fe fc47 	bl	80007a4 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7fe fc43 	bl	80007a4 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1f9      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f2c:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d03c      	beq.n	8001fbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d01c      	beq.n	8001f86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f52:	4a4a      	ldr	r2, [pc, #296]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fc22 	bl	80007a4 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f64:	f7fe fc1e 	bl	80007a4 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1d4      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f76:	4b41      	ldr	r3, [pc, #260]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ef      	beq.n	8001f64 <HAL_RCC_OscConfig+0x3ec>
 8001f84:	e01b      	b.n	8001fbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8c:	4a3b      	ldr	r2, [pc, #236]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7fe fc05 	bl	80007a4 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fc01 	bl	80007a4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1b7      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb0:	4b32      	ldr	r3, [pc, #200]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ef      	bne.n	8001f9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80a6 	beq.w	8002118 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	4a26      	ldr	r2, [pc, #152]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe8:	4b24      	ldr	r3, [pc, #144]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_RCC_OscConfig+0x508>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d118      	bne.n	8002036 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <HAL_RCC_OscConfig+0x508>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_RCC_OscConfig+0x508>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002010:	f7fe fbc8 	bl	80007a4 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002018:	f7fe fbc4 	bl	80007a4 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e17a      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_RCC_OscConfig+0x508>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <HAL_RCC_OscConfig+0x4d8>
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800204e:	e029      	b.n	80020a4 <HAL_RCC_OscConfig+0x52c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b05      	cmp	r3, #5
 8002056:	d115      	bne.n	8002084 <HAL_RCC_OscConfig+0x50c>
 8002058:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_RCC_OscConfig+0x504>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <HAL_RCC_OscConfig+0x504>)
 800206a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206e:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_RCC_OscConfig+0x504>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002078:	e014      	b.n	80020a4 <HAL_RCC_OscConfig+0x52c>
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	40007000 	.word	0x40007000
 8002084:	4b9c      	ldr	r3, [pc, #624]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	4a9b      	ldr	r2, [pc, #620]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002094:	4b98      	ldr	r3, [pc, #608]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	4a97      	ldr	r2, [pc, #604]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d016      	beq.n	80020da <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7fe fb7a 	bl	80007a4 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7fe fb76 	bl	80007a4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e12a      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ca:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ed      	beq.n	80020b4 <HAL_RCC_OscConfig+0x53c>
 80020d8:	e015      	b.n	8002106 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7fe fb63 	bl	80007a4 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe fb5f 	bl	80007a4 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e113      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f8:	4b7f      	ldr	r3, [pc, #508]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ed      	bne.n	80020e2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002106:	7ffb      	ldrb	r3, [r7, #31]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b7a      	ldr	r3, [pc, #488]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	4a79      	ldr	r2, [pc, #484]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80fe 	beq.w	800231e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	2b02      	cmp	r3, #2
 8002128:	f040 80d0 	bne.w	80022cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800212c:	4b72      	ldr	r3, [pc, #456]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0203 	and.w	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	429a      	cmp	r2, r3
 800213e:	d130      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	3b01      	subs	r3, #1
 800214c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d127      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215e:	429a      	cmp	r2, r3
 8002160:	d11f      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800216c:	2a07      	cmp	r2, #7
 800216e:	bf14      	ite	ne
 8002170:	2201      	movne	r2, #1
 8002172:	2200      	moveq	r2, #0
 8002174:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002176:	4293      	cmp	r3, r2
 8002178:	d113      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002184:	085b      	lsrs	r3, r3, #1
 8002186:	3b01      	subs	r3, #1
 8002188:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	3b01      	subs	r3, #1
 800219c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d06e      	beq.n	8002280 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	d069      	beq.n	800227c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021b4:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0ad      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021c4:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4b      	ldr	r2, [pc, #300]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80021ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021d0:	f7fe fae8 	bl	80007a4 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe fae4 	bl	80007a4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e09a      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ea:	4b43      	ldr	r3, [pc, #268]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f6:	4b40      	ldr	r3, [pc, #256]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	4b40      	ldr	r3, [pc, #256]	; (80022fc <HAL_RCC_OscConfig+0x784>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002206:	3a01      	subs	r2, #1
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	4311      	orrs	r1, r2
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002210:	0212      	lsls	r2, r2, #8
 8002212:	4311      	orrs	r1, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002218:	0852      	lsrs	r2, r2, #1
 800221a:	3a01      	subs	r2, #1
 800221c:	0552      	lsls	r2, r2, #21
 800221e:	4311      	orrs	r1, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002224:	0852      	lsrs	r2, r2, #1
 8002226:	3a01      	subs	r2, #1
 8002228:	0652      	lsls	r2, r2, #25
 800222a:	4311      	orrs	r1, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002230:	0912      	lsrs	r2, r2, #4
 8002232:	0452      	lsls	r2, r2, #17
 8002234:	430a      	orrs	r2, r1
 8002236:	4930      	ldr	r1, [pc, #192]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 8002238:	4313      	orrs	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800223c:	4b2e      	ldr	r3, [pc, #184]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a2d      	ldr	r2, [pc, #180]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002254:	f7fe faa6 	bl	80007a4 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe faa2 	bl	80007a4 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e058      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800227a:	e050      	b.n	800231e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e04f      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d148      	bne.n	800231e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a19      	ldr	r2, [pc, #100]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 8002292:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002296:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4a16      	ldr	r2, [pc, #88]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022a4:	f7fe fa7e 	bl	80007a4 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe fa7a 	bl	80007a4 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e030      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x734>
 80022ca:	e028      	b.n	800231e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2b0c      	cmp	r3, #12
 80022d0:	d023      	beq.n	800231a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_RCC_OscConfig+0x780>)
 80022d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7fe fa61 	bl	80007a4 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e4:	e00c      	b.n	8002300 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe fa5d 	bl	80007a4 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d905      	bls.n	8002300 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e013      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
 80022f8:	40021000 	.word	0x40021000
 80022fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_RCC_OscConfig+0x7b0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ec      	bne.n	80022e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_RCC_OscConfig+0x7b0>)
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4905      	ldr	r1, [pc, #20]	; (8002328 <HAL_RCC_OscConfig+0x7b0>)
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_RCC_OscConfig+0x7b4>)
 8002314:	4013      	ands	r3, r2
 8002316:	60cb      	str	r3, [r1, #12]
 8002318:	e001      	b.n	800231e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40021000 	.word	0x40021000
 800232c:	feeefffc 	.word	0xfeeefffc

08002330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0e7      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002344:	4b75      	ldr	r3, [pc, #468]	; (800251c <HAL_RCC_ClockConfig+0x1ec>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	d910      	bls.n	8002374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002352:	4b72      	ldr	r3, [pc, #456]	; (800251c <HAL_RCC_ClockConfig+0x1ec>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f023 0207 	bic.w	r2, r3, #7
 800235a:	4970      	ldr	r1, [pc, #448]	; (800251c <HAL_RCC_ClockConfig+0x1ec>)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002362:	4b6e      	ldr	r3, [pc, #440]	; (800251c <HAL_RCC_ClockConfig+0x1ec>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	429a      	cmp	r2, r3
 800236e:	d001      	beq.n	8002374 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0cf      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d010      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	4b66      	ldr	r3, [pc, #408]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800238c:	429a      	cmp	r2, r3
 800238e:	d908      	bls.n	80023a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b63      	ldr	r3, [pc, #396]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4960      	ldr	r1, [pc, #384]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d04c      	beq.n	8002448 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023b6:	4b5a      	ldr	r3, [pc, #360]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d121      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0a6      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ce:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d115      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e09a      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e6:	4b4e      	ldr	r3, [pc, #312]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d109      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e08e      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f6:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e086      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002406:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f023 0203 	bic.w	r2, r3, #3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	4943      	ldr	r1, [pc, #268]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002418:	f7fe f9c4 	bl	80007a4 <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	e00a      	b.n	8002436 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7fe f9c0 	bl	80007a4 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e06e      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 020c 	and.w	r2, r3, #12
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d1eb      	bne.n	8002420 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d010      	beq.n	8002476 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002460:	429a      	cmp	r2, r3
 8002462:	d208      	bcs.n	8002476 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	492b      	ldr	r1, [pc, #172]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <HAL_RCC_ClockConfig+0x1ec>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d210      	bcs.n	80024a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCC_ClockConfig+0x1ec>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 0207 	bic.w	r2, r3, #7
 800248c:	4923      	ldr	r1, [pc, #140]	; (800251c <HAL_RCC_ClockConfig+0x1ec>)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <HAL_RCC_ClockConfig+0x1ec>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e036      	b.n	8002514 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d008      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	4918      	ldr	r1, [pc, #96]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d009      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4910      	ldr	r1, [pc, #64]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024e4:	f000 f824 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	490b      	ldr	r1, [pc, #44]	; (8002524 <HAL_RCC_ClockConfig+0x1f4>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002500:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1f8>)
 8002502:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1fc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f8fb 	bl	8000704 <HAL_InitTick>
 800250e:	4603      	mov	r3, r0
 8002510:	72fb      	strb	r3, [r7, #11]

  return status;
 8002512:	7afb      	ldrb	r3, [r7, #11]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	08002778 	.word	0x08002778
 8002528:	20000000 	.word	0x20000000
 800252c:	20000004 	.word	0x20000004

08002530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b089      	sub	sp, #36	; 0x24
 8002534:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253e:	4b3e      	ldr	r3, [pc, #248]	; (8002638 <HAL_RCC_GetSysClockFreq+0x108>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002548:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_RCC_GetSysClockFreq+0x108>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x34>
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d121      	bne.n	80025a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d11e      	bne.n	80025a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_RCC_GetSysClockFreq+0x108>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002570:	4b31      	ldr	r3, [pc, #196]	; (8002638 <HAL_RCC_GetSysClockFreq+0x108>)
 8002572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e005      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <HAL_RCC_GetSysClockFreq+0x108>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800258c:	4a2b      	ldr	r2, [pc, #172]	; (800263c <HAL_RCC_GetSysClockFreq+0x10c>)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002594:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10d      	bne.n	80025b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d102      	bne.n	80025ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_RCC_GetSysClockFreq+0x110>)
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	e004      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b4:	4b23      	ldr	r3, [pc, #140]	; (8002644 <HAL_RCC_GetSysClockFreq+0x114>)
 80025b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b0c      	cmp	r3, #12
 80025bc:	d134      	bne.n	8002628 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d003      	beq.n	80025d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d003      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0xac>
 80025d4:	e005      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <HAL_RCC_GetSysClockFreq+0x110>)
 80025d8:	617b      	str	r3, [r7, #20]
      break;
 80025da:	e005      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025dc:	4b19      	ldr	r3, [pc, #100]	; (8002644 <HAL_RCC_GetSysClockFreq+0x114>)
 80025de:	617b      	str	r3, [r7, #20]
      break;
 80025e0:	e002      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	617b      	str	r3, [r7, #20]
      break;
 80025e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	3301      	adds	r3, #1
 80025f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	fb03 f202 	mul.w	r2, r3, r2
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_RCC_GetSysClockFreq+0x108>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	0e5b      	lsrs	r3, r3, #25
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	3301      	adds	r3, #1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	fbb2 f3f3 	udiv	r3, r2, r3
 8002626:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002628:	69bb      	ldr	r3, [r7, #24]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000
 800263c:	08002788 	.word	0x08002788
 8002640:	00f42400 	.word	0x00f42400
 8002644:	007a1200 	.word	0x007a1200

08002648 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002654:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002660:	f7ff fa26 	bl	8001ab0 <HAL_PWREx_GetVoltageRange>
 8002664:	6178      	str	r0, [r7, #20]
 8002666:	e014      	b.n	8002692 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	4a24      	ldr	r2, [pc, #144]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002672:	6593      	str	r3, [r2, #88]	; 0x58
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002680:	f7ff fa16 	bl	8001ab0 <HAL_PWREx_GetVoltageRange>
 8002684:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002686:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002690:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d10b      	bne.n	80026b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b80      	cmp	r3, #128	; 0x80
 800269e:	d919      	bls.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2ba0      	cmp	r3, #160	; 0xa0
 80026a4:	d902      	bls.n	80026ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026a6:	2302      	movs	r3, #2
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	e013      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026ac:	2301      	movs	r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	e010      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b80      	cmp	r3, #128	; 0x80
 80026b6:	d902      	bls.n	80026be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026b8:	2303      	movs	r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	e00a      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b80      	cmp	r3, #128	; 0x80
 80026c2:	d102      	bne.n	80026ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c4:	2302      	movs	r3, #2
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	e004      	b.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b70      	cmp	r3, #112	; 0x70
 80026ce:	d101      	bne.n	80026d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d0:	2301      	movs	r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f023 0207 	bic.w	r2, r3, #7
 80026dc:	4909      	ldr	r1, [pc, #36]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026e4:	4b07      	ldr	r3, [pc, #28]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	40022000 	.word	0x40022000

08002708 <memset>:
 8002708:	4402      	add	r2, r0
 800270a:	4603      	mov	r3, r0
 800270c:	4293      	cmp	r3, r2
 800270e:	d100      	bne.n	8002712 <memset+0xa>
 8002710:	4770      	bx	lr
 8002712:	f803 1b01 	strb.w	r1, [r3], #1
 8002716:	e7f9      	b.n	800270c <memset+0x4>

08002718 <__libc_init_array>:
 8002718:	b570      	push	{r4, r5, r6, lr}
 800271a:	4d0d      	ldr	r5, [pc, #52]	; (8002750 <__libc_init_array+0x38>)
 800271c:	4c0d      	ldr	r4, [pc, #52]	; (8002754 <__libc_init_array+0x3c>)
 800271e:	1b64      	subs	r4, r4, r5
 8002720:	10a4      	asrs	r4, r4, #2
 8002722:	2600      	movs	r6, #0
 8002724:	42a6      	cmp	r6, r4
 8002726:	d109      	bne.n	800273c <__libc_init_array+0x24>
 8002728:	4d0b      	ldr	r5, [pc, #44]	; (8002758 <__libc_init_array+0x40>)
 800272a:	4c0c      	ldr	r4, [pc, #48]	; (800275c <__libc_init_array+0x44>)
 800272c:	f000 f818 	bl	8002760 <_init>
 8002730:	1b64      	subs	r4, r4, r5
 8002732:	10a4      	asrs	r4, r4, #2
 8002734:	2600      	movs	r6, #0
 8002736:	42a6      	cmp	r6, r4
 8002738:	d105      	bne.n	8002746 <__libc_init_array+0x2e>
 800273a:	bd70      	pop	{r4, r5, r6, pc}
 800273c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002740:	4798      	blx	r3
 8002742:	3601      	adds	r6, #1
 8002744:	e7ee      	b.n	8002724 <__libc_init_array+0xc>
 8002746:	f855 3b04 	ldr.w	r3, [r5], #4
 800274a:	4798      	blx	r3
 800274c:	3601      	adds	r6, #1
 800274e:	e7f2      	b.n	8002736 <__libc_init_array+0x1e>
 8002750:	080027b8 	.word	0x080027b8
 8002754:	080027b8 	.word	0x080027b8
 8002758:	080027b8 	.word	0x080027b8
 800275c:	080027bc 	.word	0x080027bc

08002760 <_init>:
 8002760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002762:	bf00      	nop
 8002764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002766:	bc08      	pop	{r3}
 8002768:	469e      	mov	lr, r3
 800276a:	4770      	bx	lr

0800276c <_fini>:
 800276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800276e:	bf00      	nop
 8002770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002772:	bc08      	pop	{r3}
 8002774:	469e      	mov	lr, r3
 8002776:	4770      	bx	lr
