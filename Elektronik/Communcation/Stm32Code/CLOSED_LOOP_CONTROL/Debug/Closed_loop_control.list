
Closed_loop_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086b8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008840  08008840  00018840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a90  08008a90  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08008a90  08008a90  00018a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a98  08008a98  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08008aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a8  20000064  08008b04  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08008b04  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111ff  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023d9  00000000  00000000  000312d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  000336b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000adc  00000000  00000000  000344b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a2b  00000000  00000000  00034f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010356  00000000  00000000  0005c9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb74f  00000000  00000000  0006cd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042c0  00000000  00000000  00168464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0016c724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000064 	.word	0x20000064
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008828 	.word	0x08008828

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000068 	.word	0x20000068
 80001c4:	08008828 	.word	0x08008828

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <HAL_UART_RxCpltCallback>:
 *
 * @param huart	UART Handle.
 * @retval none
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, UART_Rx_data, UART_RX_BUFFER_SIZE);
 8000e68:	2210      	movs	r2, #16
 8000e6a:	4906      	ldr	r1, [pc, #24]	; (8000e84 <HAL_UART_RxCpltCallback+0x24>)
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <HAL_UART_RxCpltCallback+0x28>)
 8000e6e:	f004 fde5 	bl	8005a3c <HAL_UART_Receive_IT>
	HAL_UART_Transmit_IT(&huart2, UART_Tx_data, sizeof(UART_Tx_data));
 8000e72:	220c      	movs	r2, #12
 8000e74:	4905      	ldr	r1, [pc, #20]	; (8000e8c <HAL_UART_RxCpltCallback+0x2c>)
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <HAL_UART_RxCpltCallback+0x28>)
 8000e78:	f004 fd82 	bl	8005980 <HAL_UART_Transmit_IT>
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000260 	.word	0x20000260
 8000e88:	20000148 	.word	0x20000148
 8000e8c:	20000270 	.word	0x20000270

08000e90 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {}
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d108      	bne.n	8000ec6 <HAL_ADC_ConvCpltCallback+0x22>
	{
		adc1_value = HAL_ADC_GetValue(&hadc1);
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <HAL_ADC_ConvCpltCallback+0x44>)
 8000eb6:	f001 fd65 	bl	8002984 <HAL_ADC_GetValue>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_ADC_ConvCpltCallback+0x48>)
 8000ebe:	6013      	str	r3, [r2, #0]
		adc1_valid = 1;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
	}

	if (hadc == &hadc2)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <HAL_ADC_ConvCpltCallback+0x50>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d108      	bne.n	8000ee0 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		adc2_value = HAL_ADC_GetValue(&hadc2);
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <HAL_ADC_ConvCpltCallback+0x50>)
 8000ed0:	f001 fd58 	bl	8002984 <HAL_ADC_GetValue>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_ADC_ConvCpltCallback+0x54>)
 8000ed8:	6013      	str	r3, [r2, #0]
		adc2_valid = 1	;
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_ADC_ConvCpltCallback+0x58>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000080 	.word	0x20000080
 8000eec:	2000027c 	.word	0x2000027c
 8000ef0:	20000280 	.word	0x20000280
 8000ef4:	200000e4 	.word	0x200000e4
 8000ef8:	20000284 	.word	0x20000284
 8000efc:	20000288 	.word	0x20000288

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f001 f829 	bl	8001f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f8ab 	bl	8001064 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f0e:	f000 f8fa 	bl	8001106 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f12:	f000 fa53 	bl	80013bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f16:	f000 fa2b 	bl	8001370 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f1a:	f000 f9f9 	bl	8001310 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f1e:	f000 f91d 	bl	800115c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f22:	f000 f991 	bl	8001248 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  float throttle;
  float const throttleMax = 1;
 8000f26:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f2a:	617b      	str	r3, [r7, #20]
  float const throttleMin = 0.001;
 8000f2c:	4b3c      	ldr	r3, [pc, #240]	; (8001020 <main+0x120>)
 8000f2e:	613b      	str	r3, [r7, #16]

  float const steeringAngleMax = pi/6;
 8000f30:	4b3c      	ldr	r3, [pc, #240]	; (8001024 <main+0x124>)
 8000f32:	60fb      	str	r3, [r7, #12]
  float const steeringAngleMin = -pi/6;
 8000f34:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <main+0x128>)
 8000f36:	60bb      	str	r3, [r7, #8]


  HAL_UART_Receive_IT(&huart2, UART_Rx_data, UART_RX_BUFFER_SIZE);
 8000f38:	2210      	movs	r2, #16
 8000f3a:	493c      	ldr	r1, [pc, #240]	; (800102c <main+0x12c>)
 8000f3c:	483c      	ldr	r0, [pc, #240]	; (8001030 <main+0x130>)
 8000f3e:	f004 fd7d 	bl	8005a3c <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT(&huart2, UART_Tx_data, sizeof(UART_Tx_data));
 8000f42:	220c      	movs	r2, #12
 8000f44:	493b      	ldr	r1, [pc, #236]	; (8001034 <main+0x134>)
 8000f46:	483a      	ldr	r0, [pc, #232]	; (8001030 <main+0x130>)
 8000f48:	f004 fd1a 	bl	8005980 <HAL_UART_Transmit_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000f4c:	483a      	ldr	r0, [pc, #232]	; (8001038 <main+0x138>)
 8000f4e:	f001 fbeb 	bl	8002728 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8000f52:	483a      	ldr	r0, [pc, #232]	; (800103c <main+0x13c>)
 8000f54:	f001 fbe8 	bl	8002728 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (adc1_valid == 1)
 8000f58:	4b39      	ldr	r3, [pc, #228]	; (8001040 <main+0x140>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d11d      	bne.n	8000f9c <main+0x9c>
	  {
		  throttle = (float) adc1_value * (throttleMax - throttleMin)/4095 + throttleMin;
 8000f60:	4b38      	ldr	r3, [pc, #224]	; (8001044 <main+0x144>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	ee07 3a90 	vmov	s15, r3
 8000f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f6c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7c:	eddf 6a32 	vldr	s13, [pc, #200]	; 8001048 <main+0x148>
 8000f80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f84:	ed97 7a04 	vldr	s14, [r7, #16]
 8000f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8c:	edc7 7a01 	vstr	s15, [r7, #4]
		  adc1_valid = 0;
 8000f90:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <main+0x140>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);
 8000f96:	4828      	ldr	r0, [pc, #160]	; (8001038 <main+0x138>)
 8000f98:	f001 fbc6 	bl	8002728 <HAL_ADC_Start_IT>
	  }

	  if (adc2_valid == 1)
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <main+0x14c>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d126      	bne.n	8000ff2 <main+0xf2>
	  {
		  steerAngleMeas = (float) adc2_value*(steeringAngleMax - steeringAngleMin)/4095 + steeringAngleMin;
 8000fa4:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <main+0x150>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb0:	edd7 6a03 	vldr	s13, [r7, #12]
 8000fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc0:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001048 <main+0x148>
 8000fc4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fc8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <main+0x154>)
 8000fd2:	edc3 7a00 	vstr	s15, [r3]
		  SIM_set_steering_angle(UART_Tx_data, steerAngleMeas);
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <main+0x154>)
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe0:	4814      	ldr	r0, [pc, #80]	; (8001034 <main+0x134>)
 8000fe2:	f000 faa7 	bl	8001534 <SIM_set_steering_angle>

		  adc2_valid = 0;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	; (800104c <main+0x14c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc2);
 8000fec:	4813      	ldr	r0, [pc, #76]	; (800103c <main+0x13c>)
 8000fee:	f001 fb9b 	bl	8002728 <HAL_ADC_Start_IT>

	  }

	  calculateMotorTorqueRef();
 8000ff2:	f000 fd41 	bl	8001a78 <calculateMotorTorqueRef>
	  SIM_set_torques(UART_Tx_data, motorTorqueLeftRef, motorTorqueRightRef);
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <main+0x158>)
 8000ff8:	edd3 7a00 	vldr	s15, [r3]
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <main+0x15c>)
 8000ffe:	ed93 7a00 	vldr	s14, [r3]
 8001002:	eef0 0a47 	vmov.f32	s1, s14
 8001006:	eeb0 0a67 	vmov.f32	s0, s15
 800100a:	480a      	ldr	r0, [pc, #40]	; (8001034 <main+0x134>)
 800100c:	f000 fa52 	bl	80014b4 <SIM_set_torques>

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8001010:	2110      	movs	r1, #16
 8001012:	4813      	ldr	r0, [pc, #76]	; (8001060 <main+0x160>)
 8001014:	f003 f92c 	bl	8004270 <HAL_GPIO_TogglePin>
	  HAL_Delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f001 f81b 	bl	8002054 <HAL_Delay>
	  if (adc1_valid == 1)
 800101e:	e79b      	b.n	8000f58 <main+0x58>
 8001020:	3a83126f 	.word	0x3a83126f
 8001024:	3f060a8a 	.word	0x3f060a8a
 8001028:	bf060a8a 	.word	0xbf060a8a
 800102c:	20000260 	.word	0x20000260
 8001030:	20000148 	.word	0x20000148
 8001034:	20000270 	.word	0x20000270
 8001038:	20000080 	.word	0x20000080
 800103c:	200000e4 	.word	0x200000e4
 8001040:	20000280 	.word	0x20000280
 8001044:	2000027c 	.word	0x2000027c
 8001048:	457ff000 	.word	0x457ff000
 800104c:	20000288 	.word	0x20000288
 8001050:	20000284 	.word	0x20000284
 8001054:	20000290 	.word	0x20000290
 8001058:	200002bc 	.word	0x200002bc
 800105c:	200002c0 	.word	0x200002c0
 8001060:	48000400 	.word	0x48000400

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b096      	sub	sp, #88	; 0x58
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	2244      	movs	r2, #68	; 0x44
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f006 f884 	bl	8007180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001086:	f44f 7000 	mov.w	r0, #512	; 0x200
 800108a:	f003 f919 	bl	80042c0 <HAL_PWREx_ControlVoltageScaling>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001094:	f000 fd56 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001098:	2302      	movs	r3, #2
 800109a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a2:	2310      	movs	r3, #16
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010aa:	2302      	movs	r3, #2
 80010ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010b2:	230a      	movs	r3, #10
 80010b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010b6:	2307      	movs	r3, #7
 80010b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 f950 	bl	800436c <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010d2:	f000 fd37 	bl	8001b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010da:	2303      	movs	r3, #3
 80010dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	2104      	movs	r1, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fd18 	bl	8004b24 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010fa:	f000 fd23 	bl	8001b44 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3758      	adds	r7, #88	; 0x58
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b0a2      	sub	sp, #136	; 0x88
 800110a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2288      	movs	r2, #136	; 0x88
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f006 f834 	bl	8007180 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800111c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800111e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001122:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001124:	2302      	movs	r3, #2
 8001126:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800112c:	2308      	movs	r3, #8
 800112e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001130:	2307      	movs	r3, #7
 8001132:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001134:	2302      	movs	r3, #2
 8001136:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800113c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001140:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4618      	mov	r0, r3
 8001146:	f003 ff11 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001150:	f000 fcf8 	bl	8001b44 <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	3788      	adds	r7, #136	; 0x88
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800117e:	4b2f      	ldr	r3, [pc, #188]	; (800123c <MX_ADC1_Init+0xe0>)
 8001180:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <MX_ADC1_Init+0xe4>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_ADC1_Init+0xe0>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <MX_ADC1_Init+0xe0>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_ADC1_Init+0xe0>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <MX_ADC1_Init+0xe0>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <MX_ADC1_Init+0xe0>)
 800119e:	2204      	movs	r2, #4
 80011a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_ADC1_Init+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <MX_ADC1_Init+0xe0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <MX_ADC1_Init+0xe0>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_ADC1_Init+0xe0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_ADC1_Init+0xe0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_ADC1_Init+0xe0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_ADC1_Init+0xe0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_ADC1_Init+0xe0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_ADC1_Init+0xe0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011de:	4817      	ldr	r0, [pc, #92]	; (800123c <MX_ADC1_Init+0xe0>)
 80011e0:	f001 f952 	bl	8002488 <HAL_ADC_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011ea:	f000 fcab 	bl	8001b44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	4810      	ldr	r0, [pc, #64]	; (800123c <MX_ADC1_Init+0xe0>)
 80011fa:	f002 facf 	bl	800379c <HAL_ADCEx_MultiModeConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001204:	f000 fc9e 	bl	8001b44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_ADC1_Init+0xe8>)
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800120c:	2306      	movs	r3, #6
 800120e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001214:	237f      	movs	r3, #127	; 0x7f
 8001216:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001218:	2304      	movs	r3, #4
 800121a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_ADC1_Init+0xe0>)
 8001226:	f001 fde9 	bl	8002dfc <HAL_ADC_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001230:	f000 fc88 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	; 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000080 	.word	0x20000080
 8001240:	50040000 	.word	0x50040000
 8001244:	04300002 	.word	0x04300002

08001248 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <MX_ADC2_Init+0xbc>)
 8001260:	4a29      	ldr	r2, [pc, #164]	; (8001308 <MX_ADC2_Init+0xc0>)
 8001262:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_ADC2_Init+0xbc>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_ADC2_Init+0xbc>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <MX_ADC2_Init+0xbc>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <MX_ADC2_Init+0xbc>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_ADC2_Init+0xbc>)
 800127e:	2204      	movs	r2, #4
 8001280:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_ADC2_Init+0xbc>)
 8001284:	2200      	movs	r2, #0
 8001286:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_ADC2_Init+0xbc>)
 800128a:	2200      	movs	r2, #0
 800128c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_ADC2_Init+0xbc>)
 8001290:	2201      	movs	r2, #1
 8001292:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_ADC2_Init+0xbc>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <MX_ADC2_Init+0xbc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_ADC2_Init+0xbc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012a8:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_ADC2_Init+0xbc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_ADC2_Init+0xbc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_ADC2_Init+0xbc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_ADC2_Init+0xbc>)
 80012c0:	f001 f8e2 	bl	8002488 <HAL_ADC_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80012ca:	f000 fc3b 	bl	8001b44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_ADC2_Init+0xc4>)
 80012d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d2:	2306      	movs	r3, #6
 80012d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012da:	237f      	movs	r3, #127	; 0x7f
 80012dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012de:	2304      	movs	r3, #4
 80012e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_ADC2_Init+0xbc>)
 80012ec:	f001 fd86 	bl	8002dfc <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80012f6:	f000 fc25 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000e4 	.word	0x200000e4
 8001308:	50040100 	.word	0x50040100
 800130c:	08600004 	.word	0x08600004

08001310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <MX_USART2_UART_Init+0x5c>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_USART2_UART_Init+0x58>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_USART2_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_USART2_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_USART2_UART_Init+0x58>)
 8001354:	f004 fac6 	bl	80058e4 <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 fbf1 	bl	8001b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000148 	.word	0x20000148
 800136c:	40004400 	.word	0x40004400

08001370 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_DMA_Init+0x48>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <MX_DMA_Init+0x48>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6493      	str	r3, [r2, #72]	; 0x48
 8001382:	4b0d      	ldr	r3, [pc, #52]	; (80013b8 <MX_DMA_Init+0x48>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	2010      	movs	r0, #16
 8001394:	f002 fb8d 	bl	8003ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001398:	2010      	movs	r0, #16
 800139a:	f002 fba6 	bl	8003aea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2011      	movs	r0, #17
 80013a4:	f002 fb85 	bl	8003ab2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013a8:	2011      	movs	r0, #17
 80013aa:	f002 fb9e 	bl	8003aea <HAL_NVIC_EnableIRQ>

}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000

080013bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <MX_GPIO_Init+0xec>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	4a34      	ldr	r2, [pc, #208]	; (80014a8 <MX_GPIO_Init+0xec>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013de:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <MX_GPIO_Init+0xec>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ea:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_GPIO_Init+0xec>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	4a2e      	ldr	r2, [pc, #184]	; (80014a8 <MX_GPIO_Init+0xec>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f6:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MX_GPIO_Init+0xec>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_GPIO_Init+0xec>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <MX_GPIO_Init+0xec>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140e:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <MX_GPIO_Init+0xec>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_GPIO_Init+0xec>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <MX_GPIO_Init+0xec>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <MX_GPIO_Init+0xec>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2120      	movs	r1, #32
 8001436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143a:	f002 ff01 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2110      	movs	r1, #16
 8001442:	481a      	ldr	r0, [pc, #104]	; (80014ac <MX_GPIO_Init+0xf0>)
 8001444:	f002 fefc 	bl	8004240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001448:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800144e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <MX_GPIO_Init+0xf4>)
 8001460:	f002 fd44 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001464:	2320      	movs	r3, #32
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	4619      	mov	r1, r3
 800147a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147e:	f002 fd35 	bl	8003eec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001482:	2310      	movs	r3, #16
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_GPIO_Init+0xf0>)
 800149a:	f002 fd27 	bl	8003eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	; 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	48000400 	.word	0x48000400
 80014b0:	48000800 	.word	0x48000800

080014b4 <SIM_set_torques>:
 * @param	float torqueRight Reference torque for right wheel.
 *
 * 	@retval None
 */
void SIM_set_torques(uint8_t *Tx_data, float torqueLeft, float torqueRight)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80014c0:	edc7 0a01 	vstr	s1, [r7, #4]
	// bitmask for extracting 1 byte at the time
	uint8_t bitmask = 0xff;
 80014c4:	23ff      	movs	r3, #255	; 0xff
 80014c6:	76fb      	strb	r3, [r7, #27]

	// Turns the bits to uint32_t.
	uint32_t tempLeft = * (uint32_t *) &torqueLeft;
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	617b      	str	r3, [r7, #20]
	uint32_t tempRight = * (uint32_t *) &torqueRight;
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	613b      	str	r3, [r7, #16]

    // Puts the values into temp buffer.
	for (int i = 0; i < 4; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	e021      	b.n	8001520 <SIM_set_torques+0x6c>
	{
		*(Tx_data + i) 		= (uint8_t) (tempLeft >> (24 - 8*i)) & bitmask;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0303 	rsb	r3, r3, #3
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	b2d9      	uxtb	r1, r3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	4413      	add	r3, r2
 80014f2:	7efa      	ldrb	r2, [r7, #27]
 80014f4:	400a      	ands	r2, r1
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]
		*(Tx_data + 4 + i) 	= (uint8_t) (tempRight >> (24 - 8*i)) & bitmask;
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	f1c3 0303 	rsb	r3, r3, #3
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
 8001508:	b2d9      	uxtb	r1, r3
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	7efa      	ldrb	r2, [r7, #27]
 8001514:	400a      	ands	r2, r1
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3301      	adds	r3, #1
 800151e:	61fb      	str	r3, [r7, #28]
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	2b03      	cmp	r3, #3
 8001524:	ddda      	ble.n	80014dc <SIM_set_torques+0x28>
	}

}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	3724      	adds	r7, #36	; 0x24
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <SIM_set_steering_angle>:
 * @param	float steeringAngle steering angle.
 *
 * 	@retval None
 */
void SIM_set_steering_angle(uint8_t *Tx_data, float steeringAngle)
{
 8001534:	b480      	push	{r7}
 8001536:	b087      	sub	sp, #28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	ed87 0a00 	vstr	s0, [r7]

	// bitmask for extracting 1 byte at the time
	uint8_t bitmask = 0xff;
 8001540:	23ff      	movs	r3, #255	; 0xff
 8001542:	74fb      	strb	r3, [r7, #19]

	// Turns the bits to uint32_t.
	uint32_t tempSteer = * (uint32_t *) &steeringAngle;
 8001544:	463b      	mov	r3, r7
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 4; i++)
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e012      	b.n	8001576 <SIM_set_steering_angle+0x42>
	{
		*(Tx_data + 8 + i) 	= (uint8_t) (tempSteer >> (24 - 8*i)) & bitmask;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	f1c3 0303 	rsb	r3, r3, #3
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	fa22 f303 	lsr.w	r3, r2, r3
 800155e:	b2d9      	uxtb	r1, r3
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3308      	adds	r3, #8
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	4413      	add	r3, r2
 8001568:	7cfa      	ldrb	r2, [r7, #19]
 800156a:	400a      	ands	r2, r1
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b03      	cmp	r3, #3
 800157a:	dde9      	ble.n	8001550 <SIM_set_steering_angle+0x1c>
	}

}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	0000      	movs	r0, r0
 800158c:	0000      	movs	r0, r0
	...

08001590 <yawRateController>:
		minMotorTorqueRight = -MaxBrakingPower / angVelMotorRight;
	}
}

void yawRateController()
{
 8001590:	b5b0      	push	{r4, r5, r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	float yawRateRef = velLong * tan(steerAngleMeas) / WheelBase;
 8001596:	4b36      	ldr	r3, [pc, #216]	; (8001670 <yawRateController+0xe0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ff78 	bl	8000490 <__aeabi_f2d>
 80015a0:	4604      	mov	r4, r0
 80015a2:	460d      	mov	r5, r1
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <yawRateController+0xe4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff71 	bl	8000490 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	ec43 2b10 	vmov	d0, r2, r3
 80015b6:	f005 fe5f 	bl	8007278 <tan>
 80015ba:	ec53 2b10 	vmov	r2, r3, d0
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7fe ffbd 	bl	8000540 <__aeabi_dmul>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4610      	mov	r0, r2
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d6:	f7ff f8dd 	bl	8000794 <__aeabi_ddiv>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4610      	mov	r0, r2
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fa6f 	bl	8000ac4 <__aeabi_d2f>
 80015e6:	4603      	mov	r3, r0
 80015e8:	607b      	str	r3, [r7, #4]
	float error = yawTorqueRef - yawRate;
 80015ea:	4b23      	ldr	r3, [pc, #140]	; (8001678 <yawRateController+0xe8>)
 80015ec:	ed93 7a00 	vldr	s14, [r3]
 80015f0:	4b22      	ldr	r3, [pc, #136]	; (800167c <yawRateController+0xec>)
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fa:	edc7 7a00 	vstr	s15, [r7]

	// PI controller in incremental form (aka "velocity form")
	yawTorqueRef = previousYawTorqueRef + Kp*(error - previousError) + Ki*Ts*error;
 80015fe:	4b20      	ldr	r3, [pc, #128]	; (8001680 <yawRateController+0xf0>)
 8001600:	edd3 7a00 	vldr	s15, [r3]
 8001604:	ed97 7a00 	vldr	s14, [r7]
 8001608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001684 <yawRateController+0xf4>
 8001610:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <yawRateController+0xf8>)
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161e:	ee17 0a90 	vmov	r0, s15
 8001622:	f7fe ff35 	bl	8000490 <__aeabi_f2d>
 8001626:	4604      	mov	r4, r0
 8001628:	460d      	mov	r5, r1
 800162a:	6838      	ldr	r0, [r7, #0]
 800162c:	f7fe ff30 	bl	8000490 <__aeabi_f2d>
 8001630:	a30d      	add	r3, pc, #52	; (adr r3, 8001668 <yawRateController+0xd8>)
 8001632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001636:	f7fe ff83 	bl	8000540 <__aeabi_dmul>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4620      	mov	r0, r4
 8001640:	4629      	mov	r1, r5
 8001642:	f7fe fdc7 	bl	80001d4 <__adddf3>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f7ff fa39 	bl	8000ac4 <__aeabi_d2f>
 8001652:	4603      	mov	r3, r0
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <yawRateController+0xe8>)
 8001656:	6013      	str	r3, [r2, #0]
	previousError = error;
 8001658:	4a09      	ldr	r2, [pc, #36]	; (8001680 <yawRateController+0xf0>)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	6013      	str	r3, [r2, #0]
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bdb0      	pop	{r4, r5, r7, pc}
 8001666:	bf00      	nop
 8001668:	cccccccd 	.word	0xcccccccd
 800166c:	3ffccccc 	.word	0x3ffccccc
 8001670:	2000028c 	.word	0x2000028c
 8001674:	20000290 	.word	0x20000290
 8001678:	200002ac 	.word	0x200002ac
 800167c:	20000294 	.word	0x20000294
 8001680:	200002b4 	.word	0x200002b4
 8001684:	442f0000 	.word	0x442f0000
 8001688:	200002b0 	.word	0x200002b0
 800168c:	00000000 	.word	0x00000000

08001690 <torqueVectoring>:

void torqueVectoring()
{
 8001690:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
	// Determine differential mode torque
	float torqueDM = WheelRadiusLoaded * yawTorqueRef / (GearRatio * TrackWidth);
 8001698:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <torqueVectoring+0x188>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fef7 	bl	8000490 <__aeabi_f2d>
 80016a2:	a35b      	add	r3, pc, #364	; (adr r3, 8001810 <torqueVectoring+0x180>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ff4a 	bl	8000540 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b58      	ldr	r3, [pc, #352]	; (800181c <torqueVectoring+0x18c>)
 80016ba:	f7ff f86b 	bl	8000794 <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f9fd 	bl	8000ac4 <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	607b      	str	r3, [r7, #4]

	motorTorqueLeftRef = torqueCM + torqueDM; // NOTE: This assumes that the yaw angle is defined in a clockwise sense; otherwise, flip the signs
 80016ce:	4b54      	ldr	r3, [pc, #336]	; (8001820 <torqueVectoring+0x190>)
 80016d0:	ed93 7a00 	vldr	s14, [r3]
 80016d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80016d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016dc:	4b51      	ldr	r3, [pc, #324]	; (8001824 <torqueVectoring+0x194>)
 80016de:	edc3 7a00 	vstr	s15, [r3]
	motorTorqueRightRef = torqueCM - torqueDM;
 80016e2:	4b4f      	ldr	r3, [pc, #316]	; (8001820 <torqueVectoring+0x190>)
 80016e4:	ed93 7a00 	vldr	s14, [r3]
 80016e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f0:	4b4d      	ldr	r3, [pc, #308]	; (8001828 <torqueVectoring+0x198>)
 80016f2:	edc3 7a00 	vstr	s15, [r3]

	// Check for motor torque limits and saturate the signals
	motorTorqueLeftRef = fmin(maxMotorTorqueLeft, fmax(motorTorqueLeftRef, minMotorTorqueLeft));
 80016f6:	4b4d      	ldr	r3, [pc, #308]	; (800182c <torqueVectoring+0x19c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe fec8 	bl	8000490 <__aeabi_f2d>
 8001700:	4604      	mov	r4, r0
 8001702:	460d      	mov	r5, r1
 8001704:	4b47      	ldr	r3, [pc, #284]	; (8001824 <torqueVectoring+0x194>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fec1 	bl	8000490 <__aeabi_f2d>
 800170e:	4680      	mov	r8, r0
 8001710:	4689      	mov	r9, r1
 8001712:	4b47      	ldr	r3, [pc, #284]	; (8001830 <torqueVectoring+0x1a0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe feba 	bl	8000490 <__aeabi_f2d>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	ec43 2b11 	vmov	d1, r2, r3
 8001724:	ec49 8b10 	vmov	d0, r8, r9
 8001728:	f005 fde5 	bl	80072f6 <fmax>
 800172c:	eeb0 7a40 	vmov.f32	s14, s0
 8001730:	eef0 7a60 	vmov.f32	s15, s1
 8001734:	eeb0 1a47 	vmov.f32	s2, s14
 8001738:	eef0 1a67 	vmov.f32	s3, s15
 800173c:	ec45 4b10 	vmov	d0, r4, r5
 8001740:	f005 fe00 	bl	8007344 <fmin>
 8001744:	ec53 2b10 	vmov	r2, r3, d0
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f9ba 	bl	8000ac4 <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a34      	ldr	r2, [pc, #208]	; (8001824 <torqueVectoring+0x194>)
 8001754:	6013      	str	r3, [r2, #0]
	motorTorqueRightRef = fmin(maxMotorTorqueRight, fmax(motorTorqueRightRef, minMotorTorqueRight));
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <torqueVectoring+0x1a4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fe98 	bl	8000490 <__aeabi_f2d>
 8001760:	4604      	mov	r4, r0
 8001762:	460d      	mov	r5, r1
 8001764:	4b30      	ldr	r3, [pc, #192]	; (8001828 <torqueVectoring+0x198>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fe91 	bl	8000490 <__aeabi_f2d>
 800176e:	4680      	mov	r8, r0
 8001770:	4689      	mov	r9, r1
 8001772:	4b31      	ldr	r3, [pc, #196]	; (8001838 <torqueVectoring+0x1a8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fe8a 	bl	8000490 <__aeabi_f2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	ec43 2b11 	vmov	d1, r2, r3
 8001784:	ec49 8b10 	vmov	d0, r8, r9
 8001788:	f005 fdb5 	bl	80072f6 <fmax>
 800178c:	eeb0 7a40 	vmov.f32	s14, s0
 8001790:	eef0 7a60 	vmov.f32	s15, s1
 8001794:	eeb0 1a47 	vmov.f32	s2, s14
 8001798:	eef0 1a67 	vmov.f32	s3, s15
 800179c:	ec45 4b10 	vmov	d0, r4, r5
 80017a0:	f005 fdd0 	bl	8007344 <fmin>
 80017a4:	ec53 2b10 	vmov	r2, r3, d0
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f98a 	bl	8000ac4 <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <torqueVectoring+0x198>)
 80017b4:	6013      	str	r3, [r2, #0]

	// Report the saturated value back to the yaw rate PI as the previous output, which should prevent integrator windup since it's in incremental form
	float saturatedDM = (motorTorqueLeftRef - motorTorqueRightRef) / 2; // Again, flip the signs here if using CCW yaw
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <torqueVectoring+0x194>)
 80017b8:	ed93 7a00 	vldr	s14, [r3]
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <torqueVectoring+0x198>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80017ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ce:	edc7 7a00 	vstr	s15, [r7]
	previousYawTorqueRef = saturatedDM * GearRatio * TrackWidth / WheelRadiusLoaded;
 80017d2:	6838      	ldr	r0, [r7, #0]
 80017d4:	f7fe fe5c 	bl	8000490 <__aeabi_f2d>
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <torqueVectoring+0x18c>)
 80017de:	f7fe feaf 	bl	8000540 <__aeabi_dmul>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	a309      	add	r3, pc, #36	; (adr r3, 8001810 <torqueVectoring+0x180>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe ffd0 	bl	8000794 <__aeabi_ddiv>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff f962 	bl	8000ac4 <__aeabi_d2f>
 8001800:	4603      	mov	r3, r0
 8001802:	4a0e      	ldr	r2, [pc, #56]	; (800183c <torqueVectoring+0x1ac>)
 8001804:	6013      	str	r3, [r2, #0]
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001810:	1eb851ec 	.word	0x1eb851ec
 8001814:	3fd1eb85 	.word	0x3fd1eb85
 8001818:	200002ac 	.word	0x200002ac
 800181c:	401c0000 	.word	0x401c0000
 8001820:	200002b8 	.word	0x200002b8
 8001824:	200002bc 	.word	0x200002bc
 8001828:	200002c0 	.word	0x200002c0
 800182c:	20000000 	.word	0x20000000
 8001830:	200002c4 	.word	0x200002c4
 8001834:	20000004 	.word	0x20000004
 8001838:	200002c8 	.word	0x200002c8
 800183c:	200002b0 	.word	0x200002b0

08001840 <antiSpin>:

void antiSpin()
{
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
	// This code aims to limit the slip ratios below about 0.1 in absolute value to prevent wheel spin and loss of grip

	if (velLong > MinVelLong){
 8001846:	4b86      	ldr	r3, [pc, #536]	; (8001a60 <antiSpin+0x220>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe20 	bl	8000490 <__aeabi_f2d>
 8001850:	a37b      	add	r3, pc, #492	; (adr r3, 8001a40 <antiSpin+0x200>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7ff f903 	bl	8000a60 <__aeabi_dcmpgt>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d100      	bne.n	8001862 <antiSpin+0x22>
	// but at least in the simulations it seems fine to keep integrating when the anti-spin kicks in.
	// Change this if necessary, but be aware it could cause unwanted behaviour since the anti-spin can limit the output quite aggressively.

	// Update: New simulation indicates that it might be benificial to do the recalculation here after all. Best to try both ways.
	// To change, move the last two lines from torqueVectoring() here.
}
 8001860:	e0e9      	b.n	8001a36 <antiSpin+0x1f6>
		float slipRatioLeft = (angVelWheelLeft * WheelRadiusEffective - velLong) / velLong;
 8001862:	4b80      	ldr	r3, [pc, #512]	; (8001a64 <antiSpin+0x224>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe12 	bl	8000490 <__aeabi_f2d>
 800186c:	a376      	add	r3, pc, #472	; (adr r3, 8001a48 <antiSpin+0x208>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fe65 	bl	8000540 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	4b78      	ldr	r3, [pc, #480]	; (8001a60 <antiSpin+0x220>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7fe fe04 	bl	8000490 <__aeabi_f2d>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fc9e 	bl	80001d0 <__aeabi_dsub>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4614      	mov	r4, r2
 800189a:	461d      	mov	r5, r3
 800189c:	4b70      	ldr	r3, [pc, #448]	; (8001a60 <antiSpin+0x220>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fdf5 	bl	8000490 <__aeabi_f2d>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe ff71 	bl	8000794 <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f7ff f903 	bl	8000ac4 <__aeabi_d2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	60fb      	str	r3, [r7, #12]
		float slipRatioRight = (angVelWheelRight * WheelRadiusEffective - velLong) / velLong;
 80018c2:	4b69      	ldr	r3, [pc, #420]	; (8001a68 <antiSpin+0x228>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fde2 	bl	8000490 <__aeabi_f2d>
 80018cc:	a35e      	add	r3, pc, #376	; (adr r3, 8001a48 <antiSpin+0x208>)
 80018ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d2:	f7fe fe35 	bl	8000540 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4614      	mov	r4, r2
 80018dc:	461d      	mov	r5, r3
 80018de:	4b60      	ldr	r3, [pc, #384]	; (8001a60 <antiSpin+0x220>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fdd4 	bl	8000490 <__aeabi_f2d>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe fc6e 	bl	80001d0 <__aeabi_dsub>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4614      	mov	r4, r2
 80018fa:	461d      	mov	r5, r3
 80018fc:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <antiSpin+0x220>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fdc5 	bl	8000490 <__aeabi_f2d>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f7fe ff41 	bl	8000794 <__aeabi_ddiv>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f8d3 	bl	8000ac4 <__aeabi_d2f>
 800191e:	4603      	mov	r3, r0
 8001920:	60bb      	str	r3, [r7, #8]
		float limitFractionLeft = exp(-B_lambda * (fabs(slipRatioLeft) - A_lambda));
 8001922:	edd7 7a03 	vldr	s15, [r7, #12]
 8001926:	eef0 7ae7 	vabs.f32	s15, s15
 800192a:	ee17 0a90 	vmov	r0, s15
 800192e:	f7fe fdaf 	bl	8000490 <__aeabi_f2d>
 8001932:	a347      	add	r3, pc, #284	; (adr r3, 8001a50 <antiSpin+0x210>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7fe fc4a 	bl	80001d0 <__aeabi_dsub>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b48      	ldr	r3, [pc, #288]	; (8001a6c <antiSpin+0x22c>)
 800194a:	f7fe fdf9 	bl	8000540 <__aeabi_dmul>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	ec43 2b17 	vmov	d7, r2, r3
 8001956:	eeb0 0a47 	vmov.f32	s0, s14
 800195a:	eef0 0a67 	vmov.f32	s1, s15
 800195e:	f005 fc43 	bl	80071e8 <exp>
 8001962:	ec53 2b10 	vmov	r2, r3, d0
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f7ff f8ab 	bl	8000ac4 <__aeabi_d2f>
 800196e:	4603      	mov	r3, r0
 8001970:	607b      	str	r3, [r7, #4]
		limitFractionLeft = fmin(limitFractionLeft, 1);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7fe fd8c 	bl	8000490 <__aeabi_f2d>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001a58 <antiSpin+0x218>
 8001980:	ec43 2b10 	vmov	d0, r2, r3
 8001984:	f005 fcde 	bl	8007344 <fmin>
 8001988:	ec53 2b10 	vmov	r2, r3, d0
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff f898 	bl	8000ac4 <__aeabi_d2f>
 8001994:	4603      	mov	r3, r0
 8001996:	607b      	str	r3, [r7, #4]
		float limitFractionRight = exp(-B_lambda * (fabs(slipRatioRight) - A_lambda));
 8001998:	edd7 7a02 	vldr	s15, [r7, #8]
 800199c:	eef0 7ae7 	vabs.f32	s15, s15
 80019a0:	ee17 0a90 	vmov	r0, s15
 80019a4:	f7fe fd74 	bl	8000490 <__aeabi_f2d>
 80019a8:	a329      	add	r3, pc, #164	; (adr r3, 8001a50 <antiSpin+0x210>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	f7fe fc0f 	bl	80001d0 <__aeabi_dsub>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <antiSpin+0x22c>)
 80019c0:	f7fe fdbe 	bl	8000540 <__aeabi_dmul>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ec43 2b17 	vmov	d7, r2, r3
 80019cc:	eeb0 0a47 	vmov.f32	s0, s14
 80019d0:	eef0 0a67 	vmov.f32	s1, s15
 80019d4:	f005 fc08 	bl	80071e8 <exp>
 80019d8:	ec53 2b10 	vmov	r2, r3, d0
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f870 	bl	8000ac4 <__aeabi_d2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	603b      	str	r3, [r7, #0]
		limitFractionRight = fmin(limitFractionRight, 1);
 80019e8:	6838      	ldr	r0, [r7, #0]
 80019ea:	f7fe fd51 	bl	8000490 <__aeabi_f2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8001a58 <antiSpin+0x218>
 80019f6:	ec43 2b10 	vmov	d0, r2, r3
 80019fa:	f005 fca3 	bl	8007344 <fmin>
 80019fe:	ec53 2b10 	vmov	r2, r3, d0
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7ff f85d 	bl	8000ac4 <__aeabi_d2f>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	603b      	str	r3, [r7, #0]
		motorTorqueLeftRef = limitFractionLeft * motorTorqueLeftRef;
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <antiSpin+0x230>)
 8001a10:	ed93 7a00 	vldr	s14, [r3]
 8001a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <antiSpin+0x230>)
 8001a1e:	edc3 7a00 	vstr	s15, [r3]
		motorTorqueRightRef = limitFractionRight * motorTorqueRightRef;
 8001a22:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <antiSpin+0x234>)
 8001a24:	ed93 7a00 	vldr	s14, [r3]
 8001a28:	edd7 7a00 	vldr	s15, [r7]
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <antiSpin+0x234>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]
}
 8001a36:	bf00      	nop
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	9999999a 	.word	0x9999999a
 8001a44:	3fa99999 	.word	0x3fa99999
 8001a48:	1eb851ec 	.word	0x1eb851ec
 8001a4c:	3fd1eb85 	.word	0x3fd1eb85
 8001a50:	eb851eb8 	.word	0xeb851eb8
 8001a54:	3faeb851 	.word	0x3faeb851
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	3ff00000 	.word	0x3ff00000
 8001a60:	2000028c 	.word	0x2000028c
 8001a64:	200002a0 	.word	0x200002a0
 8001a68:	200002a4 	.word	0x200002a4
 8001a6c:	c0340000 	.word	0xc0340000
 8001a70:	200002bc 	.word	0x200002bc
 8001a74:	200002c0 	.word	0x200002c0

08001a78 <calculateMotorTorqueRef>:

void calculateMotorTorqueRef()
{
 8001a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
	// Calculates reference torque values to send to the motor controller and stores them in the global variables motorTorqueLeftRef and motorTorqueRightRef

	angVelMotorLeft = angVelWheelLeft * GearRatio;
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <calculateMotorTorqueRef+0xb0>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8e:	4b27      	ldr	r3, [pc, #156]	; (8001b2c <calculateMotorTorqueRef+0xb4>)
 8001a90:	edc3 7a00 	vstr	s15, [r3]
	angVelMotorRight = angVelWheelRight * GearRatio;
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <calculateMotorTorqueRef+0xb8>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <calculateMotorTorqueRef+0xbc>)
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
	*/

	//getMotorTorqueLimits();

	// Determine common mode torque
	float torqueCM = accInput * MaxCMTorqueFraction * fmin(maxMotorTorqueLeft, maxMotorTorqueRight);
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <calculateMotorTorqueRef+0xc0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fcef 	bl	8000490 <__aeabi_f2d>
 8001ab2:	a31b      	add	r3, pc, #108	; (adr r3, 8001b20 <calculateMotorTorqueRef+0xa8>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fd42 	bl	8000540 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <calculateMotorTorqueRef+0xc4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fce1 	bl	8000490 <__aeabi_f2d>
 8001ace:	4680      	mov	r8, r0
 8001ad0:	4689      	mov	r9, r1
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <calculateMotorTorqueRef+0xc8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fcda 	bl	8000490 <__aeabi_f2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	ec43 2b11 	vmov	d1, r2, r3
 8001ae4:	ec49 8b10 	vmov	d0, r8, r9
 8001ae8:	f005 fc2c 	bl	8007344 <fmin>
 8001aec:	ec53 2b10 	vmov	r2, r3, d0
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fd24 	bl	8000540 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7fe ffe0 	bl	8000ac4 <__aeabi_d2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	607b      	str	r3, [r7, #4]

	yawRateController();
 8001b08:	f7ff fd42 	bl	8001590 <yawRateController>
	torqueVectoring();
 8001b0c:	f7ff fdc0 	bl	8001690 <torqueVectoring>
	antiSpin();
 8001b10:	f7ff fe96 	bl	8001840 <antiSpin>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b1e:	bf00      	nop
 8001b20:	9999999a 	.word	0x9999999a
 8001b24:	3fe99999 	.word	0x3fe99999
 8001b28:	200002a0 	.word	0x200002a0
 8001b2c:	20000298 	.word	0x20000298
 8001b30:	200002a4 	.word	0x200002a4
 8001b34:	2000029c 	.word	0x2000029c
 8001b38:	200002a8 	.word	0x200002a8
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004

08001b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <Error_Handler+0x8>
	...

08001b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_MspInit+0x44>)
 8001b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	; (8001b94 <HAL_MspInit+0x44>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6613      	str	r3, [r2, #96]	; 0x60
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_MspInit+0x44>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_MspInit+0x44>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <HAL_MspInit+0x44>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_MspInit+0x44>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	; 0x30
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3b      	ldr	r2, [pc, #236]	; (8001ca4 <HAL_ADC_MspInit+0x10c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d135      	bne.n	8001c26 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001bba:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <HAL_ADC_MspInit+0x110>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	4a39      	ldr	r2, [pc, #228]	; (8001ca8 <HAL_ADC_MspInit+0x110>)
 8001bc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001bc4:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <HAL_ADC_MspInit+0x110>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10b      	bne.n	8001be4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001bcc:	4b37      	ldr	r3, [pc, #220]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	4a36      	ldr	r2, [pc, #216]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001bd2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd8:	4b34      	ldr	r3, [pc, #208]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be8:	4a30      	ldr	r2, [pc, #192]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c00:	230b      	movs	r3, #11
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	f107 031c 	add.w	r3, r7, #28
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4828      	ldr	r0, [pc, #160]	; (8001cb0 <HAL_ADC_MspInit+0x118>)
 8001c10:	f002 f96c 	bl	8003eec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2012      	movs	r0, #18
 8001c1a:	f001 ff4a 	bl	8003ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c1e:	2012      	movs	r0, #18
 8001c20:	f001 ff63 	bl	8003aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001c24:	e039      	b.n	8001c9a <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a22      	ldr	r2, [pc, #136]	; (8001cb4 <HAL_ADC_MspInit+0x11c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d134      	bne.n	8001c9a <HAL_ADC_MspInit+0x102>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001c30:	4b1d      	ldr	r3, [pc, #116]	; (8001ca8 <HAL_ADC_MspInit+0x110>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_ADC_MspInit+0x110>)
 8001c38:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ca8 <HAL_ADC_MspInit+0x110>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10b      	bne.n	8001c5a <HAL_ADC_MspInit+0xc2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c46:	4a19      	ldr	r2, [pc, #100]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001c48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c4e:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	4b14      	ldr	r3, [pc, #80]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	4a13      	ldr	r2, [pc, #76]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_ADC_MspInit+0x114>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c72:	2302      	movs	r3, #2
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c76:	230b      	movs	r3, #11
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	480a      	ldr	r0, [pc, #40]	; (8001cb0 <HAL_ADC_MspInit+0x118>)
 8001c86:	f002 f931 	bl	8003eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2012      	movs	r0, #18
 8001c90:	f001 ff0f 	bl	8003ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c94:	2012      	movs	r0, #18
 8001c96:	f001 ff28 	bl	8003aea <HAL_NVIC_EnableIRQ>
}
 8001c9a:	bf00      	nop
 8001c9c:	3730      	adds	r7, #48	; 0x30
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	50040000 	.word	0x50040000
 8001ca8:	200002cc 	.word	0x200002cc
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	50040100 	.word	0x50040100

08001cb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0ac      	sub	sp, #176	; 0xb0
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2288      	movs	r2, #136	; 0x88
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f005 fa51 	bl	8007180 <memset>
  if(huart->Instance==USART2)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a4f      	ldr	r2, [pc, #316]	; (8001e20 <HAL_UART_MspInit+0x168>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	f040 8096 	bne.w	8001e16 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cea:	2302      	movs	r3, #2
 8001cec:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 f938 	bl	8004f6c <HAL_RCCEx_PeriphCLKConfig>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001d02:	f7ff ff1f 	bl	8001b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_UART_MspInit+0x16c>)
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	4a46      	ldr	r2, [pc, #280]	; (8001e24 <HAL_UART_MspInit+0x16c>)
 8001d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d10:	6593      	str	r3, [r2, #88]	; 0x58
 8001d12:	4b44      	ldr	r3, [pc, #272]	; (8001e24 <HAL_UART_MspInit+0x16c>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_UART_MspInit+0x16c>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <HAL_UART_MspInit+0x16c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2a:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_UART_MspInit+0x16c>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d36:	230c      	movs	r3, #12
 8001d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d4e:	2307      	movs	r3, #7
 8001d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5e:	f002 f8c5 	bl	8003eec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001d62:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d64:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <HAL_UART_MspInit+0x174>)
 8001d66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d74:	4b2c      	ldr	r3, [pc, #176]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7a:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d80:	4b29      	ldr	r3, [pc, #164]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d86:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d98:	4823      	ldr	r0, [pc, #140]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001d9a:	f001 fec1 	bl	8003b20 <HAL_DMA_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8001da4:	f7ff fece 	bl	8001b44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a1f      	ldr	r2, [pc, #124]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001dac:	675a      	str	r2, [r3, #116]	; 0x74
 8001dae:	4a1e      	ldr	r2, [pc, #120]	; (8001e28 <HAL_UART_MspInit+0x170>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001db4:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001db6:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <HAL_UART_MspInit+0x17c>)
 8001db8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001dba:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dc0:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dcc:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001dce:	2280      	movs	r2, #128	; 0x80
 8001dd0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001dea:	4811      	ldr	r0, [pc, #68]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001dec:	f001 fe98 	bl	8003b20 <HAL_DMA_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8001df6:	f7ff fea5 	bl	8001b44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001dfe:	671a      	str	r2, [r3, #112]	; 0x70
 8001e00:	4a0b      	ldr	r2, [pc, #44]	; (8001e30 <HAL_UART_MspInit+0x178>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2026      	movs	r0, #38	; 0x26
 8001e0c:	f001 fe51 	bl	8003ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e10:	2026      	movs	r0, #38	; 0x26
 8001e12:	f001 fe6a 	bl	8003aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	37b0      	adds	r7, #176	; 0xb0
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40004400 	.word	0x40004400
 8001e24:	40021000 	.word	0x40021000
 8001e28:	200001d0 	.word	0x200001d0
 8001e2c:	4002006c 	.word	0x4002006c
 8001e30:	20000218 	.word	0x20000218
 8001e34:	40020080 	.word	0x40020080

08001e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e3c:	e7fe      	b.n	8001e3c <NMI_Handler+0x4>

08001e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e42:	e7fe      	b.n	8001e42 <HardFault_Handler+0x4>

08001e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <MemManage_Handler+0x4>

08001e4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <BusFault_Handler+0x4>

08001e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <UsageFault_Handler+0x4>

08001e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e84:	f000 f8c6 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <DMA1_Channel6_IRQHandler+0x10>)
 8001e92:	f001 ff7c 	bl	8003d8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200001d0 	.word	0x200001d0

08001ea0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA1_Channel7_IRQHandler+0x10>)
 8001ea6:	f001 ff72 	bl	8003d8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000218 	.word	0x20000218

08001eb4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <ADC1_2_IRQHandler+0x14>)
 8001eba:	f000 fd71 	bl	80029a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001ebe:	4803      	ldr	r0, [pc, #12]	; (8001ecc <ADC1_2_IRQHandler+0x18>)
 8001ec0:	f000 fd6e 	bl	80029a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000080 	.word	0x20000080
 8001ecc:	200000e4 	.word	0x200000e4

08001ed0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ed4:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <USART2_IRQHandler+0x10>)
 8001ed6:	f003 fdfd 	bl	8005ad4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000148 	.word	0x20000148

08001ee4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <SystemInit+0x20>)
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <SystemInit+0x20>)
 8001ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f0c:	f7ff ffea 	bl	8001ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f10:	480c      	ldr	r0, [pc, #48]	; (8001f44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f12:	490d      	ldr	r1, [pc, #52]	; (8001f48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f14:	4a0d      	ldr	r2, [pc, #52]	; (8001f4c <LoopForever+0xe>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f18:	e002      	b.n	8001f20 <LoopCopyDataInit>

08001f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1e:	3304      	adds	r3, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f24:	d3f9      	bcc.n	8001f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f28:	4c0a      	ldr	r4, [pc, #40]	; (8001f54 <LoopForever+0x16>)
  movs r3, #0
 8001f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f2c:	e001      	b.n	8001f32 <LoopFillZerobss>

08001f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f30:	3204      	adds	r2, #4

08001f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f34:	d3fb      	bcc.n	8001f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f36:	f005 f931 	bl	800719c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f3a:	f7fe ffe1 	bl	8000f00 <main>

08001f3e <LoopForever>:

LoopForever:
    b LoopForever
 8001f3e:	e7fe      	b.n	8001f3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f48:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001f4c:	08008aa0 	.word	0x08008aa0
  ldr r2, =_sbss
 8001f50:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001f54:	2000040c 	.word	0x2000040c

08001f58 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f58:	e7fe      	b.n	8001f58 <ADC3_IRQHandler>
	...

08001f5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_Init+0x3c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <HAL_Init+0x3c>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f72:	2003      	movs	r0, #3
 8001f74:	f001 fd92 	bl	8003a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 f80f 	bl	8001f9c <HAL_InitTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	71fb      	strb	r3, [r7, #7]
 8001f88:	e001      	b.n	8001f8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f8a:	f7ff fde1 	bl	8001b50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40022000 	.word	0x40022000

08001f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_InitTick+0x6c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fb0:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_InitTick+0x70>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_InitTick+0x6c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 fd9d 	bl	8003b06 <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b0f      	cmp	r3, #15
 8001fd6:	d809      	bhi.n	8001fec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f001 fd67 	bl	8003ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <HAL_InitTick+0x74>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e007      	b.n	8001ffc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e004      	b.n	8001ffc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	73fb      	strb	r3, [r7, #15]
 8001ff6:	e001      	b.n	8001ffc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000010 	.word	0x20000010
 800200c:	20000008 	.word	0x20000008
 8002010:	2000000c 	.word	0x2000000c

08002014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x20>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x24>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_IncTick+0x24>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000010 	.word	0x20000010
 8002038:	200002d0 	.word	0x200002d0

0800203c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return uwTick;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_GetTick+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	200002d0 	.word	0x200002d0

08002054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff ffee 	bl	800203c <HAL_GetTick>
 8002060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d005      	beq.n	800207a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_Delay+0x44>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800207a:	bf00      	nop
 800207c:	f7ff ffde 	bl	800203c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f7      	bhi.n	800207c <HAL_Delay+0x28>
  {
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000010 	.word	0x20000010

0800209c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	609a      	str	r2, [r3, #8]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	609a      	str	r2, [r3, #8]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	3360      	adds	r3, #96	; 0x60
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <LL_ADC_SetOffset+0x44>)
 8002126:	4013      	ands	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	4313      	orrs	r3, r2
 8002134:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800213c:	bf00      	nop
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	03fff000 	.word	0x03fff000

0800214c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3360      	adds	r3, #96	; 0x60
 800215a:	461a      	mov	r2, r3
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3360      	adds	r3, #96	; 0x60
 8002188:	461a      	mov	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	431a      	orrs	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3330      	adds	r3, #48	; 0x30
 80021e4:	461a      	mov	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	4413      	add	r3, r2
 80021f2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 031f 	and.w	r3, r3, #31
 80021fe:	211f      	movs	r1, #31
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	f003 011f 	and.w	r1, r3, #31
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 031f 	and.w	r3, r3, #31
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	431a      	orrs	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002220:	bf00      	nop
 8002222:	371c      	adds	r7, #28
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002238:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002252:	b480      	push	{r7}
 8002254:	b087      	sub	sp, #28
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3314      	adds	r3, #20
 8002262:	461a      	mov	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	0e5b      	lsrs	r3, r3, #25
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	4413      	add	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	0d1b      	lsrs	r3, r3, #20
 800227a:	f003 031f 	and.w	r3, r3, #31
 800227e:	2107      	movs	r1, #7
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	0d1b      	lsrs	r3, r3, #20
 800228c:	f003 031f 	and.w	r3, r3, #31
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	fa01 f303 	lsl.w	r3, r1, r3
 8002296:	431a      	orrs	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800229c:	bf00      	nop
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c0:	43db      	mvns	r3, r3
 80022c2:	401a      	ands	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0318 	and.w	r3, r3, #24
 80022ca:	4908      	ldr	r1, [pc, #32]	; (80022ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80022cc:	40d9      	lsrs	r1, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	400b      	ands	r3, r1
 80022d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	0007ffff 	.word	0x0007ffff

080022f0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 031f 	and.w	r3, r3, #31
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6093      	str	r3, [r2, #8]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800235c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002360:	d101      	bne.n	8002366 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002384:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002388:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023b0:	d101      	bne.n	80023b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023d8:	f043 0201 	orr.w	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <LL_ADC_IsEnabled+0x18>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <LL_ADC_IsEnabled+0x1a>
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002422:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002426:	f043 0204 	orr.w	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b04      	cmp	r3, #4
 800244c:	d101      	bne.n	8002452 <LL_ADC_REG_IsConversionOngoing+0x18>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b08      	cmp	r3, #8
 8002472:	d101      	bne.n	8002478 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b089      	sub	sp, #36	; 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e130      	b.n	8002704 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d109      	bne.n	80024c4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff fb71 	bl	8001b98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff3f 	bl	800234c <LL_ADC_IsDeepPowerDownEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d004      	beq.n	80024de <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff25 	bl	8002328 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff5a 	bl	800239c <LL_ADC_IsInternalRegulatorEnabled>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d115      	bne.n	800251a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff3e 	bl	8002374 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024f8:	4b84      	ldr	r3, [pc, #528]	; (800270c <HAL_ADC_Init+0x284>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	4a84      	ldr	r2, [pc, #528]	; (8002710 <HAL_ADC_Init+0x288>)
 8002500:	fba2 2303 	umull	r2, r3, r2, r3
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	3301      	adds	r3, #1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800250c:	e002      	b.n	8002514 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3b01      	subs	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f9      	bne.n	800250e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff ff3c 	bl	800239c <LL_ADC_IsInternalRegulatorEnabled>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10d      	bne.n	8002546 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	f043 0210 	orr.w	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253a:	f043 0201 	orr.w	r2, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff75 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002550:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f003 0310 	and.w	r3, r3, #16
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 80c9 	bne.w	80026f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 80c5 	bne.w	80026f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002570:	f043 0202 	orr.w	r2, r3, #2
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff35 	bl	80023ec <LL_ADC_IsEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d115      	bne.n	80025b4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002588:	4862      	ldr	r0, [pc, #392]	; (8002714 <HAL_ADC_Init+0x28c>)
 800258a:	f7ff ff2f 	bl	80023ec <LL_ADC_IsEnabled>
 800258e:	4604      	mov	r4, r0
 8002590:	4861      	ldr	r0, [pc, #388]	; (8002718 <HAL_ADC_Init+0x290>)
 8002592:	f7ff ff2b 	bl	80023ec <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	431c      	orrs	r4, r3
 800259a:	4860      	ldr	r0, [pc, #384]	; (800271c <HAL_ADC_Init+0x294>)
 800259c:	f7ff ff26 	bl	80023ec <LL_ADC_IsEnabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4323      	orrs	r3, r4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4619      	mov	r1, r3
 80025ae:	485c      	ldr	r0, [pc, #368]	; (8002720 <HAL_ADC_Init+0x298>)
 80025b0:	f7ff fd74 	bl	800209c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7e5b      	ldrb	r3, [r3, #25]
 80025b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80025c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80025ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d106      	bne.n	80025f0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	3b01      	subs	r3, #1
 80025e8:	045b      	lsls	r3, r3, #17
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d009      	beq.n	800260c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	4b44      	ldr	r3, [pc, #272]	; (8002724 <HAL_ADC_Init+0x29c>)
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6812      	ldr	r2, [r2, #0]
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	430b      	orrs	r3, r1
 800261e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff1b 	bl	8002460 <LL_ADC_INJ_IsConversionOngoing>
 800262a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d13d      	bne.n	80026ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d13a      	bne.n	80026ae <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800263c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002644:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002654:	f023 0302 	bic.w	r3, r3, #2
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	69b9      	ldr	r1, [r7, #24]
 800265e:	430b      	orrs	r3, r1
 8002660:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002668:	2b01      	cmp	r3, #1
 800266a:	d118      	bne.n	800269e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002688:	4311      	orrs	r1, r2
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800268e:	430a      	orrs	r2, r1
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	611a      	str	r2, [r3, #16]
 800269c:	e007      	b.n	80026ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d10c      	bne.n	80026d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f023 010f 	bic.w	r1, r3, #15
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	1e5a      	subs	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30
 80026ce:	e007      	b.n	80026e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020f 	bic.w	r2, r2, #15
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	f023 0303 	bic.w	r3, r3, #3
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	655a      	str	r2, [r3, #84]	; 0x54
 80026f0:	e007      	b.n	8002702 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f043 0210 	orr.w	r2, r3, #16
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002702:	7ffb      	ldrb	r3, [r7, #31]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3724      	adds	r7, #36	; 0x24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd90      	pop	{r4, r7, pc}
 800270c:	20000008 	.word	0x20000008
 8002710:	053e2d63 	.word	0x053e2d63
 8002714:	50040000 	.word	0x50040000
 8002718:	50040100 	.word	0x50040100
 800271c:	50040200 	.word	0x50040200
 8002720:	50040300 	.word	0x50040300
 8002724:	fff0c007 	.word	0xfff0c007

08002728 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002730:	4891      	ldr	r0, [pc, #580]	; (8002978 <HAL_ADC_Start_IT+0x250>)
 8002732:	f7ff fddd 	bl	80022f0 <LL_ADC_GetMultimode>
 8002736:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fe7c 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 8110 	bne.w	800296a <HAL_ADC_Start_IT+0x242>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADC_Start_IT+0x30>
 8002754:	2302      	movs	r3, #2
 8002756:	e10b      	b.n	8002970 <HAL_ADC_Start_IT+0x248>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2201      	movs	r2, #1
 800275c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 ff3d 	bl	80035e0 <ADC_Enable>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 80f7 	bne.w	8002960 <HAL_ADC_Start_IT+0x238>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002776:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7c      	ldr	r2, [pc, #496]	; (800297c <HAL_ADC_Start_IT+0x254>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d002      	beq.n	8002796 <HAL_ADC_Start_IT+0x6e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	e000      	b.n	8002798 <HAL_ADC_Start_IT+0x70>
 8002796:	4b7a      	ldr	r3, [pc, #488]	; (8002980 <HAL_ADC_Start_IT+0x258>)
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	4293      	cmp	r3, r2
 800279e:	d002      	beq.n	80027a6 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	f023 0206 	bic.w	r2, r3, #6
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	659a      	str	r2, [r3, #88]	; 0x58
 80027ca:	e002      	b.n	80027d2 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	221c      	movs	r2, #28
 80027d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 021c 	bic.w	r2, r2, #28
 80027f0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d108      	bne.n	800280c <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0208 	orr.w	r2, r2, #8
 8002808:	605a      	str	r2, [r3, #4]
          break;
 800280a:	e008      	b.n	800281e <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0204 	orr.w	r2, r2, #4
 800281a:	605a      	str	r2, [r3, #4]
          break;
 800281c:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0210 	orr.w	r2, r2, #16
 8002834:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_ADC_Start_IT+0x254>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d002      	beq.n	8002846 <HAL_ADC_Start_IT+0x11e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	e000      	b.n	8002848 <HAL_ADC_Start_IT+0x120>
 8002846:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <HAL_ADC_Start_IT+0x258>)
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4293      	cmp	r3, r2
 800284e:	d008      	beq.n	8002862 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d005      	beq.n	8002862 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	2b05      	cmp	r3, #5
 800285a:	d002      	beq.n	8002862 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b09      	cmp	r3, #9
 8002860:	d13a      	bne.n	80028d8 <HAL_ADC_Start_IT+0x1b0>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02d      	beq.n	80028cc <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002878:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	695b      	ldr	r3, [r3, #20]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d110      	bne.n	80028aa <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0220 	bic.w	r2, r2, #32
 8002896:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a6:	605a      	str	r2, [r3, #4]
              break;
 80028a8:	e010      	b.n	80028cc <HAL_ADC_Start_IT+0x1a4>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028b8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0220 	orr.w	r2, r2, #32
 80028c8:	605a      	str	r2, [r3, #4]
              break;
 80028ca:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fd9e 	bl	8002412 <LL_ADC_REG_StartConversion>
 80028d6:	e04a      	b.n	800296e <HAL_ADC_Start_IT+0x246>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_ADC_Start_IT+0x254>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d002      	beq.n	80028f4 <HAL_ADC_Start_IT+0x1cc>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	e000      	b.n	80028f6 <HAL_ADC_Start_IT+0x1ce>
 80028f4:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_ADC_Start_IT+0x258>)
 80028f6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d034      	beq.n	800296e <HAL_ADC_Start_IT+0x246>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002908:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800290c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d110      	bne.n	800293e <HAL_ADC_Start_IT+0x216>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0220 	bic.w	r2, r2, #32
 800292a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800293a:	605a      	str	r2, [r3, #4]
              break;
 800293c:	e017      	b.n	800296e <HAL_ADC_Start_IT+0x246>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800294c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0220 	orr.w	r2, r2, #32
 800295c:	605a      	str	r2, [r3, #4]
              break;
 800295e:	e006      	b.n	800296e <HAL_ADC_Start_IT+0x246>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002968:	e001      	b.n	800296e <HAL_ADC_Start_IT+0x246>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800296a:	2302      	movs	r3, #2
 800296c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	50040300 	.word	0x50040300
 800297c:	50040100 	.word	0x50040100
 8002980:	50040000 	.word	0x50040000

08002984 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002992:	4618      	mov	r0, r3
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
	...

080029a0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029bc:	4882      	ldr	r0, [pc, #520]	; (8002bc8 <HAL_ADC_IRQHandler+0x228>)
 80029be:	f7ff fc97 	bl	80022f0 <LL_ADC_GetMultimode>
 80029c2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d017      	beq.n	80029fe <HAL_ADC_IRQHandler+0x5e>
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 fec9 	bl	8003788 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x72>
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8083 	beq.w	8002b24 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d07d      	beq.n	8002b24 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fbb2 	bl	80021ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d062      	beq.n	8002b16 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a5d      	ldr	r2, [pc, #372]	; (8002bcc <HAL_ADC_IRQHandler+0x22c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d002      	beq.n	8002a60 <HAL_ADC_IRQHandler+0xc0>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	e000      	b.n	8002a62 <HAL_ADC_IRQHandler+0xc2>
 8002a60:	4b5b      	ldr	r3, [pc, #364]	; (8002bd0 <HAL_ADC_IRQHandler+0x230>)
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6812      	ldr	r2, [r2, #0]
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d008      	beq.n	8002a7c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d002      	beq.n	8002a7c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b09      	cmp	r3, #9
 8002a7a:	d104      	bne.n	8002a86 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	e00c      	b.n	8002aa0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a50      	ldr	r2, [pc, #320]	; (8002bcc <HAL_ADC_IRQHandler+0x22c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d002      	beq.n	8002a96 <HAL_ADC_IRQHandler+0xf6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	e000      	b.n	8002a98 <HAL_ADC_IRQHandler+0xf8>
 8002a96:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <HAL_ADC_IRQHandler+0x230>)
 8002a98:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d135      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d12e      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fcbc 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d11a      	bne.n	8002afe <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 020c 	bic.w	r2, r2, #12
 8002ad6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d112      	bne.n	8002b16 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af4:	f043 0201 	orr.w	r2, r3, #1
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	655a      	str	r2, [r3, #84]	; 0x54
 8002afc:	e00b      	b.n	8002b16 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b02:	f043 0210 	orr.w	r2, r3, #16
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	f043 0201 	orr.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f9c4 	bl	8000ea4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	220c      	movs	r2, #12
 8002b22:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <HAL_ADC_IRQHandler+0x198>
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10b      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 809f 	beq.w	8002c82 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 8099 	beq.w	8002c82 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fb5d 	bl	800222c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002b72:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fb18 	bl	80021ae <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b7e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <HAL_ADC_IRQHandler+0x22c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d002      	beq.n	8002b90 <HAL_ADC_IRQHandler+0x1f0>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	e000      	b.n	8002b92 <HAL_ADC_IRQHandler+0x1f2>
 8002b90:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_ADC_IRQHandler+0x230>)
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d008      	beq.n	8002bac <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d002      	beq.n	8002bac <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2b07      	cmp	r3, #7
 8002baa:	d104      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	623b      	str	r3, [r7, #32]
 8002bb4:	e013      	b.n	8002bde <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <HAL_ADC_IRQHandler+0x22c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x234>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e007      	b.n	8002bd6 <HAL_ADC_IRQHandler+0x236>
 8002bc6:	bf00      	nop
 8002bc8:	50040300 	.word	0x50040300
 8002bcc:	50040100 	.word	0x50040100
 8002bd0:	50040000 	.word	0x50040000
 8002bd4:	4b7d      	ldr	r3, [pc, #500]	; (8002dcc <HAL_ADC_IRQHandler+0x42c>)
 8002bd6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d047      	beq.n	8002c74 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <HAL_ADC_IRQHandler+0x25e>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d03f      	beq.n	8002c74 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d13a      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d133      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d12e      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fc20 	bl	8002460 <LL_ADC_INJ_IsConversionOngoing>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d11a      	bne.n	8002c5c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c34:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d112      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c52:	f043 0201 	orr.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	655a      	str	r2, [r3, #84]	; 0x54
 8002c5a:	e00b      	b.n	8002c74 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fd5f 	bl	8003738 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2260      	movs	r2, #96	; 0x60
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d011      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0x310>
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00c      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f896 	bl	8002dd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d012      	beq.n	8002ce0 <HAL_ADC_IRQHandler+0x340>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 fd45 	bl	8003760 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d012      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x370>
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00d      	beq.n	8002d10 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fd37 	bl	8003774 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d036      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x3e8>
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d031      	beq.n	8002d88 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	e014      	b.n	8002d5c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002d38:	4825      	ldr	r0, [pc, #148]	; (8002dd0 <HAL_ADC_IRQHandler+0x430>)
 8002d3a:	f7ff fae7 	bl	800230c <LL_ADC_GetMultiDMATransfer>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002d44:	2301      	movs	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	e008      	b.n	8002d5c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d10e      	bne.n	8002d80 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f043 0202 	orr.w	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f834 	bl	8002de8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2210      	movs	r2, #16
 8002d86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d018      	beq.n	8002dc4 <HAL_ADC_IRQHandler+0x424>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	f043 0208 	orr.w	r2, r3, #8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dbc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fcc4 	bl	800374c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002dc4:	bf00      	nop
 8002dc6:	3728      	adds	r7, #40	; 0x28
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	50040000 	.word	0x50040000
 8002dd0:	50040300 	.word	0x50040300

08002dd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b0b6      	sub	sp, #216	; 0xd8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x22>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e3c9      	b.n	80035b2 <HAL_ADC_ConfigChannel+0x7b6>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fb05 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 83aa 	bne.w	800358c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b05      	cmp	r3, #5
 8002e46:	d824      	bhi.n	8002e92 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	3b02      	subs	r3, #2
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d81b      	bhi.n	8002e8a <HAL_ADC_ConfigChannel+0x8e>
 8002e52:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <HAL_ADC_ConfigChannel+0x5c>)
 8002e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e58:	08002e69 	.word	0x08002e69
 8002e5c:	08002e71 	.word	0x08002e71
 8002e60:	08002e79 	.word	0x08002e79
 8002e64:	08002e81 	.word	0x08002e81
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002e68:	230c      	movs	r3, #12
 8002e6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e6e:	e010      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002e70:	2312      	movs	r3, #18
 8002e72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e76:	e00c      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002e78:	2318      	movs	r3, #24
 8002e7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e7e:	e008      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e88:	e003      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002e90:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002ea0:	f7ff f998 	bl	80021d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fac6 	bl	800243a <LL_ADC_REG_IsConversionOngoing>
 8002eae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fad2 	bl	8002460 <LL_ADC_INJ_IsConversionOngoing>
 8002ebc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 81a4 	bne.w	8003212 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f040 819f 	bne.w	8003212 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f7ff f9b6 	bl	8002252 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d00a      	beq.n	8002f1e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6919      	ldr	r1, [r3, #16]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f18:	f7ff f8f4 	bl	8002104 <LL_ADC_SetOffset>
 8002f1c:	e179      	b.n	8003212 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff f911 	bl	800214c <LL_ADC_GetOffsetChannel>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10a      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x14e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f906 	bl	800214c <LL_ADC_GetOffsetChannel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	0e9b      	lsrs	r3, r3, #26
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	e01e      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x18c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff f8fb 	bl	800214c <LL_ADC_GetOffsetChannel>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002f78:	2320      	movs	r3, #32
 8002f7a:	e004      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002f7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x1a4>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0e9b      	lsrs	r3, r3, #26
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	e018      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x1d6>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002fb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002fbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002fc4:	2320      	movs	r3, #32
 8002fc6:	e004      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002fc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d106      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f8ca 	bl	8002178 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff f8ae 	bl	800214c <LL_ADC_GetOffsetChannel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x214>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f8a3 	bl	800214c <LL_ADC_GetOffsetChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	f003 021f 	and.w	r2, r3, #31
 800300e:	e01e      	b.n	800304e <HAL_ADC_ConfigChannel+0x252>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff f898 	bl	800214c <LL_ADC_GetOffsetChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800302e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003036:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e004      	b.n	800304c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x26a>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	e018      	b.n	8003098 <HAL_ADC_ConfigChannel+0x29c>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800307a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800307e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003082:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e004      	b.n	8003098 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800308e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003098:	429a      	cmp	r2, r3
 800309a:	d106      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f867 	bl	8002178 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2102      	movs	r1, #2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f84b 	bl	800214c <LL_ADC_GetOffsetChannel>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x2da>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2102      	movs	r1, #2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff f840 	bl	800214c <LL_ADC_GetOffsetChannel>
 80030cc:	4603      	mov	r3, r0
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	e01e      	b.n	8003114 <HAL_ADC_ConfigChannel+0x318>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2102      	movs	r1, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f835 	bl	800214c <LL_ADC_GetOffsetChannel>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80030f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80030fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e004      	b.n	8003112 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_ADC_ConfigChannel+0x330>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	e014      	b.n	8003156 <HAL_ADC_ConfigChannel+0x35a>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800313a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800313c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003148:	2320      	movs	r3, #32
 800314a:	e004      	b.n	8003156 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 800314c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003150:	fab3 f383 	clz	r3, r3
 8003154:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003156:	429a      	cmp	r2, r3
 8003158:	d106      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	2102      	movs	r1, #2
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff f808 	bl	8002178 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2103      	movs	r1, #3
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe ffec 	bl	800214c <LL_ADC_GetOffsetChannel>
 8003174:	4603      	mov	r3, r0
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x398>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2103      	movs	r1, #3
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe ffe1 	bl	800214c <LL_ADC_GetOffsetChannel>
 800318a:	4603      	mov	r3, r0
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	f003 021f 	and.w	r2, r3, #31
 8003192:	e017      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x3c8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2103      	movs	r1, #3
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe ffd6 	bl	800214c <LL_ADC_GetOffsetChannel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80031b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80031b6:	2320      	movs	r3, #32
 80031b8:	e003      	b.n	80031c2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80031ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031bc:	fab3 f383 	clz	r3, r3
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x3e0>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	f003 031f 	and.w	r3, r3, #31
 80031da:	e011      	b.n	8003200 <HAL_ADC_ConfigChannel+0x404>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80031ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031ec:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80031ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80031f4:	2320      	movs	r3, #32
 80031f6:	e003      	b.n	8003200 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80031f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003200:	429a      	cmp	r2, r3
 8003202:	d106      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2200      	movs	r2, #0
 800320a:	2103      	movs	r1, #3
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe ffb3 	bl	8002178 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff f8e8 	bl	80023ec <LL_ADC_IsEnabled>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	f040 8140 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6819      	ldr	r1, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	461a      	mov	r2, r3
 8003232:	f7ff f839 	bl	80022a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4a8f      	ldr	r2, [pc, #572]	; (8003478 <HAL_ADC_ConfigChannel+0x67c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	f040 8131 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10b      	bne.n	800326a <HAL_ADC_ConfigChannel+0x46e>
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	3301      	adds	r3, #1
 800325a:	f003 031f 	and.w	r3, r3, #31
 800325e:	2b09      	cmp	r3, #9
 8003260:	bf94      	ite	ls
 8003262:	2301      	movls	r3, #1
 8003264:	2300      	movhi	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	e019      	b.n	800329e <HAL_ADC_ConfigChannel+0x4a2>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003278:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800327a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800327c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003282:	2320      	movs	r3, #32
 8003284:	e003      	b.n	800328e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003288:	fab3 f383 	clz	r3, r3
 800328c:	b2db      	uxtb	r3, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2b09      	cmp	r3, #9
 8003296:	bf94      	ite	ls
 8003298:	2301      	movls	r3, #1
 800329a:	2300      	movhi	r3, #0
 800329c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d079      	beq.n	8003396 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <HAL_ADC_ConfigChannel+0x4c2>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	3301      	adds	r3, #1
 80032b6:	069b      	lsls	r3, r3, #26
 80032b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032bc:	e015      	b.n	80032ea <HAL_ADC_ConfigChannel+0x4ee>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80032cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ce:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80032d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80032d6:	2320      	movs	r3, #32
 80032d8:	e003      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80032da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032dc:	fab3 f383 	clz	r3, r3
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	069b      	lsls	r3, r3, #26
 80032e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d109      	bne.n	800330a <HAL_ADC_ConfigChannel+0x50e>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	0e9b      	lsrs	r3, r3, #26
 80032fc:	3301      	adds	r3, #1
 80032fe:	f003 031f 	and.w	r3, r3, #31
 8003302:	2101      	movs	r1, #1
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	e017      	b.n	800333a <HAL_ADC_ConfigChannel+0x53e>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800331a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800331c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003322:	2320      	movs	r3, #32
 8003324:	e003      	b.n	800332e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003328:	fab3 f383 	clz	r3, r3
 800332c:	b2db      	uxtb	r3, r3
 800332e:	3301      	adds	r3, #1
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f303 	lsl.w	r3, r1, r3
 800333a:	ea42 0103 	orr.w	r1, r2, r3
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10a      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x564>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	0e9b      	lsrs	r3, r3, #26
 8003350:	3301      	adds	r3, #1
 8003352:	f003 021f 	and.w	r2, r3, #31
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	051b      	lsls	r3, r3, #20
 800335e:	e018      	b.n	8003392 <HAL_ADC_ConfigChannel+0x596>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	2b00      	cmp	r3, #0
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003378:	2320      	movs	r3, #32
 800337a:	e003      	b.n	8003384 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800337c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	3301      	adds	r3, #1
 8003386:	f003 021f 	and.w	r2, r3, #31
 800338a:	4613      	mov	r3, r2
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4413      	add	r3, r2
 8003390:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003392:	430b      	orrs	r3, r1
 8003394:	e081      	b.n	800349a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x5b6>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	3301      	adds	r3, #1
 80033aa:	069b      	lsls	r3, r3, #26
 80033ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b0:	e015      	b.n	80033de <HAL_ADC_ConfigChannel+0x5e2>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	fa93 f3a3 	rbit	r3, r3
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80033ca:	2320      	movs	r3, #32
 80033cc:	e003      	b.n	80033d6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	3301      	adds	r3, #1
 80033d8:	069b      	lsls	r3, r3, #26
 80033da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x602>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0e9b      	lsrs	r3, r3, #26
 80033f0:	3301      	adds	r3, #1
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	2101      	movs	r1, #1
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	e017      	b.n	800342e <HAL_ADC_ConfigChannel+0x632>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	fa93 f3a3 	rbit	r3, r3
 800340a:	61bb      	str	r3, [r7, #24]
  return result;
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003416:	2320      	movs	r3, #32
 8003418:	e003      	b.n	8003422 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	fab3 f383 	clz	r3, r3
 8003420:	b2db      	uxtb	r3, r3
 8003422:	3301      	adds	r3, #1
 8003424:	f003 031f 	and.w	r3, r3, #31
 8003428:	2101      	movs	r1, #1
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	ea42 0103 	orr.w	r1, r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10d      	bne.n	800345a <HAL_ADC_ConfigChannel+0x65e>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	0e9b      	lsrs	r3, r3, #26
 8003444:	3301      	adds	r3, #1
 8003446:	f003 021f 	and.w	r2, r3, #31
 800344a:	4613      	mov	r3, r2
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	4413      	add	r3, r2
 8003450:	3b1e      	subs	r3, #30
 8003452:	051b      	lsls	r3, r3, #20
 8003454:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003458:	e01e      	b.n	8003498 <HAL_ADC_ConfigChannel+0x69c>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	60fb      	str	r3, [r7, #12]
  return result;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d104      	bne.n	800347c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003472:	2320      	movs	r3, #32
 8003474:	e006      	b.n	8003484 <HAL_ADC_ConfigChannel+0x688>
 8003476:	bf00      	nop
 8003478:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	3301      	adds	r3, #1
 8003486:	f003 021f 	and.w	r2, r3, #31
 800348a:	4613      	mov	r3, r2
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	4413      	add	r3, r2
 8003490:	3b1e      	subs	r3, #30
 8003492:	051b      	lsls	r3, r3, #20
 8003494:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003498:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800349e:	4619      	mov	r1, r3
 80034a0:	f7fe fed7 	bl	8002252 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b44      	ldr	r3, [pc, #272]	; (80035bc <HAL_ADC_ConfigChannel+0x7c0>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d07a      	beq.n	80035a6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034b0:	4843      	ldr	r0, [pc, #268]	; (80035c0 <HAL_ADC_ConfigChannel+0x7c4>)
 80034b2:	f7fe fe19 	bl	80020e8 <LL_ADC_GetCommonPathInternalCh>
 80034b6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a41      	ldr	r2, [pc, #260]	; (80035c4 <HAL_ADC_ConfigChannel+0x7c8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d12c      	bne.n	800351e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d126      	bne.n	800351e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <HAL_ADC_ConfigChannel+0x7cc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_ADC_ConfigChannel+0x6e8>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <HAL_ADC_ConfigChannel+0x7d0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d15d      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80034ec:	4619      	mov	r1, r3
 80034ee:	4834      	ldr	r0, [pc, #208]	; (80035c0 <HAL_ADC_ConfigChannel+0x7c4>)
 80034f0:	f7fe fde7 	bl	80020c2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_ADC_ConfigChannel+0x7d4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	099b      	lsrs	r3, r3, #6
 80034fa:	4a36      	ldr	r2, [pc, #216]	; (80035d4 <HAL_ADC_ConfigChannel+0x7d8>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800350e:	e002      	b.n	8003516 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	3b01      	subs	r3, #1
 8003514:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f9      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800351c:	e040      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2d      	ldr	r2, [pc, #180]	; (80035d8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d118      	bne.n	800355a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003528:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800352c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d112      	bne.n	800355a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a23      	ldr	r2, [pc, #140]	; (80035c8 <HAL_ADC_ConfigChannel+0x7cc>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_ADC_ConfigChannel+0x74c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a22      	ldr	r2, [pc, #136]	; (80035cc <HAL_ADC_ConfigChannel+0x7d0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d12d      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003548:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800354c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003550:	4619      	mov	r1, r3
 8003552:	481b      	ldr	r0, [pc, #108]	; (80035c0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003554:	f7fe fdb5 	bl	80020c2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003558:	e024      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1f      	ldr	r2, [pc, #124]	; (80035dc <HAL_ADC_ConfigChannel+0x7e0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d120      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11a      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d115      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800357e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003582:	4619      	mov	r1, r3
 8003584:	480e      	ldr	r0, [pc, #56]	; (80035c0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003586:	f7fe fd9c 	bl	80020c2 <LL_ADC_SetCommonPathInternalCh>
 800358a:	e00c      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800359e:	e002      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035a0:	bf00      	nop
 80035a2:	e000      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	37d8      	adds	r7, #216	; 0xd8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	80080000 	.word	0x80080000
 80035c0:	50040300 	.word	0x50040300
 80035c4:	c7520000 	.word	0xc7520000
 80035c8:	50040000 	.word	0x50040000
 80035cc:	50040200 	.word	0x50040200
 80035d0:	20000008 	.word	0x20000008
 80035d4:	053e2d63 	.word	0x053e2d63
 80035d8:	cb840000 	.word	0xcb840000
 80035dc:	80000001 	.word	0x80000001

080035e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fe fefb 	bl	80023ec <LL_ADC_IsEnabled>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d169      	bne.n	80036d0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <ADC_Enable+0xfc>)
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00d      	beq.n	8003626 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360e:	f043 0210 	orr.w	r2, r3, #16
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361a:	f043 0201 	orr.w	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e055      	b.n	80036d2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe feca 	bl	80023c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003630:	482b      	ldr	r0, [pc, #172]	; (80036e0 <ADC_Enable+0x100>)
 8003632:	f7fe fd59 	bl	80020e8 <LL_ADC_GetCommonPathInternalCh>
 8003636:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003638:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800363c:	2b00      	cmp	r3, #0
 800363e:	d013      	beq.n	8003668 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <ADC_Enable+0x104>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	4a28      	ldr	r2, [pc, #160]	; (80036e8 <ADC_Enable+0x108>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800365a:	e002      	b.n	8003662 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	3b01      	subs	r3, #1
 8003660:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f9      	bne.n	800365c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003668:	f7fe fce8 	bl	800203c <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800366e:	e028      	b.n	80036c2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7fe feb9 	bl	80023ec <LL_ADC_IsEnabled>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe fe9d 	bl	80023c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800368a:	f7fe fcd7 	bl	800203c <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d914      	bls.n	80036c2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d00d      	beq.n	80036c2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f043 0210 	orr.w	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b6:	f043 0201 	orr.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e007      	b.n	80036d2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d1cf      	bne.n	8003670 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	8000003f 	.word	0x8000003f
 80036e0:	50040300 	.word	0x50040300
 80036e4:	20000008 	.word	0x20000008
 80036e8:	053e2d63 	.word	0x053e2d63

080036ec <LL_ADC_IsEnabled>:
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d101      	bne.n	8003704 <LL_ADC_IsEnabled+0x18>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <LL_ADC_IsEnabled+0x1a>
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <LL_ADC_REG_IsConversionOngoing>:
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d101      	bne.n	800372a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800379c:	b590      	push	{r4, r7, lr}
 800379e:	b09f      	sub	sp, #124	; 0x7c
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e093      	b.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80037c2:	2300      	movs	r3, #0
 80037c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80037c6:	2300      	movs	r3, #0
 80037c8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a47      	ldr	r2, [pc, #284]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d102      	bne.n	80037da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037d4:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037d6:	60bb      	str	r3, [r7, #8]
 80037d8:	e001      	b.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e072      	b.n	80038e2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff ff87 	bl	8003712 <LL_ADC_REG_IsConversionOngoing>
 8003804:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff81 	bl	8003712 <LL_ADC_REG_IsConversionOngoing>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d154      	bne.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003816:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003818:	2b00      	cmp	r3, #0
 800381a:	d151      	bne.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800381c:	4b35      	ldr	r3, [pc, #212]	; (80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800381e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02c      	beq.n	8003882 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800383a:	035b      	lsls	r3, r3, #13
 800383c:	430b      	orrs	r3, r1
 800383e:	431a      	orrs	r2, r3
 8003840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003842:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003844:	4829      	ldr	r0, [pc, #164]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003846:	f7ff ff51 	bl	80036ec <LL_ADC_IsEnabled>
 800384a:	4604      	mov	r4, r0
 800384c:	4828      	ldr	r0, [pc, #160]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800384e:	f7ff ff4d 	bl	80036ec <LL_ADC_IsEnabled>
 8003852:	4603      	mov	r3, r0
 8003854:	431c      	orrs	r4, r3
 8003856:	4828      	ldr	r0, [pc, #160]	; (80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003858:	f7ff ff48 	bl	80036ec <LL_ADC_IsEnabled>
 800385c:	4603      	mov	r3, r0
 800385e:	4323      	orrs	r3, r4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d137      	bne.n	80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800386c:	f023 030f 	bic.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	6811      	ldr	r1, [r2, #0]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	430a      	orrs	r2, r1
 800387a:	431a      	orrs	r2, r3
 800387c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800387e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003880:	e028      	b.n	80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800388a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800388e:	4817      	ldr	r0, [pc, #92]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003890:	f7ff ff2c 	bl	80036ec <LL_ADC_IsEnabled>
 8003894:	4604      	mov	r4, r0
 8003896:	4816      	ldr	r0, [pc, #88]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003898:	f7ff ff28 	bl	80036ec <LL_ADC_IsEnabled>
 800389c:	4603      	mov	r3, r0
 800389e:	431c      	orrs	r4, r3
 80038a0:	4815      	ldr	r0, [pc, #84]	; (80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80038a2:	f7ff ff23 	bl	80036ec <LL_ADC_IsEnabled>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4323      	orrs	r3, r4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d112      	bne.n	80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80038b6:	f023 030f 	bic.w	r3, r3, #15
 80038ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038bc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038be:	e009      	b.n	80038d4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f043 0220 	orr.w	r2, r3, #32
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80038d2:	e000      	b.n	80038d6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80038d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80038de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	377c      	adds	r7, #124	; 0x7c
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd90      	pop	{r4, r7, pc}
 80038ea:	bf00      	nop
 80038ec:	50040000 	.word	0x50040000
 80038f0:	50040100 	.word	0x50040100
 80038f4:	50040300 	.word	0x50040300
 80038f8:	50040200 	.word	0x50040200

080038fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	; (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <__NVIC_GetPriorityGrouping+0x18>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f003 0307 	and.w	r3, r3, #7
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	db0b      	blt.n	800398a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	4907      	ldr	r1, [pc, #28]	; (8003998 <__NVIC_EnableIRQ+0x38>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2001      	movs	r0, #1
 8003982:	fa00 f202 	lsl.w	r2, r0, r2
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	6039      	str	r1, [r7, #0]
 80039a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	db0a      	blt.n	80039c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	490c      	ldr	r1, [pc, #48]	; (80039e8 <__NVIC_SetPriority+0x4c>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	0112      	lsls	r2, r2, #4
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	440b      	add	r3, r1
 80039c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c4:	e00a      	b.n	80039dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4908      	ldr	r1, [pc, #32]	; (80039ec <__NVIC_SetPriority+0x50>)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	3b04      	subs	r3, #4
 80039d4:	0112      	lsls	r2, r2, #4
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	440b      	add	r3, r1
 80039da:	761a      	strb	r2, [r3, #24]
}
 80039dc:	bf00      	nop
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	e000e100 	.word	0xe000e100
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	f1c3 0307 	rsb	r3, r3, #7
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	bf28      	it	cs
 8003a0e:	2304      	movcs	r3, #4
 8003a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3304      	adds	r3, #4
 8003a16:	2b06      	cmp	r3, #6
 8003a18:	d902      	bls.n	8003a20 <NVIC_EncodePriority+0x30>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3b03      	subs	r3, #3
 8003a1e:	e000      	b.n	8003a22 <NVIC_EncodePriority+0x32>
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	401a      	ands	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a38:	f04f 31ff 	mov.w	r1, #4294967295
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a42:	43d9      	mvns	r1, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	4313      	orrs	r3, r2
         );
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3724      	adds	r7, #36	; 0x24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a68:	d301      	bcc.n	8003a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e00f      	b.n	8003a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <SysTick_Config+0x40>)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a76:	210f      	movs	r1, #15
 8003a78:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7c:	f7ff ff8e 	bl	800399c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <SysTick_Config+0x40>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <SysTick_Config+0x40>)
 8003a88:	2207      	movs	r2, #7
 8003a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	e000e010 	.word	0xe000e010

08003a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7ff ff29 	bl	80038fc <__NVIC_SetPriorityGrouping>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b086      	sub	sp, #24
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
 8003abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ac4:	f7ff ff3e 	bl	8003944 <__NVIC_GetPriorityGrouping>
 8003ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	6978      	ldr	r0, [r7, #20]
 8003ad0:	f7ff ff8e 	bl	80039f0 <NVIC_EncodePriority>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7ff ff5d 	bl	800399c <__NVIC_SetPriority>
}
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff ff31 	bl	8003960 <__NVIC_EnableIRQ>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7ff ffa2 	bl	8003a58 <SysTick_Config>
 8003b14:	4603      	mov	r3, r0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e098      	b.n	8003c64 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b4d      	ldr	r3, [pc, #308]	; (8003c70 <HAL_DMA_Init+0x150>)
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d80f      	bhi.n	8003b5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b4b      	ldr	r3, [pc, #300]	; (8003c74 <HAL_DMA_Init+0x154>)
 8003b46:	4413      	add	r3, r2
 8003b48:	4a4b      	ldr	r2, [pc, #300]	; (8003c78 <HAL_DMA_Init+0x158>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	009a      	lsls	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a48      	ldr	r2, [pc, #288]	; (8003c7c <HAL_DMA_Init+0x15c>)
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b5c:	e00e      	b.n	8003b7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <HAL_DMA_Init+0x160>)
 8003b66:	4413      	add	r3, r2
 8003b68:	4a43      	ldr	r2, [pc, #268]	; (8003c78 <HAL_DMA_Init+0x158>)
 8003b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	009a      	lsls	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a42      	ldr	r2, [pc, #264]	; (8003c84 <HAL_DMA_Init+0x164>)
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd6:	d039      	beq.n	8003c4c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bdc:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <HAL_DMA_Init+0x15c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d11a      	bne.n	8003c18 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003be2:	4b29      	ldr	r3, [pc, #164]	; (8003c88 <HAL_DMA_Init+0x168>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f003 031c 	and.w	r3, r3, #28
 8003bee:	210f      	movs	r1, #15
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	4924      	ldr	r1, [pc, #144]	; (8003c88 <HAL_DMA_Init+0x168>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003bfc:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_DMA_Init+0x168>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6859      	ldr	r1, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f003 031c 	and.w	r3, r3, #28
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	491d      	ldr	r1, [pc, #116]	; (8003c88 <HAL_DMA_Init+0x168>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
 8003c16:	e019      	b.n	8003c4c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_DMA_Init+0x16c>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c20:	f003 031c 	and.w	r3, r3, #28
 8003c24:	210f      	movs	r1, #15
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	4917      	ldr	r1, [pc, #92]	; (8003c8c <HAL_DMA_Init+0x16c>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c32:	4b16      	ldr	r3, [pc, #88]	; (8003c8c <HAL_DMA_Init+0x16c>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6859      	ldr	r1, [r3, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f003 031c 	and.w	r3, r3, #28
 8003c42:	fa01 f303 	lsl.w	r3, r1, r3
 8003c46:	4911      	ldr	r1, [pc, #68]	; (8003c8c <HAL_DMA_Init+0x16c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40020407 	.word	0x40020407
 8003c74:	bffdfff8 	.word	0xbffdfff8
 8003c78:	cccccccd 	.word	0xcccccccd
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	bffdfbf8 	.word	0xbffdfbf8
 8003c84:	40020400 	.word	0x40020400
 8003c88:	400200a8 	.word	0x400200a8
 8003c8c:	400204a8 	.word	0x400204a8

08003c90 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d008      	beq.n	8003cba <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2204      	movs	r2, #4
 8003cac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e022      	b.n	8003d00 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 020e 	bic.w	r2, r2, #14
 8003cc8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	f003 021c 	and.w	r2, r3, #28
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cec:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d005      	beq.n	8003d30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2204      	movs	r2, #4
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	e029      	b.n	8003d84 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 020e 	bic.w	r2, r2, #14
 8003d3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f003 021c 	and.w	r2, r3, #28
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d62:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	4798      	blx	r3
    }
  }
  return status;
 8003d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f003 031c 	and.w	r3, r3, #28
 8003dae:	2204      	movs	r2, #4
 8003db0:	409a      	lsls	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d026      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x7a>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d021      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d107      	bne.n	8003de2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0204 	bic.w	r2, r2, #4
 8003de0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	f003 021c 	and.w	r2, r3, #28
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	2104      	movs	r1, #4
 8003df0:	fa01 f202 	lsl.w	r2, r1, r2
 8003df4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d071      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e06:	e06c      	b.n	8003ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0c:	f003 031c 	and.w	r3, r3, #28
 8003e10:	2202      	movs	r2, #2
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d02e      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xec>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d029      	beq.n	8003e7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10b      	bne.n	8003e4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 020a 	bic.w	r2, r2, #10
 8003e42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f003 021c 	and.w	r2, r3, #28
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	2102      	movs	r1, #2
 8003e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d038      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e78:	e033      	b.n	8003ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f003 031c 	and.w	r3, r3, #28
 8003e82:	2208      	movs	r2, #8
 8003e84:	409a      	lsls	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02a      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x156>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d025      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 020e 	bic.w	r2, r2, #14
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	f003 021c 	and.w	r2, r3, #28
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
}
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efa:	e17f      	b.n	80041fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f000 8171 	beq.w	80041f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 0303 	and.w	r3, r3, #3
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d005      	beq.n	8003f2c <HAL_GPIO_Init+0x40>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 0303 	and.w	r3, r3, #3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d130      	bne.n	8003f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	2203      	movs	r2, #3
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f62:	2201      	movs	r2, #1
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	091b      	lsrs	r3, r3, #4
 8003f78:	f003 0201 	and.w	r2, r3, #1
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f003 0303 	and.w	r3, r3, #3
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d118      	bne.n	8003fcc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	08db      	lsrs	r3, r3, #3
 8003fb6:	f003 0201 	and.w	r2, r3, #1
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	d017      	beq.n	8004008 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	689a      	ldr	r2, [r3, #8]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0303 	and.w	r3, r3, #3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d123      	bne.n	800405c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	08da      	lsrs	r2, r3, #3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3208      	adds	r2, #8
 800401c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004020:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	220f      	movs	r2, #15
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	43db      	mvns	r3, r3
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	693a      	ldr	r2, [r7, #16]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	08da      	lsrs	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3208      	adds	r2, #8
 8004056:	6939      	ldr	r1, [r7, #16]
 8004058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	2203      	movs	r2, #3
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	43db      	mvns	r3, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4013      	ands	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 0203 	and.w	r2, r3, #3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80ac 	beq.w	80041f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800409e:	4b5f      	ldr	r3, [pc, #380]	; (800421c <HAL_GPIO_Init+0x330>)
 80040a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a2:	4a5e      	ldr	r2, [pc, #376]	; (800421c <HAL_GPIO_Init+0x330>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6613      	str	r3, [r2, #96]	; 0x60
 80040aa:	4b5c      	ldr	r3, [pc, #368]	; (800421c <HAL_GPIO_Init+0x330>)
 80040ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040b6:	4a5a      	ldr	r2, [pc, #360]	; (8004220 <HAL_GPIO_Init+0x334>)
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	3302      	adds	r3, #2
 80040be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	220f      	movs	r2, #15
 80040ce:	fa02 f303 	lsl.w	r3, r2, r3
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040e0:	d025      	beq.n	800412e <HAL_GPIO_Init+0x242>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a4f      	ldr	r2, [pc, #316]	; (8004224 <HAL_GPIO_Init+0x338>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01f      	beq.n	800412a <HAL_GPIO_Init+0x23e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a4e      	ldr	r2, [pc, #312]	; (8004228 <HAL_GPIO_Init+0x33c>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d019      	beq.n	8004126 <HAL_GPIO_Init+0x23a>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a4d      	ldr	r2, [pc, #308]	; (800422c <HAL_GPIO_Init+0x340>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_GPIO_Init+0x236>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a4c      	ldr	r2, [pc, #304]	; (8004230 <HAL_GPIO_Init+0x344>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00d      	beq.n	800411e <HAL_GPIO_Init+0x232>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a4b      	ldr	r2, [pc, #300]	; (8004234 <HAL_GPIO_Init+0x348>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <HAL_GPIO_Init+0x22e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a4a      	ldr	r2, [pc, #296]	; (8004238 <HAL_GPIO_Init+0x34c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_GPIO_Init+0x22a>
 8004112:	2306      	movs	r3, #6
 8004114:	e00c      	b.n	8004130 <HAL_GPIO_Init+0x244>
 8004116:	2307      	movs	r3, #7
 8004118:	e00a      	b.n	8004130 <HAL_GPIO_Init+0x244>
 800411a:	2305      	movs	r3, #5
 800411c:	e008      	b.n	8004130 <HAL_GPIO_Init+0x244>
 800411e:	2304      	movs	r3, #4
 8004120:	e006      	b.n	8004130 <HAL_GPIO_Init+0x244>
 8004122:	2303      	movs	r3, #3
 8004124:	e004      	b.n	8004130 <HAL_GPIO_Init+0x244>
 8004126:	2302      	movs	r3, #2
 8004128:	e002      	b.n	8004130 <HAL_GPIO_Init+0x244>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <HAL_GPIO_Init+0x244>
 800412e:	2300      	movs	r3, #0
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	f002 0203 	and.w	r2, r2, #3
 8004136:	0092      	lsls	r2, r2, #2
 8004138:	4093      	lsls	r3, r2
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004140:	4937      	ldr	r1, [pc, #220]	; (8004220 <HAL_GPIO_Init+0x334>)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	3302      	adds	r3, #2
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_GPIO_Init+0x350>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	43db      	mvns	r3, r3
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4013      	ands	r3, r2
 800415c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004172:	4a32      	ldr	r2, [pc, #200]	; (800423c <HAL_GPIO_Init+0x350>)
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004178:	4b30      	ldr	r3, [pc, #192]	; (800423c <HAL_GPIO_Init+0x350>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	43db      	mvns	r3, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800419c:	4a27      	ldr	r2, [pc, #156]	; (800423c <HAL_GPIO_Init+0x350>)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041a2:	4b26      	ldr	r3, [pc, #152]	; (800423c <HAL_GPIO_Init+0x350>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041c6:	4a1d      	ldr	r2, [pc, #116]	; (800423c <HAL_GPIO_Init+0x350>)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <HAL_GPIO_Init+0x350>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4013      	ands	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80041f0:	4a12      	ldr	r2, [pc, #72]	; (800423c <HAL_GPIO_Init+0x350>)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	3301      	adds	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	f47f ae78 	bne.w	8003efc <HAL_GPIO_Init+0x10>
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	371c      	adds	r7, #28
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	40010000 	.word	0x40010000
 8004224:	48000400 	.word	0x48000400
 8004228:	48000800 	.word	0x48000800
 800422c:	48000c00 	.word	0x48000c00
 8004230:	48001000 	.word	0x48001000
 8004234:	48001400 	.word	0x48001400
 8004238:	48001800 	.word	0x48001800
 800423c:	40010400 	.word	0x40010400

08004240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
 800424c:	4613      	mov	r3, r2
 800424e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004250:	787b      	ldrb	r3, [r7, #1]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004256:	887a      	ldrh	r2, [r7, #2]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800425c:	e002      	b.n	8004264 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004282:	887a      	ldrh	r2, [r7, #2]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4013      	ands	r3, r2
 8004288:	041a      	lsls	r2, r3, #16
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	43d9      	mvns	r1, r3
 800428e:	887b      	ldrh	r3, [r7, #2]
 8004290:	400b      	ands	r3, r1
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	619a      	str	r2, [r3, #24]
}
 8004298:	bf00      	nop
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <HAL_PWREx_GetVoltageRange+0x18>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40007000 	.word	0x40007000

080042c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ce:	d130      	bne.n	8004332 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042d0:	4b23      	ldr	r3, [pc, #140]	; (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042dc:	d038      	beq.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042de:	4b20      	ldr	r3, [pc, #128]	; (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042e6:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2232      	movs	r2, #50	; 0x32
 80042f4:	fb02 f303 	mul.w	r3, r2, r3
 80042f8:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042fa:	fba2 2303 	umull	r2, r3, r2, r3
 80042fe:	0c9b      	lsrs	r3, r3, #18
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004304:	e002      	b.n	800430c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3b01      	subs	r3, #1
 800430a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004318:	d102      	bne.n	8004320 <HAL_PWREx_ControlVoltageScaling+0x60>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f2      	bne.n	8004306 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800432c:	d110      	bne.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e00f      	b.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433e:	d007      	beq.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004348:	4a05      	ldr	r2, [pc, #20]	; (8004360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800434a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800434e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	40007000 	.word	0x40007000
 8004364:	20000008 	.word	0x20000008
 8004368:	431bde83 	.word	0x431bde83

0800436c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e3ca      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437e:	4b97      	ldr	r3, [pc, #604]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004388:	4b94      	ldr	r3, [pc, #592]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0310 	and.w	r3, r3, #16
 800439a:	2b00      	cmp	r3, #0
 800439c:	f000 80e4 	beq.w	8004568 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <HAL_RCC_OscConfig+0x4a>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b0c      	cmp	r3, #12
 80043aa:	f040 808b 	bne.w	80044c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	f040 8087 	bne.w	80044c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b6:	4b89      	ldr	r3, [pc, #548]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0302 	and.w	r3, r3, #2
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <HAL_RCC_OscConfig+0x62>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e3a2      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1a      	ldr	r2, [r3, #32]
 80043d2:	4b82      	ldr	r3, [pc, #520]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <HAL_RCC_OscConfig+0x7c>
 80043de:	4b7f      	ldr	r3, [pc, #508]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e6:	e005      	b.n	80043f4 <HAL_RCC_OscConfig+0x88>
 80043e8:	4b7c      	ldr	r3, [pc, #496]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d223      	bcs.n	8004440 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fd55 	bl	8004eac <RCC_SetFlashLatencyFromMSIRange>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e383      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440c:	4b73      	ldr	r3, [pc, #460]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a72      	ldr	r2, [pc, #456]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004412:	f043 0308 	orr.w	r3, r3, #8
 8004416:	6013      	str	r3, [r2, #0]
 8004418:	4b70      	ldr	r3, [pc, #448]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	496d      	ldr	r1, [pc, #436]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442a:	4b6c      	ldr	r3, [pc, #432]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	4968      	ldr	r1, [pc, #416]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
 800443e:	e025      	b.n	800448c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004440:	4b66      	ldr	r3, [pc, #408]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a65      	ldr	r2, [pc, #404]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004446:	f043 0308 	orr.w	r3, r3, #8
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b63      	ldr	r3, [pc, #396]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	4960      	ldr	r1, [pc, #384]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800445e:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	495b      	ldr	r1, [pc, #364]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d109      	bne.n	800448c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fd15 	bl	8004eac <RCC_SetFlashLatencyFromMSIRange>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e343      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800448c:	f000 fc4a 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b52      	ldr	r3, [pc, #328]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	4950      	ldr	r1, [pc, #320]	; (80045e0 <HAL_RCC_OscConfig+0x274>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
 80044a8:	4a4e      	ldr	r2, [pc, #312]	; (80045e4 <HAL_RCC_OscConfig+0x278>)
 80044aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044ac:	4b4e      	ldr	r3, [pc, #312]	; (80045e8 <HAL_RCC_OscConfig+0x27c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fd fd73 	bl	8001f9c <HAL_InitTick>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d052      	beq.n	8004566 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80044c0:	7bfb      	ldrb	r3, [r7, #15]
 80044c2:	e327      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d032      	beq.n	8004532 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044cc:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a42      	ldr	r2, [pc, #264]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044d8:	f7fd fdb0 	bl	800203c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044e0:	f7fd fdac 	bl	800203c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e310      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044f2:	4b3a      	ldr	r3, [pc, #232]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044fe:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a36      	ldr	r2, [pc, #216]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004504:	f043 0308 	orr.w	r3, r3, #8
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	4931      	ldr	r1, [pc, #196]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800451c:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	021b      	lsls	r3, r3, #8
 800452a:	492c      	ldr	r1, [pc, #176]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]
 8004530:	e01a      	b.n	8004568 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004532:	4b2a      	ldr	r3, [pc, #168]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a29      	ldr	r2, [pc, #164]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800453e:	f7fd fd7d 	bl	800203c <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004546:	f7fd fd79 	bl	800203c <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e2dd      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x1da>
 8004564:	e000      	b.n	8004568 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004566:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d074      	beq.n	800465e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b08      	cmp	r3, #8
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x21a>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b0c      	cmp	r3, #12
 800457e:	d10e      	bne.n	800459e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d10b      	bne.n	800459e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d064      	beq.n	800465c <HAL_RCC_OscConfig+0x2f0>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d160      	bne.n	800465c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e2ba      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x24a>
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80045ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e026      	b.n	8004604 <HAL_RCC_OscConfig+0x298>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045be:	d115      	bne.n	80045ec <HAL_RCC_OscConfig+0x280>
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a05      	ldr	r2, [pc, #20]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80045c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a02      	ldr	r2, [pc, #8]	; (80045dc <HAL_RCC_OscConfig+0x270>)
 80045d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	e014      	b.n	8004604 <HAL_RCC_OscConfig+0x298>
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
 80045e0:	08008840 	.word	0x08008840
 80045e4:	20000008 	.word	0x20000008
 80045e8:	2000000c 	.word	0x2000000c
 80045ec:	4ba0      	ldr	r3, [pc, #640]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a9f      	ldr	r2, [pc, #636]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80045f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f6:	6013      	str	r3, [r2, #0]
 80045f8:	4b9d      	ldr	r3, [pc, #628]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a9c      	ldr	r2, [pc, #624]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80045fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d013      	beq.n	8004634 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fd fd16 	bl	800203c <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004612:	e008      	b.n	8004626 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004614:	f7fd fd12 	bl	800203c <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	2b64      	cmp	r3, #100	; 0x64
 8004620:	d901      	bls.n	8004626 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e276      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004626:	4b92      	ldr	r3, [pc, #584]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0f0      	beq.n	8004614 <HAL_RCC_OscConfig+0x2a8>
 8004632:	e014      	b.n	800465e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fd fd02 	bl	800203c <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800463c:	f7fd fcfe 	bl	800203c <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b64      	cmp	r3, #100	; 0x64
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e262      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464e:	4b88      	ldr	r3, [pc, #544]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1f0      	bne.n	800463c <HAL_RCC_OscConfig+0x2d0>
 800465a:	e000      	b.n	800465e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d060      	beq.n	800472c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b04      	cmp	r3, #4
 800466e:	d005      	beq.n	800467c <HAL_RCC_OscConfig+0x310>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	2b0c      	cmp	r3, #12
 8004674:	d119      	bne.n	80046aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b02      	cmp	r3, #2
 800467a:	d116      	bne.n	80046aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800467c:	4b7c      	ldr	r3, [pc, #496]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_OscConfig+0x328>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e23f      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b76      	ldr	r3, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	4973      	ldr	r1, [pc, #460]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a8:	e040      	b.n	800472c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d023      	beq.n	80046fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046b2:	4b6f      	ldr	r3, [pc, #444]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a6e      	ldr	r2, [pc, #440]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80046b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046be:	f7fd fcbd 	bl	800203c <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c6:	f7fd fcb9 	bl	800203c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e21d      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d8:	4b65      	ldr	r3, [pc, #404]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e4:	4b62      	ldr	r3, [pc, #392]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	495f      	ldr	r1, [pc, #380]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
 80046f8:	e018      	b.n	800472c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fa:	4b5d      	ldr	r3, [pc, #372]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5c      	ldr	r2, [pc, #368]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fd fc99 	bl	800203c <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470e:	f7fd fc95 	bl	800203c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e1f9      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004720:	4b53      	ldr	r3, [pc, #332]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d03c      	beq.n	80047b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01c      	beq.n	800477a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004740:	4b4b      	ldr	r3, [pc, #300]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004746:	4a4a      	ldr	r2, [pc, #296]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fd fc74 	bl	800203c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004758:	f7fd fc70 	bl	800203c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e1d4      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476a:	4b41      	ldr	r3, [pc, #260]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 800476c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ef      	beq.n	8004758 <HAL_RCC_OscConfig+0x3ec>
 8004778:	e01b      	b.n	80047b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800477a:	4b3d      	ldr	r3, [pc, #244]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 800477c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004780:	4a3b      	ldr	r2, [pc, #236]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478a:	f7fd fc57 	bl	800203c <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004792:	f7fd fc53 	bl	800203c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e1b7      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a4:	4b32      	ldr	r3, [pc, #200]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80047a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ef      	bne.n	8004792 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0304 	and.w	r3, r3, #4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 80a6 	beq.w	800490c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047c0:	2300      	movs	r3, #0
 80047c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047c4:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10d      	bne.n	80047ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	4a26      	ldr	r2, [pc, #152]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80047d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047da:	6593      	str	r3, [r2, #88]	; 0x58
 80047dc:	4b24      	ldr	r3, [pc, #144]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	60bb      	str	r3, [r7, #8]
 80047e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e8:	2301      	movs	r3, #1
 80047ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047ec:	4b21      	ldr	r3, [pc, #132]	; (8004874 <HAL_RCC_OscConfig+0x508>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d118      	bne.n	800482a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_RCC_OscConfig+0x508>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <HAL_RCC_OscConfig+0x508>)
 80047fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004804:	f7fd fc1a 	bl	800203c <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480c:	f7fd fc16 	bl	800203c <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e17a      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481e:	4b15      	ldr	r3, [pc, #84]	; (8004874 <HAL_RCC_OscConfig+0x508>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d108      	bne.n	8004844 <HAL_RCC_OscConfig+0x4d8>
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004838:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004842:	e029      	b.n	8004898 <HAL_RCC_OscConfig+0x52c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	2b05      	cmp	r3, #5
 800484a:	d115      	bne.n	8004878 <HAL_RCC_OscConfig+0x50c>
 800484c:	4b08      	ldr	r3, [pc, #32]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	4a07      	ldr	r2, [pc, #28]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800485c:	4b04      	ldr	r3, [pc, #16]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	4a03      	ldr	r2, [pc, #12]	; (8004870 <HAL_RCC_OscConfig+0x504>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800486c:	e014      	b.n	8004898 <HAL_RCC_OscConfig+0x52c>
 800486e:	bf00      	nop
 8004870:	40021000 	.word	0x40021000
 8004874:	40007000 	.word	0x40007000
 8004878:	4b9c      	ldr	r3, [pc, #624]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 800487a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487e:	4a9b      	ldr	r2, [pc, #620]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004888:	4b98      	ldr	r3, [pc, #608]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 800488a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488e:	4a97      	ldr	r2, [pc, #604]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004890:	f023 0304 	bic.w	r3, r3, #4
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d016      	beq.n	80048ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fd fbcc 	bl	800203c <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048a8:	f7fd fbc8 	bl	800203c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e12a      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048be:	4b8b      	ldr	r3, [pc, #556]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ed      	beq.n	80048a8 <HAL_RCC_OscConfig+0x53c>
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ce:	f7fd fbb5 	bl	800203c <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048d4:	e00a      	b.n	80048ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7fd fbb1 	bl	800203c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e113      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048ec:	4b7f      	ldr	r3, [pc, #508]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1ed      	bne.n	80048d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048fa:	7ffb      	ldrb	r3, [r7, #31]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d105      	bne.n	800490c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004900:	4b7a      	ldr	r3, [pc, #488]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004904:	4a79      	ldr	r2, [pc, #484]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800490a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 80fe 	beq.w	8004b12 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	2b02      	cmp	r3, #2
 800491c:	f040 80d0 	bne.w	8004ac0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004920:	4b72      	ldr	r3, [pc, #456]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f003 0203 	and.w	r2, r3, #3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	429a      	cmp	r2, r3
 8004932:	d130      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	3b01      	subs	r3, #1
 8004940:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d127      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004952:	429a      	cmp	r2, r3
 8004954:	d11f      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004960:	2a07      	cmp	r2, #7
 8004962:	bf14      	ite	ne
 8004964:	2201      	movne	r2, #1
 8004966:	2200      	moveq	r2, #0
 8004968:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800496a:	4293      	cmp	r3, r2
 800496c:	d113      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	085b      	lsrs	r3, r3, #1
 800497a:	3b01      	subs	r3, #1
 800497c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800497e:	429a      	cmp	r2, r3
 8004980:	d109      	bne.n	8004996 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	3b01      	subs	r3, #1
 8004990:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d06e      	beq.n	8004a74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d069      	beq.n	8004a70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800499c:	4b53      	ldr	r3, [pc, #332]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d105      	bne.n	80049b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049a8:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0ad      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049b8:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a4b      	ldr	r2, [pc, #300]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 80049be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049c4:	f7fd fb3a 	bl	800203c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049cc:	f7fd fb36 	bl	800203c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e09a      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049de:	4b43      	ldr	r3, [pc, #268]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ea:	4b40      	ldr	r3, [pc, #256]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	4b40      	ldr	r3, [pc, #256]	; (8004af0 <HAL_RCC_OscConfig+0x784>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049fa:	3a01      	subs	r2, #1
 80049fc:	0112      	lsls	r2, r2, #4
 80049fe:	4311      	orrs	r1, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a04:	0212      	lsls	r2, r2, #8
 8004a06:	4311      	orrs	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a0c:	0852      	lsrs	r2, r2, #1
 8004a0e:	3a01      	subs	r2, #1
 8004a10:	0552      	lsls	r2, r2, #21
 8004a12:	4311      	orrs	r1, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a18:	0852      	lsrs	r2, r2, #1
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	0652      	lsls	r2, r2, #25
 8004a1e:	4311      	orrs	r1, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a24:	0912      	lsrs	r2, r2, #4
 8004a26:	0452      	lsls	r2, r2, #17
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	4930      	ldr	r1, [pc, #192]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a30:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2d      	ldr	r2, [pc, #180]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a3c:	4b2b      	ldr	r3, [pc, #172]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a2a      	ldr	r2, [pc, #168]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a48:	f7fd faf8 	bl	800203c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd faf4 	bl	800203c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e058      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a6e:	e050      	b.n	8004b12 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e04f      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a74:	4b1d      	ldr	r3, [pc, #116]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d148      	bne.n	8004b12 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a8c:	4b17      	ldr	r3, [pc, #92]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a98:	f7fd fad0 	bl	800203c <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fd facc 	bl	800203c <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e030      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	4b0e      	ldr	r3, [pc, #56]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x734>
 8004abe:	e028      	b.n	8004b12 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	2b0c      	cmp	r3, #12
 8004ac4:	d023      	beq.n	8004b0e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac6:	4b09      	ldr	r3, [pc, #36]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a08      	ldr	r2, [pc, #32]	; (8004aec <HAL_RCC_OscConfig+0x780>)
 8004acc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad2:	f7fd fab3 	bl	800203c <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ad8:	e00c      	b.n	8004af4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fd faaf 	bl	800203c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d905      	bls.n	8004af4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e013      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
 8004aec:	40021000 	.word	0x40021000
 8004af0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <HAL_RCC_OscConfig+0x7b0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ec      	bne.n	8004ada <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b00:	4b06      	ldr	r3, [pc, #24]	; (8004b1c <HAL_RCC_OscConfig+0x7b0>)
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	4905      	ldr	r1, [pc, #20]	; (8004b1c <HAL_RCC_OscConfig+0x7b0>)
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_RCC_OscConfig+0x7b4>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60cb      	str	r3, [r1, #12]
 8004b0c:	e001      	b.n	8004b12 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3720      	adds	r7, #32
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	feeefffc 	.word	0xfeeefffc

08004b24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e0e7      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b38:	4b75      	ldr	r3, [pc, #468]	; (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d910      	bls.n	8004b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b72      	ldr	r3, [pc, #456]	; (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 0207 	bic.w	r2, r3, #7
 8004b4e:	4970      	ldr	r1, [pc, #448]	; (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b6e      	ldr	r3, [pc, #440]	; (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e0cf      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	4b66      	ldr	r3, [pc, #408]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d908      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b63      	ldr	r3, [pc, #396]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	4960      	ldr	r1, [pc, #384]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d04c      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004baa:	4b5a      	ldr	r3, [pc, #360]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d121      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e0a6      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc2:	4b54      	ldr	r3, [pc, #336]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d115      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e09a      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bda:	4b4e      	ldr	r3, [pc, #312]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e08e      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bea:	4b4a      	ldr	r3, [pc, #296]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e086      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bfa:	4b46      	ldr	r3, [pc, #280]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4943      	ldr	r1, [pc, #268]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0c:	f7fd fa16 	bl	800203c <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fd fa12 	bl	800203c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e06e      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b3a      	ldr	r3, [pc, #232]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 020c 	and.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1eb      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d010      	beq.n	8004c6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	4b31      	ldr	r3, [pc, #196]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d208      	bcs.n	8004c6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b2e      	ldr	r3, [pc, #184]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	492b      	ldr	r1, [pc, #172]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c6a:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d210      	bcs.n	8004c9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c78:	4b25      	ldr	r3, [pc, #148]	; (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f023 0207 	bic.w	r2, r3, #7
 8004c80:	4923      	ldr	r1, [pc, #140]	; (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <HAL_RCC_ClockConfig+0x1ec>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d001      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e036      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d008      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	4918      	ldr	r1, [pc, #96]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0308 	and.w	r3, r3, #8
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4910      	ldr	r1, [pc, #64]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cd8:	f000 f824 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	490b      	ldr	r1, [pc, #44]	; (8004d18 <HAL_RCC_ClockConfig+0x1f4>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf4:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <HAL_RCC_ClockConfig+0x1f8>)
 8004cf6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <HAL_RCC_ClockConfig+0x1fc>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fd f94d 	bl	8001f9c <HAL_InitTick>
 8004d02:	4603      	mov	r3, r0
 8004d04:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d06:	7afb      	ldrb	r3, [r7, #11]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40022000 	.word	0x40022000
 8004d14:	40021000 	.word	0x40021000
 8004d18:	08008840 	.word	0x08008840
 8004d1c:	20000008 	.word	0x20000008
 8004d20:	2000000c 	.word	0x2000000c

08004d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b089      	sub	sp, #36	; 0x24
 8004d28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d32:	4b3e      	ldr	r3, [pc, #248]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0303 	and.w	r3, r3, #3
 8004d44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d005      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x34>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b0c      	cmp	r3, #12
 8004d50:	d121      	bne.n	8004d96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d11e      	bne.n	8004d96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d58:	4b34      	ldr	r3, [pc, #208]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d64:	4b31      	ldr	r3, [pc, #196]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	e005      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d74:	4b2d      	ldr	r3, [pc, #180]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d80:	4a2b      	ldr	r2, [pc, #172]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10d      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d94:	e00a      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d102      	bne.n	8004da2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d9c:	4b25      	ldr	r3, [pc, #148]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d9e:	61bb      	str	r3, [r7, #24]
 8004da0:	e004      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b08      	cmp	r3, #8
 8004da6:	d101      	bne.n	8004dac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004da8:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004daa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b0c      	cmp	r3, #12
 8004db0:	d134      	bne.n	8004e1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004db2:	4b1e      	ldr	r3, [pc, #120]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_GetSysClockFreq+0xa6>
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d003      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0xac>
 8004dc8:	e005      	b.n	8004dd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dcc:	617b      	str	r3, [r7, #20]
      break;
 8004dce:	e005      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dd0:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dd2:	617b      	str	r3, [r7, #20]
      break;
 8004dd4:	e002      	b.n	8004ddc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	617b      	str	r3, [r7, #20]
      break;
 8004dda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	091b      	lsrs	r3, r3, #4
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	3301      	adds	r3, #1
 8004de8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dea:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	fb03 f202 	mul.w	r2, r3, r2
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e02:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	0e5b      	lsrs	r3, r3, #25
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3724      	adds	r7, #36	; 0x24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	08008858 	.word	0x08008858
 8004e34:	00f42400 	.word	0x00f42400
 8004e38:	007a1200 	.word	0x007a1200

08004e3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e40:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e42:	681b      	ldr	r3, [r3, #0]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	20000008 	.word	0x20000008

08004e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e58:	f7ff fff0 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	4904      	ldr	r1, [pc, #16]	; (8004e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	08008850 	.word	0x08008850

08004e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e84:	f7ff ffda 	bl	8004e3c <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	0adb      	lsrs	r3, r3, #11
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4904      	ldr	r1, [pc, #16]	; (8004ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	08008850 	.word	0x08008850

08004eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ec4:	f7ff f9ee 	bl	80042a4 <HAL_PWREx_GetVoltageRange>
 8004ec8:	6178      	str	r0, [r7, #20]
 8004eca:	e014      	b.n	8004ef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ecc:	4b25      	ldr	r3, [pc, #148]	; (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ed8:	4b22      	ldr	r3, [pc, #136]	; (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ee4:	f7ff f9de 	bl	80042a4 <HAL_PWREx_GetVoltageRange>
 8004ee8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eea:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eee:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efc:	d10b      	bne.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b80      	cmp	r3, #128	; 0x80
 8004f02:	d919      	bls.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2ba0      	cmp	r3, #160	; 0xa0
 8004f08:	d902      	bls.n	8004f10 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	613b      	str	r3, [r7, #16]
 8004f0e:	e013      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f10:	2301      	movs	r3, #1
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e010      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b80      	cmp	r3, #128	; 0x80
 8004f1a:	d902      	bls.n	8004f22 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	e00a      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b80      	cmp	r3, #128	; 0x80
 8004f26:	d102      	bne.n	8004f2e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f28:	2302      	movs	r3, #2
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	e004      	b.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b70      	cmp	r3, #112	; 0x70
 8004f32:	d101      	bne.n	8004f38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f34:	2301      	movs	r3, #1
 8004f36:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f023 0207 	bic.w	r2, r3, #7
 8004f40:	4909      	ldr	r1, [pc, #36]	; (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f48:	4b07      	ldr	r3, [pc, #28]	; (8004f68 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d001      	beq.n	8004f5a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40022000 	.word	0x40022000

08004f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f74:	2300      	movs	r3, #0
 8004f76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f78:	2300      	movs	r3, #0
 8004f7a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d041      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f90:	d02a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004f92:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f96:	d824      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f9c:	d008      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f9e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fa2:	d81e      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fac:	d010      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004fae:	e018      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fb0:	4b86      	ldr	r3, [pc, #536]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	4a85      	ldr	r2, [pc, #532]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fbc:	e015      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 fabb 	bl	8005540 <RCCEx_PLLSAI1_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fce:	e00c      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3320      	adds	r3, #32
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fba6 	bl	8005728 <RCCEx_PLLSAI2_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	74fb      	strb	r3, [r7, #19]
      break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fea:	7cfb      	ldrb	r3, [r7, #19]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10b      	bne.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff0:	4b76      	ldr	r3, [pc, #472]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ffe:	4973      	ldr	r1, [pc, #460]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005006:	e001      	b.n	800500c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005008:	7cfb      	ldrb	r3, [r7, #19]
 800500a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d041      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800501c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005020:	d02a      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005022:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005026:	d824      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800502c:	d008      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800502e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005032:	d81e      	bhi.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800503c:	d010      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800503e:	e018      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005040:	4b62      	ldr	r3, [pc, #392]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	4a61      	ldr	r2, [pc, #388]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800504c:	e015      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	2100      	movs	r1, #0
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fa73 	bl	8005540 <RCCEx_PLLSAI1_Config>
 800505a:	4603      	mov	r3, r0
 800505c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800505e:	e00c      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3320      	adds	r3, #32
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fb5e 	bl	8005728 <RCCEx_PLLSAI2_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005070:	e003      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	74fb      	strb	r3, [r7, #19]
      break;
 8005076:	e000      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800507a:	7cfb      	ldrb	r3, [r7, #19]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005080:	4b52      	ldr	r3, [pc, #328]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005086:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800508e:	494f      	ldr	r1, [pc, #316]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005090:	4313      	orrs	r3, r2
 8005092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005096:	e001      	b.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005098:	7cfb      	ldrb	r3, [r7, #19]
 800509a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80a0 	beq.w	80051ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050aa:	2300      	movs	r3, #0
 80050ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050ae:	4b47      	ldr	r3, [pc, #284]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e000      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80050be:	2300      	movs	r3, #0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c4:	4b41      	ldr	r3, [pc, #260]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	4a40      	ldr	r2, [pc, #256]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ce:	6593      	str	r3, [r2, #88]	; 0x58
 80050d0:	4b3e      	ldr	r3, [pc, #248]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050dc:	2301      	movs	r3, #1
 80050de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050e0:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a3a      	ldr	r2, [pc, #232]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80050e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050ec:	f7fc ffa6 	bl	800203c <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050f2:	e009      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f4:	f7fc ffa2 	bl	800203c <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d902      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	74fb      	strb	r3, [r7, #19]
        break;
 8005106:	e005      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005108:	4b31      	ldr	r3, [pc, #196]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ef      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d15c      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800511a:	4b2c      	ldr	r3, [pc, #176]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005124:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01f      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	d019      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005138:	4b24      	ldr	r3, [pc, #144]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514a:	4a20      	ldr	r2, [pc, #128]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800514c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	4a1c      	ldr	r2, [pc, #112]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800515c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005164:	4a19      	ldr	r2, [pc, #100]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b00      	cmp	r3, #0
 8005174:	d016      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fc ff61 	bl	800203c <HAL_GetTick>
 800517a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800517c:	e00b      	b.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fc ff5d 	bl	800203c <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f241 3288 	movw	r2, #5000	; 0x1388
 800518c:	4293      	cmp	r3, r2
 800518e:	d902      	bls.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	74fb      	strb	r3, [r7, #19]
            break;
 8005194:	e006      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0ec      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051aa:	4b08      	ldr	r3, [pc, #32]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ba:	4904      	ldr	r1, [pc, #16]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051bc:	4313      	orrs	r3, r2
 80051be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80051c2:	e009      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80051c4:	7cfb      	ldrb	r3, [r7, #19]
 80051c6:	74bb      	strb	r3, [r7, #18]
 80051c8:	e006      	b.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80051ca:	bf00      	nop
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051d8:	7c7b      	ldrb	r3, [r7, #17]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d105      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051de:	4b9e      	ldr	r3, [pc, #632]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e2:	4a9d      	ldr	r2, [pc, #628]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051f6:	4b98      	ldr	r3, [pc, #608]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f023 0203 	bic.w	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	4994      	ldr	r1, [pc, #592]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005218:	4b8f      	ldr	r3, [pc, #572]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f023 020c 	bic.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	498c      	ldr	r1, [pc, #560]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800523a:	4b87      	ldr	r3, [pc, #540]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	4983      	ldr	r1, [pc, #524]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800525c:	4b7e      	ldr	r3, [pc, #504]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	497b      	ldr	r1, [pc, #492]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800527e:	4b76      	ldr	r3, [pc, #472]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528c:	4972      	ldr	r1, [pc, #456]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052a0:	4b6d      	ldr	r3, [pc, #436]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ae:	496a      	ldr	r1, [pc, #424]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052c2:	4b65      	ldr	r3, [pc, #404]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d0:	4961      	ldr	r1, [pc, #388]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80052e4:	4b5c      	ldr	r3, [pc, #368]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f2:	4959      	ldr	r1, [pc, #356]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005306:	4b54      	ldr	r3, [pc, #336]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005314:	4950      	ldr	r1, [pc, #320]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005316:	4313      	orrs	r3, r2
 8005318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005328:	4b4b      	ldr	r3, [pc, #300]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800532a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005336:	4948      	ldr	r1, [pc, #288]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005338:	4313      	orrs	r3, r2
 800533a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800534a:	4b43      	ldr	r3, [pc, #268]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005358:	493f      	ldr	r1, [pc, #252]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d028      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800536c:	4b3a      	ldr	r3, [pc, #232]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800537a:	4937      	ldr	r1, [pc, #220]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005386:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800538a:	d106      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800538c:	4b32      	ldr	r3, [pc, #200]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	4a31      	ldr	r2, [pc, #196]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005396:	60d3      	str	r3, [r2, #12]
 8005398:	e011      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053a2:	d10c      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	2101      	movs	r1, #1
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f8c8 	bl	8005540 <RCCEx_PLLSAI1_Config>
 80053b0:	4603      	mov	r3, r0
 80053b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80053ba:	7cfb      	ldrb	r3, [r7, #19]
 80053bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d028      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053ca:	4b23      	ldr	r3, [pc, #140]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	491f      	ldr	r1, [pc, #124]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e8:	d106      	bne.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	4a1a      	ldr	r2, [pc, #104]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053f4:	60d3      	str	r3, [r2, #12]
 80053f6:	e011      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005400:	d10c      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3304      	adds	r3, #4
 8005406:	2101      	movs	r1, #1
 8005408:	4618      	mov	r0, r3
 800540a:	f000 f899 	bl	8005540 <RCCEx_PLLSAI1_Config>
 800540e:	4603      	mov	r3, r0
 8005410:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005412:	7cfb      	ldrb	r3, [r7, #19]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005424:	2b00      	cmp	r3, #0
 8005426:	d02b      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005428:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005436:	4908      	ldr	r1, [pc, #32]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005438:	4313      	orrs	r3, r2
 800543a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005446:	d109      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005448:	4b03      	ldr	r3, [pc, #12]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4a02      	ldr	r2, [pc, #8]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800544e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005452:	60d3      	str	r3, [r2, #12]
 8005454:	e014      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005456:	bf00      	nop
 8005458:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005464:	d10c      	bne.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3304      	adds	r3, #4
 800546a:	2101      	movs	r1, #1
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f867 	bl	8005540 <RCCEx_PLLSAI1_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005476:	7cfb      	ldrb	r3, [r7, #19]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800547c:	7cfb      	ldrb	r3, [r7, #19]
 800547e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d02f      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800548c:	4b2b      	ldr	r3, [pc, #172]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800549a:	4928      	ldr	r1, [pc, #160]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054aa:	d10d      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	2102      	movs	r1, #2
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 f844 	bl	8005540 <RCCEx_PLLSAI1_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d014      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054c2:	7cfb      	ldrb	r3, [r7, #19]
 80054c4:	74bb      	strb	r3, [r7, #18]
 80054c6:	e011      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d0:	d10c      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	3320      	adds	r3, #32
 80054d6:	2102      	movs	r1, #2
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 f925 	bl	8005728 <RCCEx_PLLSAI2_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054e2:	7cfb      	ldrb	r3, [r7, #19]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80054e8:	7cfb      	ldrb	r3, [r7, #19]
 80054ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054f8:	4b10      	ldr	r3, [pc, #64]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005506:	490d      	ldr	r1, [pc, #52]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800551a:	4b08      	ldr	r3, [pc, #32]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005520:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800552a:	4904      	ldr	r1, [pc, #16]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005532:	7cbb      	ldrb	r3, [r7, #18]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40021000 	.word	0x40021000

08005540 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800554e:	4b75      	ldr	r3, [pc, #468]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d018      	beq.n	800558c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800555a:	4b72      	ldr	r3, [pc, #456]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0203 	and.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d10d      	bne.n	8005586 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
       ||
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005572:	4b6c      	ldr	r3, [pc, #432]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	091b      	lsrs	r3, r3, #4
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
       ||
 8005582:	429a      	cmp	r2, r3
 8005584:	d047      	beq.n	8005616 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	73fb      	strb	r3, [r7, #15]
 800558a:	e044      	b.n	8005616 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d018      	beq.n	80055c6 <RCCEx_PLLSAI1_Config+0x86>
 8005594:	2b03      	cmp	r3, #3
 8005596:	d825      	bhi.n	80055e4 <RCCEx_PLLSAI1_Config+0xa4>
 8005598:	2b01      	cmp	r3, #1
 800559a:	d002      	beq.n	80055a2 <RCCEx_PLLSAI1_Config+0x62>
 800559c:	2b02      	cmp	r3, #2
 800559e:	d009      	beq.n	80055b4 <RCCEx_PLLSAI1_Config+0x74>
 80055a0:	e020      	b.n	80055e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055a2:	4b60      	ldr	r3, [pc, #384]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d11d      	bne.n	80055ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055b2:	e01a      	b.n	80055ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055b4:	4b5b      	ldr	r3, [pc, #364]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d116      	bne.n	80055ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055c4:	e013      	b.n	80055ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80055c6:	4b57      	ldr	r3, [pc, #348]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10f      	bne.n	80055f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80055d2:	4b54      	ldr	r3, [pc, #336]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80055e2:	e006      	b.n	80055f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
      break;
 80055e8:	e004      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ea:	bf00      	nop
 80055ec:	e002      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055ee:	bf00      	nop
 80055f0:	e000      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80055f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10d      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80055fa:	4b4a      	ldr	r3, [pc, #296]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6819      	ldr	r1, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	3b01      	subs	r3, #1
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	430b      	orrs	r3, r1
 8005610:	4944      	ldr	r1, [pc, #272]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	4313      	orrs	r3, r2
 8005614:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d17d      	bne.n	8005718 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800561c:	4b41      	ldr	r3, [pc, #260]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a40      	ldr	r2, [pc, #256]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005628:	f7fc fd08 	bl	800203c <HAL_GetTick>
 800562c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800562e:	e009      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005630:	f7fc fd04 	bl	800203c <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d902      	bls.n	8005644 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	73fb      	strb	r3, [r7, #15]
        break;
 8005642:	e005      	b.n	8005650 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005644:	4b37      	ldr	r3, [pc, #220]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1ef      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d160      	bne.n	8005718 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d111      	bne.n	8005680 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800565c:	4b31      	ldr	r3, [pc, #196]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6892      	ldr	r2, [r2, #8]
 800566c:	0211      	lsls	r1, r2, #8
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68d2      	ldr	r2, [r2, #12]
 8005672:	0912      	lsrs	r2, r2, #4
 8005674:	0452      	lsls	r2, r2, #17
 8005676:	430a      	orrs	r2, r1
 8005678:	492a      	ldr	r1, [pc, #168]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800567a:	4313      	orrs	r3, r2
 800567c:	610b      	str	r3, [r1, #16]
 800567e:	e027      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d112      	bne.n	80056ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005686:	4b27      	ldr	r3, [pc, #156]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800568e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6892      	ldr	r2, [r2, #8]
 8005696:	0211      	lsls	r1, r2, #8
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6912      	ldr	r2, [r2, #16]
 800569c:	0852      	lsrs	r2, r2, #1
 800569e:	3a01      	subs	r2, #1
 80056a0:	0552      	lsls	r2, r2, #21
 80056a2:	430a      	orrs	r2, r1
 80056a4:	491f      	ldr	r1, [pc, #124]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	610b      	str	r3, [r1, #16]
 80056aa:	e011      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ac:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6892      	ldr	r2, [r2, #8]
 80056bc:	0211      	lsls	r1, r2, #8
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6952      	ldr	r2, [r2, #20]
 80056c2:	0852      	lsrs	r2, r2, #1
 80056c4:	3a01      	subs	r2, #1
 80056c6:	0652      	lsls	r2, r2, #25
 80056c8:	430a      	orrs	r2, r1
 80056ca:	4916      	ldr	r1, [pc, #88]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80056d0:	4b14      	ldr	r3, [pc, #80]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a13      	ldr	r2, [pc, #76]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056dc:	f7fc fcae 	bl	800203c <HAL_GetTick>
 80056e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056e2:	e009      	b.n	80056f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056e4:	f7fc fcaa 	bl	800203c <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d902      	bls.n	80056f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	73fb      	strb	r3, [r7, #15]
          break;
 80056f6:	e005      	b.n	8005704 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d0ef      	beq.n	80056e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005704:	7bfb      	ldrb	r3, [r7, #15]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d106      	bne.n	8005718 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	4904      	ldr	r1, [pc, #16]	; (8005724 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005714:	4313      	orrs	r3, r2
 8005716:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005718:	7bfb      	ldrb	r3, [r7, #15]
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000

08005728 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005736:	4b6a      	ldr	r3, [pc, #424]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d018      	beq.n	8005774 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005742:	4b67      	ldr	r3, [pc, #412]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0203 	and.w	r2, r3, #3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d10d      	bne.n	800576e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
       ||
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800575a:	4b61      	ldr	r3, [pc, #388]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	091b      	lsrs	r3, r3, #4
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	1c5a      	adds	r2, r3, #1
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
       ||
 800576a:	429a      	cmp	r2, r3
 800576c:	d047      	beq.n	80057fe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
 8005772:	e044      	b.n	80057fe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b03      	cmp	r3, #3
 800577a:	d018      	beq.n	80057ae <RCCEx_PLLSAI2_Config+0x86>
 800577c:	2b03      	cmp	r3, #3
 800577e:	d825      	bhi.n	80057cc <RCCEx_PLLSAI2_Config+0xa4>
 8005780:	2b01      	cmp	r3, #1
 8005782:	d002      	beq.n	800578a <RCCEx_PLLSAI2_Config+0x62>
 8005784:	2b02      	cmp	r3, #2
 8005786:	d009      	beq.n	800579c <RCCEx_PLLSAI2_Config+0x74>
 8005788:	e020      	b.n	80057cc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800578a:	4b55      	ldr	r3, [pc, #340]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11d      	bne.n	80057d2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800579a:	e01a      	b.n	80057d2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800579c:	4b50      	ldr	r3, [pc, #320]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d116      	bne.n	80057d6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057ac:	e013      	b.n	80057d6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057ae:	4b4c      	ldr	r3, [pc, #304]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10f      	bne.n	80057da <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057ba:	4b49      	ldr	r3, [pc, #292]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d109      	bne.n	80057da <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ca:	e006      	b.n	80057da <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      break;
 80057d0:	e004      	b.n	80057dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057d2:	bf00      	nop
 80057d4:	e002      	b.n	80057dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80057da:	bf00      	nop
    }

    if(status == HAL_OK)
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10d      	bne.n	80057fe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057e2:	4b3f      	ldr	r3, [pc, #252]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6819      	ldr	r1, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	430b      	orrs	r3, r1
 80057f8:	4939      	ldr	r1, [pc, #228]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d167      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005804:	4b36      	ldr	r3, [pc, #216]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a35      	ldr	r2, [pc, #212]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800580e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005810:	f7fc fc14 	bl	800203c <HAL_GetTick>
 8005814:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005816:	e009      	b.n	800582c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005818:	f7fc fc10 	bl	800203c <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d902      	bls.n	800582c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	73fb      	strb	r3, [r7, #15]
        break;
 800582a:	e005      	b.n	8005838 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800582c:	4b2c      	ldr	r3, [pc, #176]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1ef      	bne.n	8005818 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005838:	7bfb      	ldrb	r3, [r7, #15]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d14a      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d111      	bne.n	8005868 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005844:	4b26      	ldr	r3, [pc, #152]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005846:	695b      	ldr	r3, [r3, #20]
 8005848:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800584c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	6892      	ldr	r2, [r2, #8]
 8005854:	0211      	lsls	r1, r2, #8
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68d2      	ldr	r2, [r2, #12]
 800585a:	0912      	lsrs	r2, r2, #4
 800585c:	0452      	lsls	r2, r2, #17
 800585e:	430a      	orrs	r2, r1
 8005860:	491f      	ldr	r1, [pc, #124]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005862:	4313      	orrs	r3, r2
 8005864:	614b      	str	r3, [r1, #20]
 8005866:	e011      	b.n	800588c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005868:	4b1d      	ldr	r3, [pc, #116]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005870:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6892      	ldr	r2, [r2, #8]
 8005878:	0211      	lsls	r1, r2, #8
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	6912      	ldr	r2, [r2, #16]
 800587e:	0852      	lsrs	r2, r2, #1
 8005880:	3a01      	subs	r2, #1
 8005882:	0652      	lsls	r2, r2, #25
 8005884:	430a      	orrs	r2, r1
 8005886:	4916      	ldr	r1, [pc, #88]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005888:	4313      	orrs	r3, r2
 800588a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800588c:	4b14      	ldr	r3, [pc, #80]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fc fbd0 	bl	800203c <HAL_GetTick>
 800589c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800589e:	e009      	b.n	80058b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058a0:	f7fc fbcc 	bl	800203c <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d902      	bls.n	80058b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	73fb      	strb	r3, [r7, #15]
          break;
 80058b2:	e005      	b.n	80058c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80058b4:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0ef      	beq.n	80058a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80058c0:	7bfb      	ldrb	r3, [r7, #15]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80058c6:	4b06      	ldr	r3, [pc, #24]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	4904      	ldr	r1, [pc, #16]	; (80058e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40021000 	.word	0x40021000

080058e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e040      	b.n	8005978 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fc f9d6 	bl	8001cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2224      	movs	r2, #36	; 0x24
 8005910:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fe8a 	bl	8006644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fbcf 	bl	80060d4 <UART_SetConfig>
 8005936:	4603      	mov	r3, r0
 8005938:	2b01      	cmp	r3, #1
 800593a:	d101      	bne.n	8005940 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e01b      	b.n	8005978 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800594e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	689a      	ldr	r2, [r3, #8]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800595e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 ff09 	bl	8006788 <UART_CheckIdleState>
 8005976:	4603      	mov	r3, r0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005980:	b480      	push	{r7}
 8005982:	b08b      	sub	sp, #44	; 0x2c
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	4613      	mov	r3, r2
 800598c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005992:	2b20      	cmp	r3, #32
 8005994:	d147      	bne.n	8005a26 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_UART_Transmit_IT+0x22>
 800599c:	88fb      	ldrh	r3, [r7, #6]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e040      	b.n	8005a28 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	88fa      	ldrh	r2, [r7, #6]
 80059b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2221      	movs	r2, #33	; 0x21
 80059ce:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059d8:	d107      	bne.n	80059ea <HAL_UART_Transmit_IT+0x6a>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <HAL_UART_Transmit_IT+0xb4>)
 80059e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80059e8:	e002      	b.n	80059f0 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <HAL_UART_Transmit_IT+0xb8>)
 80059ee:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	613b      	str	r3, [r7, #16]
   return(result);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	623b      	str	r3, [r7, #32]
 8005a10:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	69f9      	ldr	r1, [r7, #28]
 8005a14:	6a3a      	ldr	r2, [r7, #32]
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e6      	bne.n	80059f0 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005a22:	2300      	movs	r3, #0
 8005a24:	e000      	b.n	8005a28 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005a26:	2302      	movs	r3, #2
  }
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	372c      	adds	r7, #44	; 0x2c
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr
 8005a34:	08006ce1 	.word	0x08006ce1
 8005a38:	08006c29 	.word	0x08006c29

08005a3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	; 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d137      	bne.n	8005ac4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_UART_Receive_IT+0x24>
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e030      	b.n	8005ac6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_UART_Receive_IT+0x94>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d01f      	beq.n	8005ab4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d018      	beq.n	8005ab4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	e853 3f00 	ldrex	r3, [r3]
 8005a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a96:	627b      	str	r3, [r7, #36]	; 0x24
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	623b      	str	r3, [r7, #32]
 8005aa2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	69f9      	ldr	r1, [r7, #28]
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e6      	bne.n	8005a82 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ab4:	88fb      	ldrh	r3, [r7, #6]
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	68b9      	ldr	r1, [r7, #8]
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 ff74 	bl	80069a8 <UART_Start_Receive_IT>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	e000      	b.n	8005ac6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
  }
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3728      	adds	r7, #40	; 0x28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	40008000 	.word	0x40008000

08005ad4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b0ba      	sub	sp, #232	; 0xe8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005afa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005afe:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b02:	4013      	ands	r3, r2
 8005b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d115      	bne.n	8005b3c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00f      	beq.n	8005b3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b20:	f003 0320 	and.w	r3, r3, #32
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d009      	beq.n	8005b3c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 82ae 	beq.w	800608e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
      }
      return;
 8005b3a:	e2a8      	b.n	800608e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005b3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8117 	beq.w	8005d74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b56:	4b85      	ldr	r3, [pc, #532]	; (8005d6c <HAL_UART_IRQHandler+0x298>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 810a 	beq.w	8005d74 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d011      	beq.n	8005b90 <HAL_UART_IRQHandler+0xbc>
 8005b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00b      	beq.n	8005b90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d011      	beq.n	8005bc0 <HAL_UART_IRQHandler+0xec>
 8005b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00b      	beq.n	8005bc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2202      	movs	r2, #2
 8005bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bb6:	f043 0204 	orr.w	r2, r3, #4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d011      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x11c>
 8005bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00b      	beq.n	8005bf0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2204      	movs	r2, #4
 8005bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be6:	f043 0202 	orr.w	r2, r3, #2
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d017      	beq.n	8005c2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d105      	bne.n	8005c14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2208      	movs	r2, #8
 8005c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c22:	f043 0208 	orr.w	r2, r3, #8
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d012      	beq.n	8005c5e <HAL_UART_IRQHandler+0x18a>
 8005c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00c      	beq.n	8005c5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c54:	f043 0220 	orr.w	r2, r3, #32
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8214 	beq.w	8006092 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f003 0320 	and.w	r3, r3, #32
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00d      	beq.n	8005c92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c7a:	f003 0320 	and.w	r3, r3, #32
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d007      	beq.n	8005c92 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca6:	2b40      	cmp	r3, #64	; 0x40
 8005ca8:	d005      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d04f      	beq.n	8005d56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 ff3c 	bl	8006b34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	d141      	bne.n	8005d4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3308      	adds	r3, #8
 8005cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ce0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ce4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3308      	adds	r3, #8
 8005cf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1d9      	bne.n	8005cca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d013      	beq.n	8005d46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d22:	4a13      	ldr	r2, [pc, #76]	; (8005d70 <HAL_UART_IRQHandler+0x29c>)
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fd ffee 	bl	8003d0c <HAL_DMA_Abort_IT>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d017      	beq.n	8005d66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d40:	4610      	mov	r0, r2
 8005d42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	e00f      	b.n	8005d66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9ae 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	e00b      	b.n	8005d66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9aa 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d54:	e007      	b.n	8005d66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f000 f9a6 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005d64:	e195      	b.n	8006092 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d66:	bf00      	nop
    return;
 8005d68:	e193      	b.n	8006092 <HAL_UART_IRQHandler+0x5be>
 8005d6a:	bf00      	nop
 8005d6c:	04000120 	.word	0x04000120
 8005d70:	08006bfd 	.word	0x08006bfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	f040 814e 	bne.w	800601a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8147 	beq.w	800601a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8140 	beq.w	800601a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2210      	movs	r2, #16
 8005da0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b40      	cmp	r3, #64	; 0x40
 8005dae:	f040 80b8 	bne.w	8005f22 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dbe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 8167 	beq.w	8006096 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	f080 815f 	bcs.w	8006096 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 8086 	bne.w	8005f00 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1da      	bne.n	8005df4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3308      	adds	r3, #8
 8005e44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e48:	e853 3f00 	ldrex	r3, [r3]
 8005e4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e50:	f023 0301 	bic.w	r3, r3, #1
 8005e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e6e:	e841 2300 	strex	r3, r2, [r1]
 8005e72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e1      	bne.n	8005e3e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	3308      	adds	r3, #8
 8005e80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ea0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e3      	bne.n	8005e7a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ece:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed0:	f023 0310 	bic.w	r3, r3, #16
 8005ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ee2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ee8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e4      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fd fec8 	bl	8003c90 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f8ce 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f20:	e0b9      	b.n	8006096 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80ab 	beq.w	800609a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8005f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80a6 	beq.w	800609a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f70:	647b      	str	r3, [r7, #68]	; 0x44
 8005f72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e4      	bne.n	8005f4e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	3308      	adds	r3, #8
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	623b      	str	r3, [r7, #32]
   return(result);
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	f023 0301 	bic.w	r3, r3, #1
 8005f9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fa8:	633a      	str	r2, [r7, #48]	; 0x30
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e3      	bne.n	8005f84 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f023 0310 	bic.w	r3, r3, #16
 8005fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	461a      	mov	r2, r3
 8005fee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ff2:	61fb      	str	r3, [r7, #28]
 8005ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	69b9      	ldr	r1, [r7, #24]
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e4      	bne.n	8005fd0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2202      	movs	r2, #2
 800600a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800600c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f852 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006018:	e03f      	b.n	800609a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800601a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00e      	beq.n	8006044 <HAL_UART_IRQHandler+0x570>
 8006026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800602a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d008      	beq.n	8006044 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800603a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f001 f895 	bl	800716c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006042:	e02d      	b.n	80060a0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00e      	beq.n	800606e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006060:	2b00      	cmp	r3, #0
 8006062:	d01c      	beq.n	800609e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
    }
    return;
 800606c:	e017      	b.n	800609e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d012      	beq.n	80060a0 <HAL_UART_IRQHandler+0x5cc>
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00c      	beq.n	80060a0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fe8a 	bl	8006da0 <UART_EndTransmit_IT>
    return;
 800608c:	e008      	b.n	80060a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800608e:	bf00      	nop
 8006090:	e006      	b.n	80060a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8006092:	bf00      	nop
 8006094:	e004      	b.n	80060a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8006096:	bf00      	nop
 8006098:	e002      	b.n	80060a0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800609a:	bf00      	nop
 800609c:	e000      	b.n	80060a0 <HAL_UART_IRQHandler+0x5cc>
    return;
 800609e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80060a0:	37e8      	adds	r7, #232	; 0xe8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop

080060a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d8:	b08a      	sub	sp, #40	; 0x28
 80060da:	af00      	add	r7, sp, #0
 80060dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4ba4      	ldr	r3, [pc, #656]	; (8006394 <UART_SetConfig+0x2c0>)
 8006104:	4013      	ands	r3, r2
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800610c:	430b      	orrs	r3, r1
 800610e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a99      	ldr	r2, [pc, #612]	; (8006398 <UART_SetConfig+0x2c4>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613c:	4313      	orrs	r3, r2
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006150:	430a      	orrs	r2, r1
 8006152:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a90      	ldr	r2, [pc, #576]	; (800639c <UART_SetConfig+0x2c8>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d126      	bne.n	80061ac <UART_SetConfig+0xd8>
 800615e:	4b90      	ldr	r3, [pc, #576]	; (80063a0 <UART_SetConfig+0x2cc>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006164:	f003 0303 	and.w	r3, r3, #3
 8006168:	2b03      	cmp	r3, #3
 800616a:	d81b      	bhi.n	80061a4 <UART_SetConfig+0xd0>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0xa0>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	08006185 	.word	0x08006185
 8006178:	08006195 	.word	0x08006195
 800617c:	0800618d 	.word	0x0800618d
 8006180:	0800619d 	.word	0x0800619d
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800618a:	e116      	b.n	80063ba <UART_SetConfig+0x2e6>
 800618c:	2302      	movs	r3, #2
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006192:	e112      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006194:	2304      	movs	r3, #4
 8006196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800619a:	e10e      	b.n	80063ba <UART_SetConfig+0x2e6>
 800619c:	2308      	movs	r3, #8
 800619e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061a2:	e10a      	b.n	80063ba <UART_SetConfig+0x2e6>
 80061a4:	2310      	movs	r3, #16
 80061a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061aa:	e106      	b.n	80063ba <UART_SetConfig+0x2e6>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a7c      	ldr	r2, [pc, #496]	; (80063a4 <UART_SetConfig+0x2d0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d138      	bne.n	8006228 <UART_SetConfig+0x154>
 80061b6:	4b7a      	ldr	r3, [pc, #488]	; (80063a0 <UART_SetConfig+0x2cc>)
 80061b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061bc:	f003 030c 	and.w	r3, r3, #12
 80061c0:	2b0c      	cmp	r3, #12
 80061c2:	d82d      	bhi.n	8006220 <UART_SetConfig+0x14c>
 80061c4:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <UART_SetConfig+0xf8>)
 80061c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ca:	bf00      	nop
 80061cc:	08006201 	.word	0x08006201
 80061d0:	08006221 	.word	0x08006221
 80061d4:	08006221 	.word	0x08006221
 80061d8:	08006221 	.word	0x08006221
 80061dc:	08006211 	.word	0x08006211
 80061e0:	08006221 	.word	0x08006221
 80061e4:	08006221 	.word	0x08006221
 80061e8:	08006221 	.word	0x08006221
 80061ec:	08006209 	.word	0x08006209
 80061f0:	08006221 	.word	0x08006221
 80061f4:	08006221 	.word	0x08006221
 80061f8:	08006221 	.word	0x08006221
 80061fc:	08006219 	.word	0x08006219
 8006200:	2300      	movs	r3, #0
 8006202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006206:	e0d8      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006208:	2302      	movs	r3, #2
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620e:	e0d4      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006210:	2304      	movs	r3, #4
 8006212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006216:	e0d0      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006218:	2308      	movs	r3, #8
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800621e:	e0cc      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006220:	2310      	movs	r3, #16
 8006222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006226:	e0c8      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a5e      	ldr	r2, [pc, #376]	; (80063a8 <UART_SetConfig+0x2d4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d125      	bne.n	800627e <UART_SetConfig+0x1aa>
 8006232:	4b5b      	ldr	r3, [pc, #364]	; (80063a0 <UART_SetConfig+0x2cc>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800623c:	2b30      	cmp	r3, #48	; 0x30
 800623e:	d016      	beq.n	800626e <UART_SetConfig+0x19a>
 8006240:	2b30      	cmp	r3, #48	; 0x30
 8006242:	d818      	bhi.n	8006276 <UART_SetConfig+0x1a2>
 8006244:	2b20      	cmp	r3, #32
 8006246:	d00a      	beq.n	800625e <UART_SetConfig+0x18a>
 8006248:	2b20      	cmp	r3, #32
 800624a:	d814      	bhi.n	8006276 <UART_SetConfig+0x1a2>
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <UART_SetConfig+0x182>
 8006250:	2b10      	cmp	r3, #16
 8006252:	d008      	beq.n	8006266 <UART_SetConfig+0x192>
 8006254:	e00f      	b.n	8006276 <UART_SetConfig+0x1a2>
 8006256:	2300      	movs	r3, #0
 8006258:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625c:	e0ad      	b.n	80063ba <UART_SetConfig+0x2e6>
 800625e:	2302      	movs	r3, #2
 8006260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006264:	e0a9      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006266:	2304      	movs	r3, #4
 8006268:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626c:	e0a5      	b.n	80063ba <UART_SetConfig+0x2e6>
 800626e:	2308      	movs	r3, #8
 8006270:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006274:	e0a1      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006276:	2310      	movs	r3, #16
 8006278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627c:	e09d      	b.n	80063ba <UART_SetConfig+0x2e6>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a4a      	ldr	r2, [pc, #296]	; (80063ac <UART_SetConfig+0x2d8>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d125      	bne.n	80062d4 <UART_SetConfig+0x200>
 8006288:	4b45      	ldr	r3, [pc, #276]	; (80063a0 <UART_SetConfig+0x2cc>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006292:	2bc0      	cmp	r3, #192	; 0xc0
 8006294:	d016      	beq.n	80062c4 <UART_SetConfig+0x1f0>
 8006296:	2bc0      	cmp	r3, #192	; 0xc0
 8006298:	d818      	bhi.n	80062cc <UART_SetConfig+0x1f8>
 800629a:	2b80      	cmp	r3, #128	; 0x80
 800629c:	d00a      	beq.n	80062b4 <UART_SetConfig+0x1e0>
 800629e:	2b80      	cmp	r3, #128	; 0x80
 80062a0:	d814      	bhi.n	80062cc <UART_SetConfig+0x1f8>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <UART_SetConfig+0x1d8>
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d008      	beq.n	80062bc <UART_SetConfig+0x1e8>
 80062aa:	e00f      	b.n	80062cc <UART_SetConfig+0x1f8>
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062b2:	e082      	b.n	80063ba <UART_SetConfig+0x2e6>
 80062b4:	2302      	movs	r3, #2
 80062b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ba:	e07e      	b.n	80063ba <UART_SetConfig+0x2e6>
 80062bc:	2304      	movs	r3, #4
 80062be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c2:	e07a      	b.n	80063ba <UART_SetConfig+0x2e6>
 80062c4:	2308      	movs	r3, #8
 80062c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ca:	e076      	b.n	80063ba <UART_SetConfig+0x2e6>
 80062cc:	2310      	movs	r3, #16
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d2:	e072      	b.n	80063ba <UART_SetConfig+0x2e6>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a35      	ldr	r2, [pc, #212]	; (80063b0 <UART_SetConfig+0x2dc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d12a      	bne.n	8006334 <UART_SetConfig+0x260>
 80062de:	4b30      	ldr	r3, [pc, #192]	; (80063a0 <UART_SetConfig+0x2cc>)
 80062e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062ec:	d01a      	beq.n	8006324 <UART_SetConfig+0x250>
 80062ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062f2:	d81b      	bhi.n	800632c <UART_SetConfig+0x258>
 80062f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f8:	d00c      	beq.n	8006314 <UART_SetConfig+0x240>
 80062fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fe:	d815      	bhi.n	800632c <UART_SetConfig+0x258>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <UART_SetConfig+0x238>
 8006304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006308:	d008      	beq.n	800631c <UART_SetConfig+0x248>
 800630a:	e00f      	b.n	800632c <UART_SetConfig+0x258>
 800630c:	2300      	movs	r3, #0
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006312:	e052      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006314:	2302      	movs	r3, #2
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631a:	e04e      	b.n	80063ba <UART_SetConfig+0x2e6>
 800631c:	2304      	movs	r3, #4
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006322:	e04a      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006324:	2308      	movs	r3, #8
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632a:	e046      	b.n	80063ba <UART_SetConfig+0x2e6>
 800632c:	2310      	movs	r3, #16
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006332:	e042      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a17      	ldr	r2, [pc, #92]	; (8006398 <UART_SetConfig+0x2c4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d13a      	bne.n	80063b4 <UART_SetConfig+0x2e0>
 800633e:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <UART_SetConfig+0x2cc>)
 8006340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006344:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800634c:	d01a      	beq.n	8006384 <UART_SetConfig+0x2b0>
 800634e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006352:	d81b      	bhi.n	800638c <UART_SetConfig+0x2b8>
 8006354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006358:	d00c      	beq.n	8006374 <UART_SetConfig+0x2a0>
 800635a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800635e:	d815      	bhi.n	800638c <UART_SetConfig+0x2b8>
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <UART_SetConfig+0x298>
 8006364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006368:	d008      	beq.n	800637c <UART_SetConfig+0x2a8>
 800636a:	e00f      	b.n	800638c <UART_SetConfig+0x2b8>
 800636c:	2300      	movs	r3, #0
 800636e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006372:	e022      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006374:	2302      	movs	r3, #2
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637a:	e01e      	b.n	80063ba <UART_SetConfig+0x2e6>
 800637c:	2304      	movs	r3, #4
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006382:	e01a      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006384:	2308      	movs	r3, #8
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638a:	e016      	b.n	80063ba <UART_SetConfig+0x2e6>
 800638c:	2310      	movs	r3, #16
 800638e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006392:	e012      	b.n	80063ba <UART_SetConfig+0x2e6>
 8006394:	efff69f3 	.word	0xefff69f3
 8006398:	40008000 	.word	0x40008000
 800639c:	40013800 	.word	0x40013800
 80063a0:	40021000 	.word	0x40021000
 80063a4:	40004400 	.word	0x40004400
 80063a8:	40004800 	.word	0x40004800
 80063ac:	40004c00 	.word	0x40004c00
 80063b0:	40005000 	.word	0x40005000
 80063b4:	2310      	movs	r3, #16
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a9f      	ldr	r2, [pc, #636]	; (800663c <UART_SetConfig+0x568>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d17a      	bne.n	80064ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063c8:	2b08      	cmp	r3, #8
 80063ca:	d824      	bhi.n	8006416 <UART_SetConfig+0x342>
 80063cc:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <UART_SetConfig+0x300>)
 80063ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d2:	bf00      	nop
 80063d4:	080063f9 	.word	0x080063f9
 80063d8:	08006417 	.word	0x08006417
 80063dc:	08006401 	.word	0x08006401
 80063e0:	08006417 	.word	0x08006417
 80063e4:	08006407 	.word	0x08006407
 80063e8:	08006417 	.word	0x08006417
 80063ec:	08006417 	.word	0x08006417
 80063f0:	08006417 	.word	0x08006417
 80063f4:	0800640f 	.word	0x0800640f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f8:	f7fe fd2c 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 80063fc:	61f8      	str	r0, [r7, #28]
        break;
 80063fe:	e010      	b.n	8006422 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006400:	4b8f      	ldr	r3, [pc, #572]	; (8006640 <UART_SetConfig+0x56c>)
 8006402:	61fb      	str	r3, [r7, #28]
        break;
 8006404:	e00d      	b.n	8006422 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006406:	f7fe fc8d 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 800640a:	61f8      	str	r0, [r7, #28]
        break;
 800640c:	e009      	b.n	8006422 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006412:	61fb      	str	r3, [r7, #28]
        break;
 8006414:	e005      	b.n	8006422 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006420:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 80fb 	beq.w	8006620 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	4413      	add	r3, r2
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	429a      	cmp	r2, r3
 8006438:	d305      	bcc.n	8006446 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006440:	69fa      	ldr	r2, [r7, #28]
 8006442:	429a      	cmp	r2, r3
 8006444:	d903      	bls.n	800644e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800644c:	e0e8      	b.n	8006620 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	2200      	movs	r2, #0
 8006452:	461c      	mov	r4, r3
 8006454:	4615      	mov	r5, r2
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	022b      	lsls	r3, r5, #8
 8006460:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006464:	0222      	lsls	r2, r4, #8
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	6849      	ldr	r1, [r1, #4]
 800646a:	0849      	lsrs	r1, r1, #1
 800646c:	2000      	movs	r0, #0
 800646e:	4688      	mov	r8, r1
 8006470:	4681      	mov	r9, r0
 8006472:	eb12 0a08 	adds.w	sl, r2, r8
 8006476:	eb43 0b09 	adc.w	fp, r3, r9
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	603b      	str	r3, [r7, #0]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006488:	4650      	mov	r0, sl
 800648a:	4659      	mov	r1, fp
 800648c:	f7fa fb6a 	bl	8000b64 <__aeabi_uldivmod>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4613      	mov	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800649e:	d308      	bcc.n	80064b2 <UART_SetConfig+0x3de>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064a6:	d204      	bcs.n	80064b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e0b6      	b.n	8006620 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064b8:	e0b2      	b.n	8006620 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c2:	d15e      	bne.n	8006582 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80064c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064c8:	2b08      	cmp	r3, #8
 80064ca:	d828      	bhi.n	800651e <UART_SetConfig+0x44a>
 80064cc:	a201      	add	r2, pc, #4	; (adr r2, 80064d4 <UART_SetConfig+0x400>)
 80064ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d2:	bf00      	nop
 80064d4:	080064f9 	.word	0x080064f9
 80064d8:	08006501 	.word	0x08006501
 80064dc:	08006509 	.word	0x08006509
 80064e0:	0800651f 	.word	0x0800651f
 80064e4:	0800650f 	.word	0x0800650f
 80064e8:	0800651f 	.word	0x0800651f
 80064ec:	0800651f 	.word	0x0800651f
 80064f0:	0800651f 	.word	0x0800651f
 80064f4:	08006517 	.word	0x08006517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064f8:	f7fe fcac 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 80064fc:	61f8      	str	r0, [r7, #28]
        break;
 80064fe:	e014      	b.n	800652a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006500:	f7fe fcbe 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 8006504:	61f8      	str	r0, [r7, #28]
        break;
 8006506:	e010      	b.n	800652a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006508:	4b4d      	ldr	r3, [pc, #308]	; (8006640 <UART_SetConfig+0x56c>)
 800650a:	61fb      	str	r3, [r7, #28]
        break;
 800650c:	e00d      	b.n	800652a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800650e:	f7fe fc09 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8006512:	61f8      	str	r0, [r7, #28]
        break;
 8006514:	e009      	b.n	800652a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006516:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800651a:	61fb      	str	r3, [r7, #28]
        break;
 800651c:	e005      	b.n	800652a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006528:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d077      	beq.n	8006620 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	005a      	lsls	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	441a      	add	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	fbb2 f3f3 	udiv	r3, r2, r3
 8006544:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b0f      	cmp	r3, #15
 800654a:	d916      	bls.n	800657a <UART_SetConfig+0x4a6>
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006552:	d212      	bcs.n	800657a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	b29b      	uxth	r3, r3
 8006558:	f023 030f 	bic.w	r3, r3, #15
 800655c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	085b      	lsrs	r3, r3, #1
 8006562:	b29b      	uxth	r3, r3
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	b29a      	uxth	r2, r3
 800656a:	8afb      	ldrh	r3, [r7, #22]
 800656c:	4313      	orrs	r3, r2
 800656e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	8afa      	ldrh	r2, [r7, #22]
 8006576:	60da      	str	r2, [r3, #12]
 8006578:	e052      	b.n	8006620 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006580:	e04e      	b.n	8006620 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006582:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006586:	2b08      	cmp	r3, #8
 8006588:	d827      	bhi.n	80065da <UART_SetConfig+0x506>
 800658a:	a201      	add	r2, pc, #4	; (adr r2, 8006590 <UART_SetConfig+0x4bc>)
 800658c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065bd 	.word	0x080065bd
 8006598:	080065c5 	.word	0x080065c5
 800659c:	080065db 	.word	0x080065db
 80065a0:	080065cb 	.word	0x080065cb
 80065a4:	080065db 	.word	0x080065db
 80065a8:	080065db 	.word	0x080065db
 80065ac:	080065db 	.word	0x080065db
 80065b0:	080065d3 	.word	0x080065d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b4:	f7fe fc4e 	bl	8004e54 <HAL_RCC_GetPCLK1Freq>
 80065b8:	61f8      	str	r0, [r7, #28]
        break;
 80065ba:	e014      	b.n	80065e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065bc:	f7fe fc60 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 80065c0:	61f8      	str	r0, [r7, #28]
        break;
 80065c2:	e010      	b.n	80065e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c4:	4b1e      	ldr	r3, [pc, #120]	; (8006640 <UART_SetConfig+0x56c>)
 80065c6:	61fb      	str	r3, [r7, #28]
        break;
 80065c8:	e00d      	b.n	80065e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ca:	f7fe fbab 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 80065ce:	61f8      	str	r0, [r7, #28]
        break;
 80065d0:	e009      	b.n	80065e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d6:	61fb      	str	r3, [r7, #28]
        break;
 80065d8:	e005      	b.n	80065e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065e4:	bf00      	nop
    }

    if (pclk != 0U)
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d019      	beq.n	8006620 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	085a      	lsrs	r2, r3, #1
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	441a      	add	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	2b0f      	cmp	r3, #15
 8006604:	d909      	bls.n	800661a <UART_SetConfig+0x546>
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660c:	d205      	bcs.n	800661a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	60da      	str	r2, [r3, #12]
 8006618:	e002      	b.n	8006620 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800662c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006630:	4618      	mov	r0, r3
 8006632:	3728      	adds	r7, #40	; 0x28
 8006634:	46bd      	mov	sp, r7
 8006636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800663a:	bf00      	nop
 800663c:	40008000 	.word	0x40008000
 8006640:	00f42400 	.word	0x00f42400

08006644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01a      	beq.n	800675a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006742:	d10a      	bne.n	800675a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
  }
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b098      	sub	sp, #96	; 0x60
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006798:	f7fb fc50 	bl	800203c <HAL_GetTick>
 800679c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d12e      	bne.n	800680a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b4:	2200      	movs	r2, #0
 80067b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f88c 	bl	80068d8 <UART_WaitOnFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d021      	beq.n	800680a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	e853 3f00 	ldrex	r3, [r3]
 80067d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067da:	653b      	str	r3, [r7, #80]	; 0x50
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	461a      	mov	r2, r3
 80067e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067e4:	647b      	str	r3, [r7, #68]	; 0x44
 80067e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ec:	e841 2300 	strex	r3, r2, [r1]
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1e6      	bne.n	80067c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e062      	b.n	80068d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b04      	cmp	r3, #4
 8006816:	d149      	bne.n	80068ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006820:	2200      	movs	r2, #0
 8006822:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f856 	bl	80068d8 <UART_WaitOnFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d03c      	beq.n	80068ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	623b      	str	r3, [r7, #32]
   return(result);
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006850:	633b      	str	r3, [r7, #48]	; 0x30
 8006852:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e6      	bne.n	8006832 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3308      	adds	r3, #8
 800686a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	e853 3f00 	ldrex	r3, [r3]
 8006872:	60fb      	str	r3, [r7, #12]
   return(result);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0301 	bic.w	r3, r3, #1
 800687a:	64bb      	str	r3, [r7, #72]	; 0x48
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3308      	adds	r3, #8
 8006882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006884:	61fa      	str	r2, [r7, #28]
 8006886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006888:	69b9      	ldr	r1, [r7, #24]
 800688a:	69fa      	ldr	r2, [r7, #28]
 800688c:	e841 2300 	strex	r3, r2, [r1]
 8006890:	617b      	str	r3, [r7, #20]
   return(result);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1e5      	bne.n	8006864 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e011      	b.n	80068d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2220      	movs	r2, #32
 80068b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3758      	adds	r7, #88	; 0x58
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e8:	e049      	b.n	800697e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d045      	beq.n	800697e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f2:	f7fb fba3 	bl	800203c <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <UART_WaitOnFlagUntilTimeout+0x30>
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e048      	b.n	800699e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0304 	and.w	r3, r3, #4
 8006916:	2b00      	cmp	r3, #0
 8006918:	d031      	beq.n	800697e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	f003 0308 	and.w	r3, r3, #8
 8006924:	2b08      	cmp	r3, #8
 8006926:	d110      	bne.n	800694a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2208      	movs	r2, #8
 800692e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f8ff 	bl	8006b34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2208      	movs	r2, #8
 800693a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	e029      	b.n	800699e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006958:	d111      	bne.n	800697e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f8e5 	bl	8006b34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e00f      	b.n	800699e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4013      	ands	r3, r2
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	bf0c      	ite	eq
 800698e:	2301      	moveq	r3, #1
 8006990:	2300      	movne	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	429a      	cmp	r2, r3
 800699a:	d0a6      	beq.n	80068ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b097      	sub	sp, #92	; 0x5c
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	88fa      	ldrh	r2, [r7, #6]
 80069c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88fa      	ldrh	r2, [r7, #6]
 80069c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069da:	d10e      	bne.n	80069fa <UART_Start_Receive_IT+0x52>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d105      	bne.n	80069f0 <UART_Start_Receive_IT+0x48>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069ee:	e02d      	b.n	8006a4c <UART_Start_Receive_IT+0xa4>
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	22ff      	movs	r2, #255	; 0xff
 80069f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069f8:	e028      	b.n	8006a4c <UART_Start_Receive_IT+0xa4>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10d      	bne.n	8006a1e <UART_Start_Receive_IT+0x76>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <UART_Start_Receive_IT+0x6c>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	22ff      	movs	r2, #255	; 0xff
 8006a0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a12:	e01b      	b.n	8006a4c <UART_Start_Receive_IT+0xa4>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	227f      	movs	r2, #127	; 0x7f
 8006a18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a1c:	e016      	b.n	8006a4c <UART_Start_Receive_IT+0xa4>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a26:	d10d      	bne.n	8006a44 <UART_Start_Receive_IT+0x9c>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <UART_Start_Receive_IT+0x92>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	227f      	movs	r2, #127	; 0x7f
 8006a34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a38:	e008      	b.n	8006a4c <UART_Start_Receive_IT+0xa4>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	223f      	movs	r2, #63	; 0x3f
 8006a3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a42:	e003      	b.n	8006a4c <UART_Start_Receive_IT+0xa4>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2222      	movs	r2, #34	; 0x22
 8006a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3308      	adds	r3, #8
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	f043 0301 	orr.w	r3, r3, #1
 8006a72:	657b      	str	r3, [r7, #84]	; 0x54
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a7c:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a7e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e5      	bne.n	8006a5c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a98:	d107      	bne.n	8006aaa <UART_Start_Receive_IT+0x102>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a21      	ldr	r2, [pc, #132]	; (8006b2c <UART_Start_Receive_IT+0x184>)
 8006aa6:	669a      	str	r2, [r3, #104]	; 0x68
 8006aa8:	e002      	b.n	8006ab0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a20      	ldr	r2, [pc, #128]	; (8006b30 <UART_Start_Receive_IT+0x188>)
 8006aae:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d019      	beq.n	8006aec <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ada:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ade:	e841 2300 	strex	r3, r2, [r1]
 8006ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1e6      	bne.n	8006ab8 <UART_Start_Receive_IT+0x110>
 8006aea:	e018      	b.n	8006b1e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	613b      	str	r3, [r7, #16]
   return(result);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f043 0320 	orr.w	r3, r3, #32
 8006b00:	653b      	str	r3, [r7, #80]	; 0x50
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b0a:	623b      	str	r3, [r7, #32]
 8006b0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	69f9      	ldr	r1, [r7, #28]
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e6      	bne.n	8006aec <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	375c      	adds	r7, #92	; 0x5c
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	08006fb1 	.word	0x08006fb1
 8006b30:	08006df5 	.word	0x08006df5

08006b34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b095      	sub	sp, #84	; 0x54
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e6      	bne.n	8006b3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	3308      	adds	r3, #8
 8006b74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f023 0301 	bic.w	r3, r3, #1
 8006b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3308      	adds	r3, #8
 8006b8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e5      	bne.n	8006b6e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d118      	bne.n	8006bdc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f023 0310 	bic.w	r3, r3, #16
 8006bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6979      	ldr	r1, [r7, #20]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e6      	bne.n	8006baa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006bf0:	bf00      	nop
 8006bf2:	3754      	adds	r7, #84	; 0x54
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff fa44 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b08f      	sub	sp, #60	; 0x3c
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c34:	2b21      	cmp	r3, #33	; 0x21
 8006c36:	d14d      	bne.n	8006cd4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d132      	bne.n	8006caa <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c58:	637b      	str	r3, [r7, #52]	; 0x34
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c64:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e6      	bne.n	8006c44 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	61bb      	str	r3, [r7, #24]
 8006c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e6      	bne.n	8006c76 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006ca8:	e014      	b.n	8006cd4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cae:	781a      	ldrb	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	b292      	uxth	r2, r2
 8006cb6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006cd4:	bf00      	nop
 8006cd6:	373c      	adds	r7, #60	; 0x3c
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b091      	sub	sp, #68	; 0x44
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cec:	2b21      	cmp	r3, #33	; 0x21
 8006cee:	d151      	bne.n	8006d94 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d132      	bne.n	8006d62 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	623b      	str	r3, [r7, #32]
   return(result);
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d10:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30
 8006d1c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e6      	bne.n	8006cfc <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	61fb      	str	r3, [r7, #28]
 8006d4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	69b9      	ldr	r1, [r7, #24]
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	617b      	str	r3, [r7, #20]
   return(result);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e6      	bne.n	8006d2e <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006d60:	e018      	b.n	8006d94 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6a:	881a      	ldrh	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d74:	b292      	uxth	r2, r2
 8006d76:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7c:	1c9a      	adds	r2, r3, #2
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006d94:	bf00      	nop
 8006d96:	3744      	adds	r7, #68	; 0x44
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dbc:	61fb      	str	r3, [r7, #28]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	61bb      	str	r3, [r7, #24]
 8006dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6979      	ldr	r1, [r7, #20]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e6      	bne.n	8006da8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fa f852 	bl	8000e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dec:	bf00      	nop
 8006dee:	3720      	adds	r7, #32
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b09c      	sub	sp, #112	; 0x70
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e02:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e0c:	2b22      	cmp	r3, #34	; 0x22
 8006e0e:	f040 80be 	bne.w	8006f8e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e18:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006e20:	b2d9      	uxtb	r1, r3
 8006e22:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2c:	400a      	ands	r2, r1
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	3b01      	subs	r3, #1
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f040 80a3 	bne.w	8006fa2 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e70:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e7c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e6      	bne.n	8006e5c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea0:	f023 0301 	bic.w	r3, r3, #1
 8006ea4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3308      	adds	r3, #8
 8006eac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006eae:	647a      	str	r2, [r7, #68]	; 0x44
 8006eb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e5      	bne.n	8006e8e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a34      	ldr	r2, [pc, #208]	; (8006fac <UART_RxISR_8BIT+0x1b8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d01f      	beq.n	8006f20 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d018      	beq.n	8006f20 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	623b      	str	r3, [r7, #32]
   return(result);
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f02:	663b      	str	r3, [r7, #96]	; 0x60
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e6      	bne.n	8006eee <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d12e      	bne.n	8006f86 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0310 	bic.w	r3, r3, #16
 8006f42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f4c:	61fb      	str	r3, [r7, #28]
 8006f4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f50:	69b9      	ldr	r1, [r7, #24]
 8006f52:	69fa      	ldr	r2, [r7, #28]
 8006f54:	e841 2300 	strex	r3, r2, [r1]
 8006f58:	617b      	str	r3, [r7, #20]
   return(result);
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e6      	bne.n	8006f2e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f003 0310 	and.w	r3, r3, #16
 8006f6a:	2b10      	cmp	r3, #16
 8006f6c:	d103      	bne.n	8006f76 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2210      	movs	r2, #16
 8006f74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff f89c 	bl	80060bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f84:	e00d      	b.n	8006fa2 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7f9 ff6a 	bl	8000e60 <HAL_UART_RxCpltCallback>
}
 8006f8c:	e009      	b.n	8006fa2 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	8b1b      	ldrh	r3, [r3, #24]
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0208 	orr.w	r2, r2, #8
 8006f9e:	b292      	uxth	r2, r2
 8006fa0:	831a      	strh	r2, [r3, #24]
}
 8006fa2:	bf00      	nop
 8006fa4:	3770      	adds	r7, #112	; 0x70
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40008000 	.word	0x40008000

08006fb0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b09c      	sub	sp, #112	; 0x70
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006fbe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc8:	2b22      	cmp	r3, #34	; 0x22
 8006fca:	f040 80be 	bne.w	800714a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006fd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fdc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006fde:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8006fe2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff2:	1c9a      	adds	r2, r3, #2
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 80a3 	bne.w	800715e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800702c:	667b      	str	r3, [r7, #100]	; 0x64
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007036:	657b      	str	r3, [r7, #84]	; 0x54
 8007038:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800703c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e6      	bne.n	8007018 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3308      	adds	r3, #8
 8007050:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	663b      	str	r3, [r7, #96]	; 0x60
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800706a:	643a      	str	r2, [r7, #64]	; 0x40
 800706c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007070:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e5      	bne.n	800704a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2220      	movs	r2, #32
 8007082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a34      	ldr	r2, [pc, #208]	; (8007168 <UART_RxISR_16BIT+0x1b8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d01f      	beq.n	80070dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d018      	beq.n	80070dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d12e      	bne.n	8007142 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	e853 3f00 	ldrex	r3, [r3]
 80070f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f023 0310 	bic.w	r3, r3, #16
 80070fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	461a      	mov	r2, r3
 8007106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6979      	ldr	r1, [r7, #20]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	e841 2300 	strex	r3, r2, [r1]
 8007114:	613b      	str	r3, [r7, #16]
   return(result);
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1e6      	bne.n	80070ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f003 0310 	and.w	r3, r3, #16
 8007126:	2b10      	cmp	r3, #16
 8007128:	d103      	bne.n	8007132 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2210      	movs	r2, #16
 8007130:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7fe ffbe 	bl	80060bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007140:	e00d      	b.n	800715e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7f9 fe8c 	bl	8000e60 <HAL_UART_RxCpltCallback>
}
 8007148:	e009      	b.n	800715e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	8b1b      	ldrh	r3, [r3, #24]
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0208 	orr.w	r2, r2, #8
 800715a:	b292      	uxth	r2, r2
 800715c:	831a      	strh	r2, [r3, #24]
}
 800715e:	bf00      	nop
 8007160:	3770      	adds	r7, #112	; 0x70
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40008000 	.word	0x40008000

0800716c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <memset>:
 8007180:	4402      	add	r2, r0
 8007182:	4603      	mov	r3, r0
 8007184:	4293      	cmp	r3, r2
 8007186:	d100      	bne.n	800718a <memset+0xa>
 8007188:	4770      	bx	lr
 800718a:	f803 1b01 	strb.w	r1, [r3], #1
 800718e:	e7f9      	b.n	8007184 <memset+0x4>

08007190 <__errno>:
 8007190:	4b01      	ldr	r3, [pc, #4]	; (8007198 <__errno+0x8>)
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	20000060 	.word	0x20000060

0800719c <__libc_init_array>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4d0d      	ldr	r5, [pc, #52]	; (80071d4 <__libc_init_array+0x38>)
 80071a0:	4c0d      	ldr	r4, [pc, #52]	; (80071d8 <__libc_init_array+0x3c>)
 80071a2:	1b64      	subs	r4, r4, r5
 80071a4:	10a4      	asrs	r4, r4, #2
 80071a6:	2600      	movs	r6, #0
 80071a8:	42a6      	cmp	r6, r4
 80071aa:	d109      	bne.n	80071c0 <__libc_init_array+0x24>
 80071ac:	4d0b      	ldr	r5, [pc, #44]	; (80071dc <__libc_init_array+0x40>)
 80071ae:	4c0c      	ldr	r4, [pc, #48]	; (80071e0 <__libc_init_array+0x44>)
 80071b0:	f001 fb3a 	bl	8008828 <_init>
 80071b4:	1b64      	subs	r4, r4, r5
 80071b6:	10a4      	asrs	r4, r4, #2
 80071b8:	2600      	movs	r6, #0
 80071ba:	42a6      	cmp	r6, r4
 80071bc:	d105      	bne.n	80071ca <__libc_init_array+0x2e>
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c4:	4798      	blx	r3
 80071c6:	3601      	adds	r6, #1
 80071c8:	e7ee      	b.n	80071a8 <__libc_init_array+0xc>
 80071ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ce:	4798      	blx	r3
 80071d0:	3601      	adds	r6, #1
 80071d2:	e7f2      	b.n	80071ba <__libc_init_array+0x1e>
 80071d4:	08008a98 	.word	0x08008a98
 80071d8:	08008a98 	.word	0x08008a98
 80071dc:	08008a98 	.word	0x08008a98
 80071e0:	08008a9c 	.word	0x08008a9c
 80071e4:	00000000 	.word	0x00000000

080071e8 <exp>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	ed2d 8b02 	vpush	{d8}
 80071ee:	ec55 4b10 	vmov	r4, r5, d0
 80071f2:	f000 fb05 	bl	8007800 <__ieee754_exp>
 80071f6:	eeb0 8a40 	vmov.f32	s16, s0
 80071fa:	eef0 8a60 	vmov.f32	s17, s1
 80071fe:	ec45 4b10 	vmov	d0, r4, r5
 8007202:	f000 f86d 	bl	80072e0 <finite>
 8007206:	b168      	cbz	r0, 8007224 <exp+0x3c>
 8007208:	a317      	add	r3, pc, #92	; (adr r3, 8007268 <exp+0x80>)
 800720a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	f7f9 fc25 	bl	8000a60 <__aeabi_dcmpgt>
 8007216:	b160      	cbz	r0, 8007232 <exp+0x4a>
 8007218:	f7ff ffba 	bl	8007190 <__errno>
 800721c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8007258 <exp+0x70>
 8007220:	2322      	movs	r3, #34	; 0x22
 8007222:	6003      	str	r3, [r0, #0]
 8007224:	eeb0 0a48 	vmov.f32	s0, s16
 8007228:	eef0 0a68 	vmov.f32	s1, s17
 800722c:	ecbd 8b02 	vpop	{d8}
 8007230:	bd38      	pop	{r3, r4, r5, pc}
 8007232:	a30f      	add	r3, pc, #60	; (adr r3, 8007270 <exp+0x88>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	4620      	mov	r0, r4
 800723a:	4629      	mov	r1, r5
 800723c:	f7f9 fbf2 	bl	8000a24 <__aeabi_dcmplt>
 8007240:	2800      	cmp	r0, #0
 8007242:	d0ef      	beq.n	8007224 <exp+0x3c>
 8007244:	f7ff ffa4 	bl	8007190 <__errno>
 8007248:	2322      	movs	r3, #34	; 0x22
 800724a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8007260 <exp+0x78>
 800724e:	6003      	str	r3, [r0, #0]
 8007250:	e7e8      	b.n	8007224 <exp+0x3c>
 8007252:	bf00      	nop
 8007254:	f3af 8000 	nop.w
 8007258:	00000000 	.word	0x00000000
 800725c:	7ff00000 	.word	0x7ff00000
	...
 8007268:	fefa39ef 	.word	0xfefa39ef
 800726c:	40862e42 	.word	0x40862e42
 8007270:	d52d3051 	.word	0xd52d3051
 8007274:	c0874910 	.word	0xc0874910

08007278 <tan>:
 8007278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800727a:	ec53 2b10 	vmov	r2, r3, d0
 800727e:	4816      	ldr	r0, [pc, #88]	; (80072d8 <tan+0x60>)
 8007280:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007284:	4281      	cmp	r1, r0
 8007286:	dc07      	bgt.n	8007298 <tan+0x20>
 8007288:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80072d0 <tan+0x58>
 800728c:	2001      	movs	r0, #1
 800728e:	b005      	add	sp, #20
 8007290:	f85d eb04 	ldr.w	lr, [sp], #4
 8007294:	f000 b8a8 	b.w	80073e8 <__kernel_tan>
 8007298:	4810      	ldr	r0, [pc, #64]	; (80072dc <tan+0x64>)
 800729a:	4281      	cmp	r1, r0
 800729c:	dd09      	ble.n	80072b2 <tan+0x3a>
 800729e:	ee10 0a10 	vmov	r0, s0
 80072a2:	4619      	mov	r1, r3
 80072a4:	f7f8 ff94 	bl	80001d0 <__aeabi_dsub>
 80072a8:	ec41 0b10 	vmov	d0, r0, r1
 80072ac:	b005      	add	sp, #20
 80072ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80072b2:	4668      	mov	r0, sp
 80072b4:	f000 fc28 	bl	8007b08 <__ieee754_rem_pio2>
 80072b8:	0040      	lsls	r0, r0, #1
 80072ba:	f000 0002 	and.w	r0, r0, #2
 80072be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072c2:	ed9d 0b00 	vldr	d0, [sp]
 80072c6:	f1c0 0001 	rsb	r0, r0, #1
 80072ca:	f000 f88d 	bl	80073e8 <__kernel_tan>
 80072ce:	e7ed      	b.n	80072ac <tan+0x34>
	...
 80072d8:	3fe921fb 	.word	0x3fe921fb
 80072dc:	7fefffff 	.word	0x7fefffff

080072e0 <finite>:
 80072e0:	b082      	sub	sp, #8
 80072e2:	ed8d 0b00 	vstr	d0, [sp]
 80072e6:	9801      	ldr	r0, [sp, #4]
 80072e8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80072ec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80072f0:	0fc0      	lsrs	r0, r0, #31
 80072f2:	b002      	add	sp, #8
 80072f4:	4770      	bx	lr

080072f6 <fmax>:
 80072f6:	b508      	push	{r3, lr}
 80072f8:	ed2d 8b04 	vpush	{d8-d9}
 80072fc:	eeb0 8a40 	vmov.f32	s16, s0
 8007300:	eef0 8a60 	vmov.f32	s17, s1
 8007304:	eeb0 9a41 	vmov.f32	s18, s2
 8007308:	eef0 9a61 	vmov.f32	s19, s3
 800730c:	f000 f842 	bl	8007394 <__fpclassifyd>
 8007310:	b168      	cbz	r0, 800732e <fmax+0x38>
 8007312:	eeb0 0a49 	vmov.f32	s0, s18
 8007316:	eef0 0a69 	vmov.f32	s1, s19
 800731a:	f000 f83b 	bl	8007394 <__fpclassifyd>
 800731e:	b150      	cbz	r0, 8007336 <fmax+0x40>
 8007320:	ec53 2b19 	vmov	r2, r3, d9
 8007324:	ec51 0b18 	vmov	r0, r1, d8
 8007328:	f7f9 fb9a 	bl	8000a60 <__aeabi_dcmpgt>
 800732c:	b918      	cbnz	r0, 8007336 <fmax+0x40>
 800732e:	eeb0 8a49 	vmov.f32	s16, s18
 8007332:	eef0 8a69 	vmov.f32	s17, s19
 8007336:	eeb0 0a48 	vmov.f32	s0, s16
 800733a:	eef0 0a68 	vmov.f32	s1, s17
 800733e:	ecbd 8b04 	vpop	{d8-d9}
 8007342:	bd08      	pop	{r3, pc}

08007344 <fmin>:
 8007344:	b508      	push	{r3, lr}
 8007346:	ed2d 8b04 	vpush	{d8-d9}
 800734a:	eeb0 8a40 	vmov.f32	s16, s0
 800734e:	eef0 8a60 	vmov.f32	s17, s1
 8007352:	eeb0 9a41 	vmov.f32	s18, s2
 8007356:	eef0 9a61 	vmov.f32	s19, s3
 800735a:	f000 f81b 	bl	8007394 <__fpclassifyd>
 800735e:	b168      	cbz	r0, 800737c <fmin+0x38>
 8007360:	eeb0 0a49 	vmov.f32	s0, s18
 8007364:	eef0 0a69 	vmov.f32	s1, s19
 8007368:	f000 f814 	bl	8007394 <__fpclassifyd>
 800736c:	b150      	cbz	r0, 8007384 <fmin+0x40>
 800736e:	ec53 2b19 	vmov	r2, r3, d9
 8007372:	ec51 0b18 	vmov	r0, r1, d8
 8007376:	f7f9 fb55 	bl	8000a24 <__aeabi_dcmplt>
 800737a:	b918      	cbnz	r0, 8007384 <fmin+0x40>
 800737c:	eeb0 8a49 	vmov.f32	s16, s18
 8007380:	eef0 8a69 	vmov.f32	s17, s19
 8007384:	eeb0 0a48 	vmov.f32	s0, s16
 8007388:	eef0 0a68 	vmov.f32	s1, s17
 800738c:	ecbd 8b04 	vpop	{d8-d9}
 8007390:	bd08      	pop	{r3, pc}
	...

08007394 <__fpclassifyd>:
 8007394:	ec51 0b10 	vmov	r0, r1, d0
 8007398:	b510      	push	{r4, lr}
 800739a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800739e:	460b      	mov	r3, r1
 80073a0:	d019      	beq.n	80073d6 <__fpclassifyd+0x42>
 80073a2:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 80073a6:	490e      	ldr	r1, [pc, #56]	; (80073e0 <__fpclassifyd+0x4c>)
 80073a8:	428a      	cmp	r2, r1
 80073aa:	d90e      	bls.n	80073ca <__fpclassifyd+0x36>
 80073ac:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 80073b0:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 80073b4:	428a      	cmp	r2, r1
 80073b6:	d908      	bls.n	80073ca <__fpclassifyd+0x36>
 80073b8:	4a0a      	ldr	r2, [pc, #40]	; (80073e4 <__fpclassifyd+0x50>)
 80073ba:	4213      	tst	r3, r2
 80073bc:	d007      	beq.n	80073ce <__fpclassifyd+0x3a>
 80073be:	4294      	cmp	r4, r2
 80073c0:	d107      	bne.n	80073d2 <__fpclassifyd+0x3e>
 80073c2:	fab0 f080 	clz	r0, r0
 80073c6:	0940      	lsrs	r0, r0, #5
 80073c8:	bd10      	pop	{r4, pc}
 80073ca:	2004      	movs	r0, #4
 80073cc:	e7fc      	b.n	80073c8 <__fpclassifyd+0x34>
 80073ce:	2003      	movs	r0, #3
 80073d0:	e7fa      	b.n	80073c8 <__fpclassifyd+0x34>
 80073d2:	2000      	movs	r0, #0
 80073d4:	e7f8      	b.n	80073c8 <__fpclassifyd+0x34>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d1ee      	bne.n	80073b8 <__fpclassifyd+0x24>
 80073da:	2002      	movs	r0, #2
 80073dc:	e7f4      	b.n	80073c8 <__fpclassifyd+0x34>
 80073de:	bf00      	nop
 80073e0:	7fdfffff 	.word	0x7fdfffff
 80073e4:	7ff00000 	.word	0x7ff00000

080073e8 <__kernel_tan>:
 80073e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ec:	ed2d 8b06 	vpush	{d8-d10}
 80073f0:	ec5b ab10 	vmov	sl, fp, d0
 80073f4:	4be0      	ldr	r3, [pc, #896]	; (8007778 <__kernel_tan+0x390>)
 80073f6:	b083      	sub	sp, #12
 80073f8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 80073fc:	429f      	cmp	r7, r3
 80073fe:	ec59 8b11 	vmov	r8, r9, d1
 8007402:	4606      	mov	r6, r0
 8007404:	f8cd b000 	str.w	fp, [sp]
 8007408:	dc61      	bgt.n	80074ce <__kernel_tan+0xe6>
 800740a:	ee10 0a10 	vmov	r0, s0
 800740e:	4659      	mov	r1, fp
 8007410:	f7f9 fb30 	bl	8000a74 <__aeabi_d2iz>
 8007414:	4605      	mov	r5, r0
 8007416:	2800      	cmp	r0, #0
 8007418:	f040 8083 	bne.w	8007522 <__kernel_tan+0x13a>
 800741c:	1c73      	adds	r3, r6, #1
 800741e:	4652      	mov	r2, sl
 8007420:	4313      	orrs	r3, r2
 8007422:	433b      	orrs	r3, r7
 8007424:	d112      	bne.n	800744c <__kernel_tan+0x64>
 8007426:	ec4b ab10 	vmov	d0, sl, fp
 800742a:	f000 fd73 	bl	8007f14 <fabs>
 800742e:	49d3      	ldr	r1, [pc, #844]	; (800777c <__kernel_tan+0x394>)
 8007430:	ec53 2b10 	vmov	r2, r3, d0
 8007434:	2000      	movs	r0, #0
 8007436:	f7f9 f9ad 	bl	8000794 <__aeabi_ddiv>
 800743a:	4682      	mov	sl, r0
 800743c:	468b      	mov	fp, r1
 800743e:	ec4b ab10 	vmov	d0, sl, fp
 8007442:	b003      	add	sp, #12
 8007444:	ecbd 8b06 	vpop	{d8-d10}
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	2e01      	cmp	r6, #1
 800744e:	d0f6      	beq.n	800743e <__kernel_tan+0x56>
 8007450:	4642      	mov	r2, r8
 8007452:	464b      	mov	r3, r9
 8007454:	4650      	mov	r0, sl
 8007456:	4659      	mov	r1, fp
 8007458:	f7f8 febc 	bl	80001d4 <__adddf3>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	460f      	mov	r7, r1
 8007462:	2000      	movs	r0, #0
 8007464:	49c6      	ldr	r1, [pc, #792]	; (8007780 <__kernel_tan+0x398>)
 8007466:	f7f9 f995 	bl	8000794 <__aeabi_ddiv>
 800746a:	e9cd 0100 	strd	r0, r1, [sp]
 800746e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007472:	462e      	mov	r6, r5
 8007474:	4652      	mov	r2, sl
 8007476:	462c      	mov	r4, r5
 8007478:	4630      	mov	r0, r6
 800747a:	461d      	mov	r5, r3
 800747c:	4639      	mov	r1, r7
 800747e:	465b      	mov	r3, fp
 8007480:	f7f8 fea6 	bl	80001d0 <__aeabi_dsub>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4640      	mov	r0, r8
 800748a:	4649      	mov	r1, r9
 800748c:	f7f8 fea0 	bl	80001d0 <__aeabi_dsub>
 8007490:	4632      	mov	r2, r6
 8007492:	462b      	mov	r3, r5
 8007494:	f7f9 f854 	bl	8000540 <__aeabi_dmul>
 8007498:	4632      	mov	r2, r6
 800749a:	4680      	mov	r8, r0
 800749c:	4689      	mov	r9, r1
 800749e:	462b      	mov	r3, r5
 80074a0:	4630      	mov	r0, r6
 80074a2:	4639      	mov	r1, r7
 80074a4:	f7f9 f84c 	bl	8000540 <__aeabi_dmul>
 80074a8:	4bb4      	ldr	r3, [pc, #720]	; (800777c <__kernel_tan+0x394>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	f7f8 fe92 	bl	80001d4 <__adddf3>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4640      	mov	r0, r8
 80074b6:	4649      	mov	r1, r9
 80074b8:	f7f8 fe8c 	bl	80001d4 <__adddf3>
 80074bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074c0:	f7f9 f83e 	bl	8000540 <__aeabi_dmul>
 80074c4:	4622      	mov	r2, r4
 80074c6:	462b      	mov	r3, r5
 80074c8:	f7f8 fe84 	bl	80001d4 <__adddf3>
 80074cc:	e7b5      	b.n	800743a <__kernel_tan+0x52>
 80074ce:	4bad      	ldr	r3, [pc, #692]	; (8007784 <__kernel_tan+0x39c>)
 80074d0:	429f      	cmp	r7, r3
 80074d2:	dd26      	ble.n	8007522 <__kernel_tan+0x13a>
 80074d4:	9b00      	ldr	r3, [sp, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	da09      	bge.n	80074ee <__kernel_tan+0x106>
 80074da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80074de:	469b      	mov	fp, r3
 80074e0:	ee10 aa10 	vmov	sl, s0
 80074e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074e8:	ee11 8a10 	vmov	r8, s2
 80074ec:	4699      	mov	r9, r3
 80074ee:	4652      	mov	r2, sl
 80074f0:	465b      	mov	r3, fp
 80074f2:	a183      	add	r1, pc, #524	; (adr r1, 8007700 <__kernel_tan+0x318>)
 80074f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074f8:	f7f8 fe6a 	bl	80001d0 <__aeabi_dsub>
 80074fc:	4642      	mov	r2, r8
 80074fe:	464b      	mov	r3, r9
 8007500:	4604      	mov	r4, r0
 8007502:	460d      	mov	r5, r1
 8007504:	a180      	add	r1, pc, #512	; (adr r1, 8007708 <__kernel_tan+0x320>)
 8007506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800750a:	f7f8 fe61 	bl	80001d0 <__aeabi_dsub>
 800750e:	4622      	mov	r2, r4
 8007510:	462b      	mov	r3, r5
 8007512:	f7f8 fe5f 	bl	80001d4 <__adddf3>
 8007516:	f04f 0800 	mov.w	r8, #0
 800751a:	4682      	mov	sl, r0
 800751c:	468b      	mov	fp, r1
 800751e:	f04f 0900 	mov.w	r9, #0
 8007522:	4652      	mov	r2, sl
 8007524:	465b      	mov	r3, fp
 8007526:	4650      	mov	r0, sl
 8007528:	4659      	mov	r1, fp
 800752a:	f7f9 f809 	bl	8000540 <__aeabi_dmul>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	ec43 2b18 	vmov	d8, r2, r3
 8007536:	f7f9 f803 	bl	8000540 <__aeabi_dmul>
 800753a:	ec53 2b18 	vmov	r2, r3, d8
 800753e:	4604      	mov	r4, r0
 8007540:	460d      	mov	r5, r1
 8007542:	4650      	mov	r0, sl
 8007544:	4659      	mov	r1, fp
 8007546:	f7f8 fffb 	bl	8000540 <__aeabi_dmul>
 800754a:	a371      	add	r3, pc, #452	; (adr r3, 8007710 <__kernel_tan+0x328>)
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	ec41 0b19 	vmov	d9, r0, r1
 8007554:	4620      	mov	r0, r4
 8007556:	4629      	mov	r1, r5
 8007558:	f7f8 fff2 	bl	8000540 <__aeabi_dmul>
 800755c:	a36e      	add	r3, pc, #440	; (adr r3, 8007718 <__kernel_tan+0x330>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f7f8 fe37 	bl	80001d4 <__adddf3>
 8007566:	4622      	mov	r2, r4
 8007568:	462b      	mov	r3, r5
 800756a:	f7f8 ffe9 	bl	8000540 <__aeabi_dmul>
 800756e:	a36c      	add	r3, pc, #432	; (adr r3, 8007720 <__kernel_tan+0x338>)
 8007570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007574:	f7f8 fe2e 	bl	80001d4 <__adddf3>
 8007578:	4622      	mov	r2, r4
 800757a:	462b      	mov	r3, r5
 800757c:	f7f8 ffe0 	bl	8000540 <__aeabi_dmul>
 8007580:	a369      	add	r3, pc, #420	; (adr r3, 8007728 <__kernel_tan+0x340>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f8 fe25 	bl	80001d4 <__adddf3>
 800758a:	4622      	mov	r2, r4
 800758c:	462b      	mov	r3, r5
 800758e:	f7f8 ffd7 	bl	8000540 <__aeabi_dmul>
 8007592:	a367      	add	r3, pc, #412	; (adr r3, 8007730 <__kernel_tan+0x348>)
 8007594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007598:	f7f8 fe1c 	bl	80001d4 <__adddf3>
 800759c:	4622      	mov	r2, r4
 800759e:	462b      	mov	r3, r5
 80075a0:	f7f8 ffce 	bl	8000540 <__aeabi_dmul>
 80075a4:	a364      	add	r3, pc, #400	; (adr r3, 8007738 <__kernel_tan+0x350>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f7f8 fe13 	bl	80001d4 <__adddf3>
 80075ae:	ec53 2b18 	vmov	r2, r3, d8
 80075b2:	f7f8 ffc5 	bl	8000540 <__aeabi_dmul>
 80075b6:	a362      	add	r3, pc, #392	; (adr r3, 8007740 <__kernel_tan+0x358>)
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	ec41 0b1a 	vmov	d10, r0, r1
 80075c0:	4620      	mov	r0, r4
 80075c2:	4629      	mov	r1, r5
 80075c4:	f7f8 ffbc 	bl	8000540 <__aeabi_dmul>
 80075c8:	a35f      	add	r3, pc, #380	; (adr r3, 8007748 <__kernel_tan+0x360>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f7f8 fe01 	bl	80001d4 <__adddf3>
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	f7f8 ffb3 	bl	8000540 <__aeabi_dmul>
 80075da:	a35d      	add	r3, pc, #372	; (adr r3, 8007750 <__kernel_tan+0x368>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	f7f8 fdf8 	bl	80001d4 <__adddf3>
 80075e4:	4622      	mov	r2, r4
 80075e6:	462b      	mov	r3, r5
 80075e8:	f7f8 ffaa 	bl	8000540 <__aeabi_dmul>
 80075ec:	a35a      	add	r3, pc, #360	; (adr r3, 8007758 <__kernel_tan+0x370>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 fdef 	bl	80001d4 <__adddf3>
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	f7f8 ffa1 	bl	8000540 <__aeabi_dmul>
 80075fe:	a358      	add	r3, pc, #352	; (adr r3, 8007760 <__kernel_tan+0x378>)
 8007600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007604:	f7f8 fde6 	bl	80001d4 <__adddf3>
 8007608:	4622      	mov	r2, r4
 800760a:	462b      	mov	r3, r5
 800760c:	f7f8 ff98 	bl	8000540 <__aeabi_dmul>
 8007610:	a355      	add	r3, pc, #340	; (adr r3, 8007768 <__kernel_tan+0x380>)
 8007612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007616:	f7f8 fddd 	bl	80001d4 <__adddf3>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	ec51 0b1a 	vmov	r0, r1, d10
 8007622:	f7f8 fdd7 	bl	80001d4 <__adddf3>
 8007626:	ec53 2b19 	vmov	r2, r3, d9
 800762a:	f7f8 ff89 	bl	8000540 <__aeabi_dmul>
 800762e:	4642      	mov	r2, r8
 8007630:	464b      	mov	r3, r9
 8007632:	f7f8 fdcf 	bl	80001d4 <__adddf3>
 8007636:	ec53 2b18 	vmov	r2, r3, d8
 800763a:	f7f8 ff81 	bl	8000540 <__aeabi_dmul>
 800763e:	4642      	mov	r2, r8
 8007640:	464b      	mov	r3, r9
 8007642:	f7f8 fdc7 	bl	80001d4 <__adddf3>
 8007646:	a34a      	add	r3, pc, #296	; (adr r3, 8007770 <__kernel_tan+0x388>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	4604      	mov	r4, r0
 800764e:	460d      	mov	r5, r1
 8007650:	ec51 0b19 	vmov	r0, r1, d9
 8007654:	f7f8 ff74 	bl	8000540 <__aeabi_dmul>
 8007658:	4622      	mov	r2, r4
 800765a:	462b      	mov	r3, r5
 800765c:	f7f8 fdba 	bl	80001d4 <__adddf3>
 8007660:	460b      	mov	r3, r1
 8007662:	ec41 0b18 	vmov	d8, r0, r1
 8007666:	4602      	mov	r2, r0
 8007668:	4659      	mov	r1, fp
 800766a:	4650      	mov	r0, sl
 800766c:	f7f8 fdb2 	bl	80001d4 <__adddf3>
 8007670:	4b44      	ldr	r3, [pc, #272]	; (8007784 <__kernel_tan+0x39c>)
 8007672:	429f      	cmp	r7, r3
 8007674:	4604      	mov	r4, r0
 8007676:	460d      	mov	r5, r1
 8007678:	f340 8086 	ble.w	8007788 <__kernel_tan+0x3a0>
 800767c:	4630      	mov	r0, r6
 800767e:	f7f8 fef5 	bl	800046c <__aeabi_i2d>
 8007682:	4622      	mov	r2, r4
 8007684:	4680      	mov	r8, r0
 8007686:	4689      	mov	r9, r1
 8007688:	462b      	mov	r3, r5
 800768a:	4620      	mov	r0, r4
 800768c:	4629      	mov	r1, r5
 800768e:	f7f8 ff57 	bl	8000540 <__aeabi_dmul>
 8007692:	4642      	mov	r2, r8
 8007694:	4606      	mov	r6, r0
 8007696:	460f      	mov	r7, r1
 8007698:	464b      	mov	r3, r9
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	f7f8 fd99 	bl	80001d4 <__adddf3>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	4630      	mov	r0, r6
 80076a8:	4639      	mov	r1, r7
 80076aa:	f7f9 f873 	bl	8000794 <__aeabi_ddiv>
 80076ae:	ec53 2b18 	vmov	r2, r3, d8
 80076b2:	f7f8 fd8d 	bl	80001d0 <__aeabi_dsub>
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4650      	mov	r0, sl
 80076bc:	4659      	mov	r1, fp
 80076be:	f7f8 fd87 	bl	80001d0 <__aeabi_dsub>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	f7f8 fd85 	bl	80001d4 <__adddf3>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4640      	mov	r0, r8
 80076d0:	4649      	mov	r1, r9
 80076d2:	f7f8 fd7d 	bl	80001d0 <__aeabi_dsub>
 80076d6:	9b00      	ldr	r3, [sp, #0]
 80076d8:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80076dc:	f00a 0a02 	and.w	sl, sl, #2
 80076e0:	4604      	mov	r4, r0
 80076e2:	f1ca 0001 	rsb	r0, sl, #1
 80076e6:	460d      	mov	r5, r1
 80076e8:	f7f8 fec0 	bl	800046c <__aeabi_i2d>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	4620      	mov	r0, r4
 80076f2:	4629      	mov	r1, r5
 80076f4:	f7f8 ff24 	bl	8000540 <__aeabi_dmul>
 80076f8:	e69f      	b.n	800743a <__kernel_tan+0x52>
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w
 8007700:	54442d18 	.word	0x54442d18
 8007704:	3fe921fb 	.word	0x3fe921fb
 8007708:	33145c07 	.word	0x33145c07
 800770c:	3c81a626 	.word	0x3c81a626
 8007710:	74bf7ad4 	.word	0x74bf7ad4
 8007714:	3efb2a70 	.word	0x3efb2a70
 8007718:	32f0a7e9 	.word	0x32f0a7e9
 800771c:	3f12b80f 	.word	0x3f12b80f
 8007720:	1a8d1068 	.word	0x1a8d1068
 8007724:	3f3026f7 	.word	0x3f3026f7
 8007728:	fee08315 	.word	0xfee08315
 800772c:	3f57dbc8 	.word	0x3f57dbc8
 8007730:	e96e8493 	.word	0xe96e8493
 8007734:	3f8226e3 	.word	0x3f8226e3
 8007738:	1bb341fe 	.word	0x1bb341fe
 800773c:	3faba1ba 	.word	0x3faba1ba
 8007740:	db605373 	.word	0xdb605373
 8007744:	bef375cb 	.word	0xbef375cb
 8007748:	a03792a6 	.word	0xa03792a6
 800774c:	3f147e88 	.word	0x3f147e88
 8007750:	f2f26501 	.word	0xf2f26501
 8007754:	3f4344d8 	.word	0x3f4344d8
 8007758:	c9560328 	.word	0xc9560328
 800775c:	3f6d6d22 	.word	0x3f6d6d22
 8007760:	8406d637 	.word	0x8406d637
 8007764:	3f9664f4 	.word	0x3f9664f4
 8007768:	1110fe7a 	.word	0x1110fe7a
 800776c:	3fc11111 	.word	0x3fc11111
 8007770:	55555563 	.word	0x55555563
 8007774:	3fd55555 	.word	0x3fd55555
 8007778:	3e2fffff 	.word	0x3e2fffff
 800777c:	3ff00000 	.word	0x3ff00000
 8007780:	bff00000 	.word	0xbff00000
 8007784:	3fe59427 	.word	0x3fe59427
 8007788:	2e01      	cmp	r6, #1
 800778a:	d02f      	beq.n	80077ec <__kernel_tan+0x404>
 800778c:	460f      	mov	r7, r1
 800778e:	4602      	mov	r2, r0
 8007790:	460b      	mov	r3, r1
 8007792:	4689      	mov	r9, r1
 8007794:	2000      	movs	r0, #0
 8007796:	4917      	ldr	r1, [pc, #92]	; (80077f4 <__kernel_tan+0x40c>)
 8007798:	f7f8 fffc 	bl	8000794 <__aeabi_ddiv>
 800779c:	2600      	movs	r6, #0
 800779e:	e9cd 0100 	strd	r0, r1, [sp]
 80077a2:	4652      	mov	r2, sl
 80077a4:	465b      	mov	r3, fp
 80077a6:	4630      	mov	r0, r6
 80077a8:	4639      	mov	r1, r7
 80077aa:	f7f8 fd11 	bl	80001d0 <__aeabi_dsub>
 80077ae:	e9dd 4500 	ldrd	r4, r5, [sp]
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	ec51 0b18 	vmov	r0, r1, d8
 80077ba:	f7f8 fd09 	bl	80001d0 <__aeabi_dsub>
 80077be:	4632      	mov	r2, r6
 80077c0:	462b      	mov	r3, r5
 80077c2:	f7f8 febd 	bl	8000540 <__aeabi_dmul>
 80077c6:	46b0      	mov	r8, r6
 80077c8:	460f      	mov	r7, r1
 80077ca:	4642      	mov	r2, r8
 80077cc:	462b      	mov	r3, r5
 80077ce:	4634      	mov	r4, r6
 80077d0:	4649      	mov	r1, r9
 80077d2:	4606      	mov	r6, r0
 80077d4:	4640      	mov	r0, r8
 80077d6:	f7f8 feb3 	bl	8000540 <__aeabi_dmul>
 80077da:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <__kernel_tan+0x410>)
 80077dc:	2200      	movs	r2, #0
 80077de:	f7f8 fcf9 	bl	80001d4 <__adddf3>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4630      	mov	r0, r6
 80077e8:	4639      	mov	r1, r7
 80077ea:	e665      	b.n	80074b8 <__kernel_tan+0xd0>
 80077ec:	4682      	mov	sl, r0
 80077ee:	468b      	mov	fp, r1
 80077f0:	e625      	b.n	800743e <__kernel_tan+0x56>
 80077f2:	bf00      	nop
 80077f4:	bff00000 	.word	0xbff00000
 80077f8:	3ff00000 	.word	0x3ff00000
 80077fc:	00000000 	.word	0x00000000

08007800 <__ieee754_exp>:
 8007800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	ec55 4b10 	vmov	r4, r5, d0
 8007808:	49b5      	ldr	r1, [pc, #724]	; (8007ae0 <__ieee754_exp+0x2e0>)
 800780a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800780e:	428a      	cmp	r2, r1
 8007810:	ed2d 8b04 	vpush	{d8-d9}
 8007814:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007818:	d93b      	bls.n	8007892 <__ieee754_exp+0x92>
 800781a:	49b2      	ldr	r1, [pc, #712]	; (8007ae4 <__ieee754_exp+0x2e4>)
 800781c:	428a      	cmp	r2, r1
 800781e:	d916      	bls.n	800784e <__ieee754_exp+0x4e>
 8007820:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007824:	4323      	orrs	r3, r4
 8007826:	ee10 2a10 	vmov	r2, s0
 800782a:	d007      	beq.n	800783c <__ieee754_exp+0x3c>
 800782c:	462b      	mov	r3, r5
 800782e:	4620      	mov	r0, r4
 8007830:	4629      	mov	r1, r5
 8007832:	f7f8 fccf 	bl	80001d4 <__adddf3>
 8007836:	4604      	mov	r4, r0
 8007838:	460d      	mov	r5, r1
 800783a:	e002      	b.n	8007842 <__ieee754_exp+0x42>
 800783c:	b10e      	cbz	r6, 8007842 <__ieee754_exp+0x42>
 800783e:	2400      	movs	r4, #0
 8007840:	2500      	movs	r5, #0
 8007842:	ecbd 8b04 	vpop	{d8-d9}
 8007846:	ec45 4b10 	vmov	d0, r4, r5
 800784a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784e:	a38e      	add	r3, pc, #568	; (adr r3, 8007a88 <__ieee754_exp+0x288>)
 8007850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007854:	ee10 0a10 	vmov	r0, s0
 8007858:	4629      	mov	r1, r5
 800785a:	f7f9 f901 	bl	8000a60 <__aeabi_dcmpgt>
 800785e:	4607      	mov	r7, r0
 8007860:	b130      	cbz	r0, 8007870 <__ieee754_exp+0x70>
 8007862:	ecbd 8b04 	vpop	{d8-d9}
 8007866:	2000      	movs	r0, #0
 8007868:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786c:	f000 bb82 	b.w	8007f74 <__math_oflow>
 8007870:	a387      	add	r3, pc, #540	; (adr r3, 8007a90 <__ieee754_exp+0x290>)
 8007872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007876:	4620      	mov	r0, r4
 8007878:	4629      	mov	r1, r5
 800787a:	f7f9 f8d3 	bl	8000a24 <__aeabi_dcmplt>
 800787e:	2800      	cmp	r0, #0
 8007880:	f000 808b 	beq.w	800799a <__ieee754_exp+0x19a>
 8007884:	ecbd 8b04 	vpop	{d8-d9}
 8007888:	4638      	mov	r0, r7
 800788a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800788e:	f000 bb68 	b.w	8007f62 <__math_uflow>
 8007892:	4b95      	ldr	r3, [pc, #596]	; (8007ae8 <__ieee754_exp+0x2e8>)
 8007894:	429a      	cmp	r2, r3
 8007896:	f240 80ac 	bls.w	80079f2 <__ieee754_exp+0x1f2>
 800789a:	4b94      	ldr	r3, [pc, #592]	; (8007aec <__ieee754_exp+0x2ec>)
 800789c:	429a      	cmp	r2, r3
 800789e:	d87c      	bhi.n	800799a <__ieee754_exp+0x19a>
 80078a0:	4b93      	ldr	r3, [pc, #588]	; (8007af0 <__ieee754_exp+0x2f0>)
 80078a2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	ee10 0a10 	vmov	r0, s0
 80078ae:	4629      	mov	r1, r5
 80078b0:	f7f8 fc8e 	bl	80001d0 <__aeabi_dsub>
 80078b4:	4b8f      	ldr	r3, [pc, #572]	; (8007af4 <__ieee754_exp+0x2f4>)
 80078b6:	00f7      	lsls	r7, r6, #3
 80078b8:	443b      	add	r3, r7
 80078ba:	ed93 7b00 	vldr	d7, [r3]
 80078be:	f1c6 0a01 	rsb	sl, r6, #1
 80078c2:	4680      	mov	r8, r0
 80078c4:	4689      	mov	r9, r1
 80078c6:	ebaa 0a06 	sub.w	sl, sl, r6
 80078ca:	eeb0 8a47 	vmov.f32	s16, s14
 80078ce:	eef0 8a67 	vmov.f32	s17, s15
 80078d2:	ec53 2b18 	vmov	r2, r3, d8
 80078d6:	4640      	mov	r0, r8
 80078d8:	4649      	mov	r1, r9
 80078da:	f7f8 fc79 	bl	80001d0 <__aeabi_dsub>
 80078de:	4604      	mov	r4, r0
 80078e0:	460d      	mov	r5, r1
 80078e2:	4622      	mov	r2, r4
 80078e4:	462b      	mov	r3, r5
 80078e6:	4620      	mov	r0, r4
 80078e8:	4629      	mov	r1, r5
 80078ea:	f7f8 fe29 	bl	8000540 <__aeabi_dmul>
 80078ee:	a36a      	add	r3, pc, #424	; (adr r3, 8007a98 <__ieee754_exp+0x298>)
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	4606      	mov	r6, r0
 80078f6:	460f      	mov	r7, r1
 80078f8:	f7f8 fe22 	bl	8000540 <__aeabi_dmul>
 80078fc:	a368      	add	r3, pc, #416	; (adr r3, 8007aa0 <__ieee754_exp+0x2a0>)
 80078fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007902:	f7f8 fc65 	bl	80001d0 <__aeabi_dsub>
 8007906:	4632      	mov	r2, r6
 8007908:	463b      	mov	r3, r7
 800790a:	f7f8 fe19 	bl	8000540 <__aeabi_dmul>
 800790e:	a366      	add	r3, pc, #408	; (adr r3, 8007aa8 <__ieee754_exp+0x2a8>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f8 fc5e 	bl	80001d4 <__adddf3>
 8007918:	4632      	mov	r2, r6
 800791a:	463b      	mov	r3, r7
 800791c:	f7f8 fe10 	bl	8000540 <__aeabi_dmul>
 8007920:	a363      	add	r3, pc, #396	; (adr r3, 8007ab0 <__ieee754_exp+0x2b0>)
 8007922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007926:	f7f8 fc53 	bl	80001d0 <__aeabi_dsub>
 800792a:	4632      	mov	r2, r6
 800792c:	463b      	mov	r3, r7
 800792e:	f7f8 fe07 	bl	8000540 <__aeabi_dmul>
 8007932:	a361      	add	r3, pc, #388	; (adr r3, 8007ab8 <__ieee754_exp+0x2b8>)
 8007934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007938:	f7f8 fc4c 	bl	80001d4 <__adddf3>
 800793c:	4632      	mov	r2, r6
 800793e:	463b      	mov	r3, r7
 8007940:	f7f8 fdfe 	bl	8000540 <__aeabi_dmul>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4620      	mov	r0, r4
 800794a:	4629      	mov	r1, r5
 800794c:	f7f8 fc40 	bl	80001d0 <__aeabi_dsub>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4606      	mov	r6, r0
 8007956:	460f      	mov	r7, r1
 8007958:	4620      	mov	r0, r4
 800795a:	4629      	mov	r1, r5
 800795c:	f7f8 fdf0 	bl	8000540 <__aeabi_dmul>
 8007960:	ec41 0b19 	vmov	d9, r0, r1
 8007964:	f1ba 0f00 	cmp.w	sl, #0
 8007968:	d15d      	bne.n	8007a26 <__ieee754_exp+0x226>
 800796a:	2200      	movs	r2, #0
 800796c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f8 fc2c 	bl	80001d0 <__aeabi_dsub>
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	ec51 0b19 	vmov	r0, r1, d9
 8007980:	f7f8 ff08 	bl	8000794 <__aeabi_ddiv>
 8007984:	4622      	mov	r2, r4
 8007986:	462b      	mov	r3, r5
 8007988:	f7f8 fc22 	bl	80001d0 <__aeabi_dsub>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	2000      	movs	r0, #0
 8007992:	4959      	ldr	r1, [pc, #356]	; (8007af8 <__ieee754_exp+0x2f8>)
 8007994:	f7f8 fc1c 	bl	80001d0 <__aeabi_dsub>
 8007998:	e74d      	b.n	8007836 <__ieee754_exp+0x36>
 800799a:	4b58      	ldr	r3, [pc, #352]	; (8007afc <__ieee754_exp+0x2fc>)
 800799c:	4620      	mov	r0, r4
 800799e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80079a2:	4629      	mov	r1, r5
 80079a4:	a346      	add	r3, pc, #280	; (adr r3, 8007ac0 <__ieee754_exp+0x2c0>)
 80079a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079aa:	f7f8 fdc9 	bl	8000540 <__aeabi_dmul>
 80079ae:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079b2:	f7f8 fc0f 	bl	80001d4 <__adddf3>
 80079b6:	f7f9 f85d 	bl	8000a74 <__aeabi_d2iz>
 80079ba:	4682      	mov	sl, r0
 80079bc:	f7f8 fd56 	bl	800046c <__aeabi_i2d>
 80079c0:	a341      	add	r3, pc, #260	; (adr r3, 8007ac8 <__ieee754_exp+0x2c8>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	4606      	mov	r6, r0
 80079c8:	460f      	mov	r7, r1
 80079ca:	f7f8 fdb9 	bl	8000540 <__aeabi_dmul>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	4620      	mov	r0, r4
 80079d4:	4629      	mov	r1, r5
 80079d6:	f7f8 fbfb 	bl	80001d0 <__aeabi_dsub>
 80079da:	a33d      	add	r3, pc, #244	; (adr r3, 8007ad0 <__ieee754_exp+0x2d0>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	4680      	mov	r8, r0
 80079e2:	4689      	mov	r9, r1
 80079e4:	4630      	mov	r0, r6
 80079e6:	4639      	mov	r1, r7
 80079e8:	f7f8 fdaa 	bl	8000540 <__aeabi_dmul>
 80079ec:	ec41 0b18 	vmov	d8, r0, r1
 80079f0:	e76f      	b.n	80078d2 <__ieee754_exp+0xd2>
 80079f2:	4b43      	ldr	r3, [pc, #268]	; (8007b00 <__ieee754_exp+0x300>)
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d811      	bhi.n	8007a1c <__ieee754_exp+0x21c>
 80079f8:	a337      	add	r3, pc, #220	; (adr r3, 8007ad8 <__ieee754_exp+0x2d8>)
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	ee10 0a10 	vmov	r0, s0
 8007a02:	4629      	mov	r1, r5
 8007a04:	f7f8 fbe6 	bl	80001d4 <__adddf3>
 8007a08:	4b3b      	ldr	r3, [pc, #236]	; (8007af8 <__ieee754_exp+0x2f8>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f7f9 f828 	bl	8000a60 <__aeabi_dcmpgt>
 8007a10:	b138      	cbz	r0, 8007a22 <__ieee754_exp+0x222>
 8007a12:	4b39      	ldr	r3, [pc, #228]	; (8007af8 <__ieee754_exp+0x2f8>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	4620      	mov	r0, r4
 8007a18:	4629      	mov	r1, r5
 8007a1a:	e70a      	b.n	8007832 <__ieee754_exp+0x32>
 8007a1c:	f04f 0a00 	mov.w	sl, #0
 8007a20:	e75f      	b.n	80078e2 <__ieee754_exp+0xe2>
 8007a22:	4682      	mov	sl, r0
 8007a24:	e75d      	b.n	80078e2 <__ieee754_exp+0xe2>
 8007a26:	4632      	mov	r2, r6
 8007a28:	463b      	mov	r3, r7
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007a30:	f7f8 fbce 	bl	80001d0 <__aeabi_dsub>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	ec51 0b19 	vmov	r0, r1, d9
 8007a3c:	f7f8 feaa 	bl	8000794 <__aeabi_ddiv>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	ec51 0b18 	vmov	r0, r1, d8
 8007a48:	f7f8 fbc2 	bl	80001d0 <__aeabi_dsub>
 8007a4c:	4642      	mov	r2, r8
 8007a4e:	464b      	mov	r3, r9
 8007a50:	f7f8 fbbe 	bl	80001d0 <__aeabi_dsub>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	2000      	movs	r0, #0
 8007a5a:	4927      	ldr	r1, [pc, #156]	; (8007af8 <__ieee754_exp+0x2f8>)
 8007a5c:	f7f8 fbb8 	bl	80001d0 <__aeabi_dsub>
 8007a60:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007a64:	4592      	cmp	sl, r2
 8007a66:	db02      	blt.n	8007a6e <__ieee754_exp+0x26e>
 8007a68:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007a6c:	e6e3      	b.n	8007836 <__ieee754_exp+0x36>
 8007a6e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007a72:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007a76:	2200      	movs	r2, #0
 8007a78:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8007a7c:	f7f8 fd60 	bl	8000540 <__aeabi_dmul>
 8007a80:	e6d9      	b.n	8007836 <__ieee754_exp+0x36>
 8007a82:	bf00      	nop
 8007a84:	f3af 8000 	nop.w
 8007a88:	fefa39ef 	.word	0xfefa39ef
 8007a8c:	40862e42 	.word	0x40862e42
 8007a90:	d52d3051 	.word	0xd52d3051
 8007a94:	c0874910 	.word	0xc0874910
 8007a98:	72bea4d0 	.word	0x72bea4d0
 8007a9c:	3e663769 	.word	0x3e663769
 8007aa0:	c5d26bf1 	.word	0xc5d26bf1
 8007aa4:	3ebbbd41 	.word	0x3ebbbd41
 8007aa8:	af25de2c 	.word	0xaf25de2c
 8007aac:	3f11566a 	.word	0x3f11566a
 8007ab0:	16bebd93 	.word	0x16bebd93
 8007ab4:	3f66c16c 	.word	0x3f66c16c
 8007ab8:	5555553e 	.word	0x5555553e
 8007abc:	3fc55555 	.word	0x3fc55555
 8007ac0:	652b82fe 	.word	0x652b82fe
 8007ac4:	3ff71547 	.word	0x3ff71547
 8007ac8:	fee00000 	.word	0xfee00000
 8007acc:	3fe62e42 	.word	0x3fe62e42
 8007ad0:	35793c76 	.word	0x35793c76
 8007ad4:	3dea39ef 	.word	0x3dea39ef
 8007ad8:	8800759c 	.word	0x8800759c
 8007adc:	7e37e43c 	.word	0x7e37e43c
 8007ae0:	40862e41 	.word	0x40862e41
 8007ae4:	7fefffff 	.word	0x7fefffff
 8007ae8:	3fd62e42 	.word	0x3fd62e42
 8007aec:	3ff0a2b1 	.word	0x3ff0a2b1
 8007af0:	08008898 	.word	0x08008898
 8007af4:	080088a8 	.word	0x080088a8
 8007af8:	3ff00000 	.word	0x3ff00000
 8007afc:	08008888 	.word	0x08008888
 8007b00:	3defffff 	.word	0x3defffff
 8007b04:	00000000 	.word	0x00000000

08007b08 <__ieee754_rem_pio2>:
 8007b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b0c:	ed2d 8b02 	vpush	{d8}
 8007b10:	ec55 4b10 	vmov	r4, r5, d0
 8007b14:	4bca      	ldr	r3, [pc, #808]	; (8007e40 <__ieee754_rem_pio2+0x338>)
 8007b16:	b08b      	sub	sp, #44	; 0x2c
 8007b18:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007b1c:	4598      	cmp	r8, r3
 8007b1e:	4682      	mov	sl, r0
 8007b20:	9502      	str	r5, [sp, #8]
 8007b22:	dc08      	bgt.n	8007b36 <__ieee754_rem_pio2+0x2e>
 8007b24:	2200      	movs	r2, #0
 8007b26:	2300      	movs	r3, #0
 8007b28:	ed80 0b00 	vstr	d0, [r0]
 8007b2c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007b30:	f04f 0b00 	mov.w	fp, #0
 8007b34:	e028      	b.n	8007b88 <__ieee754_rem_pio2+0x80>
 8007b36:	4bc3      	ldr	r3, [pc, #780]	; (8007e44 <__ieee754_rem_pio2+0x33c>)
 8007b38:	4598      	cmp	r8, r3
 8007b3a:	dc78      	bgt.n	8007c2e <__ieee754_rem_pio2+0x126>
 8007b3c:	9b02      	ldr	r3, [sp, #8]
 8007b3e:	4ec2      	ldr	r6, [pc, #776]	; (8007e48 <__ieee754_rem_pio2+0x340>)
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	ee10 0a10 	vmov	r0, s0
 8007b46:	a3b0      	add	r3, pc, #704	; (adr r3, 8007e08 <__ieee754_rem_pio2+0x300>)
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	dd39      	ble.n	8007bc4 <__ieee754_rem_pio2+0xbc>
 8007b50:	f7f8 fb3e 	bl	80001d0 <__aeabi_dsub>
 8007b54:	45b0      	cmp	r8, r6
 8007b56:	4604      	mov	r4, r0
 8007b58:	460d      	mov	r5, r1
 8007b5a:	d01b      	beq.n	8007b94 <__ieee754_rem_pio2+0x8c>
 8007b5c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007e10 <__ieee754_rem_pio2+0x308>)
 8007b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b62:	f7f8 fb35 	bl	80001d0 <__aeabi_dsub>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	e9ca 2300 	strd	r2, r3, [sl]
 8007b6e:	4620      	mov	r0, r4
 8007b70:	4629      	mov	r1, r5
 8007b72:	f7f8 fb2d 	bl	80001d0 <__aeabi_dsub>
 8007b76:	a3a6      	add	r3, pc, #664	; (adr r3, 8007e10 <__ieee754_rem_pio2+0x308>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f7f8 fb28 	bl	80001d0 <__aeabi_dsub>
 8007b80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b84:	f04f 0b01 	mov.w	fp, #1
 8007b88:	4658      	mov	r0, fp
 8007b8a:	b00b      	add	sp, #44	; 0x2c
 8007b8c:	ecbd 8b02 	vpop	{d8}
 8007b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b94:	a3a0      	add	r3, pc, #640	; (adr r3, 8007e18 <__ieee754_rem_pio2+0x310>)
 8007b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9a:	f7f8 fb19 	bl	80001d0 <__aeabi_dsub>
 8007b9e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007e20 <__ieee754_rem_pio2+0x318>)
 8007ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	460d      	mov	r5, r1
 8007ba8:	f7f8 fb12 	bl	80001d0 <__aeabi_dsub>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	e9ca 2300 	strd	r2, r3, [sl]
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f7f8 fb0a 	bl	80001d0 <__aeabi_dsub>
 8007bbc:	a398      	add	r3, pc, #608	; (adr r3, 8007e20 <__ieee754_rem_pio2+0x318>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	e7db      	b.n	8007b7c <__ieee754_rem_pio2+0x74>
 8007bc4:	f7f8 fb06 	bl	80001d4 <__adddf3>
 8007bc8:	45b0      	cmp	r8, r6
 8007bca:	4604      	mov	r4, r0
 8007bcc:	460d      	mov	r5, r1
 8007bce:	d016      	beq.n	8007bfe <__ieee754_rem_pio2+0xf6>
 8007bd0:	a38f      	add	r3, pc, #572	; (adr r3, 8007e10 <__ieee754_rem_pio2+0x308>)
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fafd 	bl	80001d4 <__adddf3>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	e9ca 2300 	strd	r2, r3, [sl]
 8007be2:	4620      	mov	r0, r4
 8007be4:	4629      	mov	r1, r5
 8007be6:	f7f8 faf3 	bl	80001d0 <__aeabi_dsub>
 8007bea:	a389      	add	r3, pc, #548	; (adr r3, 8007e10 <__ieee754_rem_pio2+0x308>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 faf0 	bl	80001d4 <__adddf3>
 8007bf4:	f04f 3bff 	mov.w	fp, #4294967295
 8007bf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007bfc:	e7c4      	b.n	8007b88 <__ieee754_rem_pio2+0x80>
 8007bfe:	a386      	add	r3, pc, #536	; (adr r3, 8007e18 <__ieee754_rem_pio2+0x310>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fae6 	bl	80001d4 <__adddf3>
 8007c08:	a385      	add	r3, pc, #532	; (adr r3, 8007e20 <__ieee754_rem_pio2+0x318>)
 8007c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0e:	4604      	mov	r4, r0
 8007c10:	460d      	mov	r5, r1
 8007c12:	f7f8 fadf 	bl	80001d4 <__adddf3>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	e9ca 2300 	strd	r2, r3, [sl]
 8007c1e:	4620      	mov	r0, r4
 8007c20:	4629      	mov	r1, r5
 8007c22:	f7f8 fad5 	bl	80001d0 <__aeabi_dsub>
 8007c26:	a37e      	add	r3, pc, #504	; (adr r3, 8007e20 <__ieee754_rem_pio2+0x318>)
 8007c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2c:	e7e0      	b.n	8007bf0 <__ieee754_rem_pio2+0xe8>
 8007c2e:	4b87      	ldr	r3, [pc, #540]	; (8007e4c <__ieee754_rem_pio2+0x344>)
 8007c30:	4598      	cmp	r8, r3
 8007c32:	f300 80d8 	bgt.w	8007de6 <__ieee754_rem_pio2+0x2de>
 8007c36:	f000 f96d 	bl	8007f14 <fabs>
 8007c3a:	ec55 4b10 	vmov	r4, r5, d0
 8007c3e:	ee10 0a10 	vmov	r0, s0
 8007c42:	a379      	add	r3, pc, #484	; (adr r3, 8007e28 <__ieee754_rem_pio2+0x320>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7f8 fc79 	bl	8000540 <__aeabi_dmul>
 8007c4e:	4b80      	ldr	r3, [pc, #512]	; (8007e50 <__ieee754_rem_pio2+0x348>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	f7f8 fabf 	bl	80001d4 <__adddf3>
 8007c56:	f7f8 ff0d 	bl	8000a74 <__aeabi_d2iz>
 8007c5a:	4683      	mov	fp, r0
 8007c5c:	f7f8 fc06 	bl	800046c <__aeabi_i2d>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	ec43 2b18 	vmov	d8, r2, r3
 8007c68:	a367      	add	r3, pc, #412	; (adr r3, 8007e08 <__ieee754_rem_pio2+0x300>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fc67 	bl	8000540 <__aeabi_dmul>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4620      	mov	r0, r4
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f7f8 faa9 	bl	80001d0 <__aeabi_dsub>
 8007c7e:	a364      	add	r3, pc, #400	; (adr r3, 8007e10 <__ieee754_rem_pio2+0x308>)
 8007c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c84:	4606      	mov	r6, r0
 8007c86:	460f      	mov	r7, r1
 8007c88:	ec51 0b18 	vmov	r0, r1, d8
 8007c8c:	f7f8 fc58 	bl	8000540 <__aeabi_dmul>
 8007c90:	f1bb 0f1f 	cmp.w	fp, #31
 8007c94:	4604      	mov	r4, r0
 8007c96:	460d      	mov	r5, r1
 8007c98:	dc0d      	bgt.n	8007cb6 <__ieee754_rem_pio2+0x1ae>
 8007c9a:	4b6e      	ldr	r3, [pc, #440]	; (8007e54 <__ieee754_rem_pio2+0x34c>)
 8007c9c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca4:	4543      	cmp	r3, r8
 8007ca6:	d006      	beq.n	8007cb6 <__ieee754_rem_pio2+0x1ae>
 8007ca8:	4622      	mov	r2, r4
 8007caa:	462b      	mov	r3, r5
 8007cac:	4630      	mov	r0, r6
 8007cae:	4639      	mov	r1, r7
 8007cb0:	f7f8 fa8e 	bl	80001d0 <__aeabi_dsub>
 8007cb4:	e00e      	b.n	8007cd4 <__ieee754_rem_pio2+0x1cc>
 8007cb6:	462b      	mov	r3, r5
 8007cb8:	4622      	mov	r2, r4
 8007cba:	4630      	mov	r0, r6
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	f7f8 fa87 	bl	80001d0 <__aeabi_dsub>
 8007cc2:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ccc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007cd0:	2b10      	cmp	r3, #16
 8007cd2:	dc02      	bgt.n	8007cda <__ieee754_rem_pio2+0x1d2>
 8007cd4:	e9ca 0100 	strd	r0, r1, [sl]
 8007cd8:	e039      	b.n	8007d4e <__ieee754_rem_pio2+0x246>
 8007cda:	a34f      	add	r3, pc, #316	; (adr r3, 8007e18 <__ieee754_rem_pio2+0x310>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	ec51 0b18 	vmov	r0, r1, d8
 8007ce4:	f7f8 fc2c 	bl	8000540 <__aeabi_dmul>
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	f7f8 fa6c 	bl	80001d0 <__aeabi_dsub>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4680      	mov	r8, r0
 8007cfe:	4689      	mov	r9, r1
 8007d00:	4630      	mov	r0, r6
 8007d02:	4639      	mov	r1, r7
 8007d04:	f7f8 fa64 	bl	80001d0 <__aeabi_dsub>
 8007d08:	4622      	mov	r2, r4
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	f7f8 fa60 	bl	80001d0 <__aeabi_dsub>
 8007d10:	a343      	add	r3, pc, #268	; (adr r3, 8007e20 <__ieee754_rem_pio2+0x318>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	4604      	mov	r4, r0
 8007d18:	460d      	mov	r5, r1
 8007d1a:	ec51 0b18 	vmov	r0, r1, d8
 8007d1e:	f7f8 fc0f 	bl	8000540 <__aeabi_dmul>
 8007d22:	4622      	mov	r2, r4
 8007d24:	462b      	mov	r3, r5
 8007d26:	f7f8 fa53 	bl	80001d0 <__aeabi_dsub>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4604      	mov	r4, r0
 8007d30:	460d      	mov	r5, r1
 8007d32:	4640      	mov	r0, r8
 8007d34:	4649      	mov	r1, r9
 8007d36:	f7f8 fa4b 	bl	80001d0 <__aeabi_dsub>
 8007d3a:	9a03      	ldr	r2, [sp, #12]
 8007d3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b31      	cmp	r3, #49	; 0x31
 8007d44:	dc24      	bgt.n	8007d90 <__ieee754_rem_pio2+0x288>
 8007d46:	e9ca 0100 	strd	r0, r1, [sl]
 8007d4a:	4646      	mov	r6, r8
 8007d4c:	464f      	mov	r7, r9
 8007d4e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d52:	4630      	mov	r0, r6
 8007d54:	4642      	mov	r2, r8
 8007d56:	464b      	mov	r3, r9
 8007d58:	4639      	mov	r1, r7
 8007d5a:	f7f8 fa39 	bl	80001d0 <__aeabi_dsub>
 8007d5e:	462b      	mov	r3, r5
 8007d60:	4622      	mov	r2, r4
 8007d62:	f7f8 fa35 	bl	80001d0 <__aeabi_dsub>
 8007d66:	9b02      	ldr	r3, [sp, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d6e:	f6bf af0b 	bge.w	8007b88 <__ieee754_rem_pio2+0x80>
 8007d72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d76:	f8ca 3004 	str.w	r3, [sl, #4]
 8007d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d7e:	f8ca 8000 	str.w	r8, [sl]
 8007d82:	f8ca 0008 	str.w	r0, [sl, #8]
 8007d86:	f8ca 300c 	str.w	r3, [sl, #12]
 8007d8a:	f1cb 0b00 	rsb	fp, fp, #0
 8007d8e:	e6fb      	b.n	8007b88 <__ieee754_rem_pio2+0x80>
 8007d90:	a327      	add	r3, pc, #156	; (adr r3, 8007e30 <__ieee754_rem_pio2+0x328>)
 8007d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d96:	ec51 0b18 	vmov	r0, r1, d8
 8007d9a:	f7f8 fbd1 	bl	8000540 <__aeabi_dmul>
 8007d9e:	4604      	mov	r4, r0
 8007da0:	460d      	mov	r5, r1
 8007da2:	4602      	mov	r2, r0
 8007da4:	460b      	mov	r3, r1
 8007da6:	4640      	mov	r0, r8
 8007da8:	4649      	mov	r1, r9
 8007daa:	f7f8 fa11 	bl	80001d0 <__aeabi_dsub>
 8007dae:	4602      	mov	r2, r0
 8007db0:	460b      	mov	r3, r1
 8007db2:	4606      	mov	r6, r0
 8007db4:	460f      	mov	r7, r1
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 fa09 	bl	80001d0 <__aeabi_dsub>
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	f7f8 fa05 	bl	80001d0 <__aeabi_dsub>
 8007dc6:	a31c      	add	r3, pc, #112	; (adr r3, 8007e38 <__ieee754_rem_pio2+0x330>)
 8007dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dcc:	4604      	mov	r4, r0
 8007dce:	460d      	mov	r5, r1
 8007dd0:	ec51 0b18 	vmov	r0, r1, d8
 8007dd4:	f7f8 fbb4 	bl	8000540 <__aeabi_dmul>
 8007dd8:	4622      	mov	r2, r4
 8007dda:	462b      	mov	r3, r5
 8007ddc:	f7f8 f9f8 	bl	80001d0 <__aeabi_dsub>
 8007de0:	4604      	mov	r4, r0
 8007de2:	460d      	mov	r5, r1
 8007de4:	e760      	b.n	8007ca8 <__ieee754_rem_pio2+0x1a0>
 8007de6:	4b1c      	ldr	r3, [pc, #112]	; (8007e58 <__ieee754_rem_pio2+0x350>)
 8007de8:	4598      	cmp	r8, r3
 8007dea:	dd37      	ble.n	8007e5c <__ieee754_rem_pio2+0x354>
 8007dec:	ee10 2a10 	vmov	r2, s0
 8007df0:	462b      	mov	r3, r5
 8007df2:	4620      	mov	r0, r4
 8007df4:	4629      	mov	r1, r5
 8007df6:	f7f8 f9eb 	bl	80001d0 <__aeabi_dsub>
 8007dfa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007dfe:	e9ca 0100 	strd	r0, r1, [sl]
 8007e02:	e695      	b.n	8007b30 <__ieee754_rem_pio2+0x28>
 8007e04:	f3af 8000 	nop.w
 8007e08:	54400000 	.word	0x54400000
 8007e0c:	3ff921fb 	.word	0x3ff921fb
 8007e10:	1a626331 	.word	0x1a626331
 8007e14:	3dd0b461 	.word	0x3dd0b461
 8007e18:	1a600000 	.word	0x1a600000
 8007e1c:	3dd0b461 	.word	0x3dd0b461
 8007e20:	2e037073 	.word	0x2e037073
 8007e24:	3ba3198a 	.word	0x3ba3198a
 8007e28:	6dc9c883 	.word	0x6dc9c883
 8007e2c:	3fe45f30 	.word	0x3fe45f30
 8007e30:	2e000000 	.word	0x2e000000
 8007e34:	3ba3198a 	.word	0x3ba3198a
 8007e38:	252049c1 	.word	0x252049c1
 8007e3c:	397b839a 	.word	0x397b839a
 8007e40:	3fe921fb 	.word	0x3fe921fb
 8007e44:	4002d97b 	.word	0x4002d97b
 8007e48:	3ff921fb 	.word	0x3ff921fb
 8007e4c:	413921fb 	.word	0x413921fb
 8007e50:	3fe00000 	.word	0x3fe00000
 8007e54:	080088b8 	.word	0x080088b8
 8007e58:	7fefffff 	.word	0x7fefffff
 8007e5c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007e60:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007e64:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007e68:	4620      	mov	r0, r4
 8007e6a:	460d      	mov	r5, r1
 8007e6c:	f7f8 fe02 	bl	8000a74 <__aeabi_d2iz>
 8007e70:	f7f8 fafc 	bl	800046c <__aeabi_i2d>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4620      	mov	r0, r4
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e80:	f7f8 f9a6 	bl	80001d0 <__aeabi_dsub>
 8007e84:	4b21      	ldr	r3, [pc, #132]	; (8007f0c <__ieee754_rem_pio2+0x404>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	f7f8 fb5a 	bl	8000540 <__aeabi_dmul>
 8007e8c:	460d      	mov	r5, r1
 8007e8e:	4604      	mov	r4, r0
 8007e90:	f7f8 fdf0 	bl	8000a74 <__aeabi_d2iz>
 8007e94:	f7f8 faea 	bl	800046c <__aeabi_i2d>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4620      	mov	r0, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ea4:	f7f8 f994 	bl	80001d0 <__aeabi_dsub>
 8007ea8:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <__ieee754_rem_pio2+0x404>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f7f8 fb48 	bl	8000540 <__aeabi_dmul>
 8007eb0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007eb4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007eb8:	2703      	movs	r7, #3
 8007eba:	2400      	movs	r4, #0
 8007ebc:	2500      	movs	r5, #0
 8007ebe:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8007ec2:	4622      	mov	r2, r4
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	46b9      	mov	r9, r7
 8007ec8:	3f01      	subs	r7, #1
 8007eca:	f7f8 fda1 	bl	8000a10 <__aeabi_dcmpeq>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d1f5      	bne.n	8007ebe <__ieee754_rem_pio2+0x3b6>
 8007ed2:	4b0f      	ldr	r3, [pc, #60]	; (8007f10 <__ieee754_rem_pio2+0x408>)
 8007ed4:	9301      	str	r3, [sp, #4]
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	4632      	mov	r2, r6
 8007edc:	464b      	mov	r3, r9
 8007ede:	4651      	mov	r1, sl
 8007ee0:	a804      	add	r0, sp, #16
 8007ee2:	f000 f851 	bl	8007f88 <__kernel_rem_pio2>
 8007ee6:	9b02      	ldr	r3, [sp, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	4683      	mov	fp, r0
 8007eec:	f6bf ae4c 	bge.w	8007b88 <__ieee754_rem_pio2+0x80>
 8007ef0:	e9da 2100 	ldrd	r2, r1, [sl]
 8007ef4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ef8:	e9ca 2300 	strd	r2, r3, [sl]
 8007efc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007f00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f04:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007f08:	e73f      	b.n	8007d8a <__ieee754_rem_pio2+0x282>
 8007f0a:	bf00      	nop
 8007f0c:	41700000 	.word	0x41700000
 8007f10:	08008938 	.word	0x08008938

08007f14 <fabs>:
 8007f14:	ec51 0b10 	vmov	r0, r1, d0
 8007f18:	ee10 2a10 	vmov	r2, s0
 8007f1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007f20:	ec43 2b10 	vmov	d0, r2, r3
 8007f24:	4770      	bx	lr

08007f26 <with_errno>:
 8007f26:	b570      	push	{r4, r5, r6, lr}
 8007f28:	4604      	mov	r4, r0
 8007f2a:	460d      	mov	r5, r1
 8007f2c:	4616      	mov	r6, r2
 8007f2e:	f7ff f92f 	bl	8007190 <__errno>
 8007f32:	4629      	mov	r1, r5
 8007f34:	6006      	str	r6, [r0, #0]
 8007f36:	4620      	mov	r0, r4
 8007f38:	bd70      	pop	{r4, r5, r6, pc}

08007f3a <xflow>:
 8007f3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	461d      	mov	r5, r3
 8007f40:	b108      	cbz	r0, 8007f46 <xflow+0xc>
 8007f42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007f46:	e9cd 2300 	strd	r2, r3, [sp]
 8007f4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	4629      	mov	r1, r5
 8007f52:	f7f8 faf5 	bl	8000540 <__aeabi_dmul>
 8007f56:	2222      	movs	r2, #34	; 0x22
 8007f58:	b003      	add	sp, #12
 8007f5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f5e:	f7ff bfe2 	b.w	8007f26 <with_errno>

08007f62 <__math_uflow>:
 8007f62:	b508      	push	{r3, lr}
 8007f64:	2200      	movs	r2, #0
 8007f66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f6a:	f7ff ffe6 	bl	8007f3a <xflow>
 8007f6e:	ec41 0b10 	vmov	d0, r0, r1
 8007f72:	bd08      	pop	{r3, pc}

08007f74 <__math_oflow>:
 8007f74:	b508      	push	{r3, lr}
 8007f76:	2200      	movs	r2, #0
 8007f78:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007f7c:	f7ff ffdd 	bl	8007f3a <xflow>
 8007f80:	ec41 0b10 	vmov	d0, r0, r1
 8007f84:	bd08      	pop	{r3, pc}
	...

08007f88 <__kernel_rem_pio2>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ed2d 8b02 	vpush	{d8}
 8007f90:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007f94:	f112 0f14 	cmn.w	r2, #20
 8007f98:	9306      	str	r3, [sp, #24]
 8007f9a:	9104      	str	r1, [sp, #16]
 8007f9c:	4bc2      	ldr	r3, [pc, #776]	; (80082a8 <__kernel_rem_pio2+0x320>)
 8007f9e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007fa0:	9009      	str	r0, [sp, #36]	; 0x24
 8007fa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fa6:	9300      	str	r3, [sp, #0]
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fae:	bfa8      	it	ge
 8007fb0:	1ed4      	subge	r4, r2, #3
 8007fb2:	9305      	str	r3, [sp, #20]
 8007fb4:	bfb2      	itee	lt
 8007fb6:	2400      	movlt	r4, #0
 8007fb8:	2318      	movge	r3, #24
 8007fba:	fb94 f4f3 	sdivge	r4, r4, r3
 8007fbe:	f06f 0317 	mvn.w	r3, #23
 8007fc2:	fb04 3303 	mla	r3, r4, r3, r3
 8007fc6:	eb03 0a02 	add.w	sl, r3, r2
 8007fca:	9b00      	ldr	r3, [sp, #0]
 8007fcc:	9a05      	ldr	r2, [sp, #20]
 8007fce:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8008298 <__kernel_rem_pio2+0x310>
 8007fd2:	eb03 0802 	add.w	r8, r3, r2
 8007fd6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007fd8:	1aa7      	subs	r7, r4, r2
 8007fda:	ae20      	add	r6, sp, #128	; 0x80
 8007fdc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007fe0:	2500      	movs	r5, #0
 8007fe2:	4545      	cmp	r5, r8
 8007fe4:	dd13      	ble.n	800800e <__kernel_rem_pio2+0x86>
 8007fe6:	9b06      	ldr	r3, [sp, #24]
 8007fe8:	aa20      	add	r2, sp, #128	; 0x80
 8007fea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007fee:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007ff2:	f04f 0800 	mov.w	r8, #0
 8007ff6:	9b00      	ldr	r3, [sp, #0]
 8007ff8:	4598      	cmp	r8, r3
 8007ffa:	dc31      	bgt.n	8008060 <__kernel_rem_pio2+0xd8>
 8007ffc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8008298 <__kernel_rem_pio2+0x310>
 8008000:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008004:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008008:	462f      	mov	r7, r5
 800800a:	2600      	movs	r6, #0
 800800c:	e01b      	b.n	8008046 <__kernel_rem_pio2+0xbe>
 800800e:	42ef      	cmn	r7, r5
 8008010:	d407      	bmi.n	8008022 <__kernel_rem_pio2+0x9a>
 8008012:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008016:	f7f8 fa29 	bl	800046c <__aeabi_i2d>
 800801a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800801e:	3501      	adds	r5, #1
 8008020:	e7df      	b.n	8007fe2 <__kernel_rem_pio2+0x5a>
 8008022:	ec51 0b18 	vmov	r0, r1, d8
 8008026:	e7f8      	b.n	800801a <__kernel_rem_pio2+0x92>
 8008028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008030:	f7f8 fa86 	bl	8000540 <__aeabi_dmul>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800803c:	f7f8 f8ca 	bl	80001d4 <__adddf3>
 8008040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008044:	3601      	adds	r6, #1
 8008046:	9b05      	ldr	r3, [sp, #20]
 8008048:	429e      	cmp	r6, r3
 800804a:	f1a7 0708 	sub.w	r7, r7, #8
 800804e:	ddeb      	ble.n	8008028 <__kernel_rem_pio2+0xa0>
 8008050:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008054:	f108 0801 	add.w	r8, r8, #1
 8008058:	ecab 7b02 	vstmia	fp!, {d7}
 800805c:	3508      	adds	r5, #8
 800805e:	e7ca      	b.n	8007ff6 <__kernel_rem_pio2+0x6e>
 8008060:	9b00      	ldr	r3, [sp, #0]
 8008062:	aa0c      	add	r2, sp, #48	; 0x30
 8008064:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008068:	930b      	str	r3, [sp, #44]	; 0x2c
 800806a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800806c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008070:	9c00      	ldr	r4, [sp, #0]
 8008072:	930a      	str	r3, [sp, #40]	; 0x28
 8008074:	00e3      	lsls	r3, r4, #3
 8008076:	9308      	str	r3, [sp, #32]
 8008078:	ab98      	add	r3, sp, #608	; 0x260
 800807a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800807e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8008082:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8008086:	ab70      	add	r3, sp, #448	; 0x1c0
 8008088:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800808c:	46c3      	mov	fp, r8
 800808e:	46a1      	mov	r9, r4
 8008090:	f1b9 0f00 	cmp.w	r9, #0
 8008094:	f1a5 0508 	sub.w	r5, r5, #8
 8008098:	dc77      	bgt.n	800818a <__kernel_rem_pio2+0x202>
 800809a:	ec47 6b10 	vmov	d0, r6, r7
 800809e:	4650      	mov	r0, sl
 80080a0:	f000 fac2 	bl	8008628 <scalbn>
 80080a4:	ec57 6b10 	vmov	r6, r7, d0
 80080a8:	2200      	movs	r2, #0
 80080aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80080ae:	ee10 0a10 	vmov	r0, s0
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 fa44 	bl	8000540 <__aeabi_dmul>
 80080b8:	ec41 0b10 	vmov	d0, r0, r1
 80080bc:	f000 fb34 	bl	8008728 <floor>
 80080c0:	4b7a      	ldr	r3, [pc, #488]	; (80082ac <__kernel_rem_pio2+0x324>)
 80080c2:	ec51 0b10 	vmov	r0, r1, d0
 80080c6:	2200      	movs	r2, #0
 80080c8:	f7f8 fa3a 	bl	8000540 <__aeabi_dmul>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	f7f8 f87c 	bl	80001d0 <__aeabi_dsub>
 80080d8:	460f      	mov	r7, r1
 80080da:	4606      	mov	r6, r0
 80080dc:	f7f8 fcca 	bl	8000a74 <__aeabi_d2iz>
 80080e0:	9002      	str	r0, [sp, #8]
 80080e2:	f7f8 f9c3 	bl	800046c <__aeabi_i2d>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4630      	mov	r0, r6
 80080ec:	4639      	mov	r1, r7
 80080ee:	f7f8 f86f 	bl	80001d0 <__aeabi_dsub>
 80080f2:	f1ba 0f00 	cmp.w	sl, #0
 80080f6:	4606      	mov	r6, r0
 80080f8:	460f      	mov	r7, r1
 80080fa:	dd6d      	ble.n	80081d8 <__kernel_rem_pio2+0x250>
 80080fc:	1e61      	subs	r1, r4, #1
 80080fe:	ab0c      	add	r3, sp, #48	; 0x30
 8008100:	9d02      	ldr	r5, [sp, #8]
 8008102:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008106:	f1ca 0018 	rsb	r0, sl, #24
 800810a:	fa43 f200 	asr.w	r2, r3, r0
 800810e:	4415      	add	r5, r2
 8008110:	4082      	lsls	r2, r0
 8008112:	1a9b      	subs	r3, r3, r2
 8008114:	aa0c      	add	r2, sp, #48	; 0x30
 8008116:	9502      	str	r5, [sp, #8]
 8008118:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800811c:	f1ca 0217 	rsb	r2, sl, #23
 8008120:	fa43 fb02 	asr.w	fp, r3, r2
 8008124:	f1bb 0f00 	cmp.w	fp, #0
 8008128:	dd65      	ble.n	80081f6 <__kernel_rem_pio2+0x26e>
 800812a:	9b02      	ldr	r3, [sp, #8]
 800812c:	2200      	movs	r2, #0
 800812e:	3301      	adds	r3, #1
 8008130:	9302      	str	r3, [sp, #8]
 8008132:	4615      	mov	r5, r2
 8008134:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008138:	4294      	cmp	r4, r2
 800813a:	f300 809f 	bgt.w	800827c <__kernel_rem_pio2+0x2f4>
 800813e:	f1ba 0f00 	cmp.w	sl, #0
 8008142:	dd07      	ble.n	8008154 <__kernel_rem_pio2+0x1cc>
 8008144:	f1ba 0f01 	cmp.w	sl, #1
 8008148:	f000 80c1 	beq.w	80082ce <__kernel_rem_pio2+0x346>
 800814c:	f1ba 0f02 	cmp.w	sl, #2
 8008150:	f000 80c7 	beq.w	80082e2 <__kernel_rem_pio2+0x35a>
 8008154:	f1bb 0f02 	cmp.w	fp, #2
 8008158:	d14d      	bne.n	80081f6 <__kernel_rem_pio2+0x26e>
 800815a:	4632      	mov	r2, r6
 800815c:	463b      	mov	r3, r7
 800815e:	4954      	ldr	r1, [pc, #336]	; (80082b0 <__kernel_rem_pio2+0x328>)
 8008160:	2000      	movs	r0, #0
 8008162:	f7f8 f835 	bl	80001d0 <__aeabi_dsub>
 8008166:	4606      	mov	r6, r0
 8008168:	460f      	mov	r7, r1
 800816a:	2d00      	cmp	r5, #0
 800816c:	d043      	beq.n	80081f6 <__kernel_rem_pio2+0x26e>
 800816e:	4650      	mov	r0, sl
 8008170:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80082a0 <__kernel_rem_pio2+0x318>
 8008174:	f000 fa58 	bl	8008628 <scalbn>
 8008178:	4630      	mov	r0, r6
 800817a:	4639      	mov	r1, r7
 800817c:	ec53 2b10 	vmov	r2, r3, d0
 8008180:	f7f8 f826 	bl	80001d0 <__aeabi_dsub>
 8008184:	4606      	mov	r6, r0
 8008186:	460f      	mov	r7, r1
 8008188:	e035      	b.n	80081f6 <__kernel_rem_pio2+0x26e>
 800818a:	4b4a      	ldr	r3, [pc, #296]	; (80082b4 <__kernel_rem_pio2+0x32c>)
 800818c:	2200      	movs	r2, #0
 800818e:	4630      	mov	r0, r6
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 f9d5 	bl	8000540 <__aeabi_dmul>
 8008196:	f7f8 fc6d 	bl	8000a74 <__aeabi_d2iz>
 800819a:	f7f8 f967 	bl	800046c <__aeabi_i2d>
 800819e:	4602      	mov	r2, r0
 80081a0:	460b      	mov	r3, r1
 80081a2:	ec43 2b18 	vmov	d8, r2, r3
 80081a6:	4b44      	ldr	r3, [pc, #272]	; (80082b8 <__kernel_rem_pio2+0x330>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	f7f8 f9c9 	bl	8000540 <__aeabi_dmul>
 80081ae:	4602      	mov	r2, r0
 80081b0:	460b      	mov	r3, r1
 80081b2:	4630      	mov	r0, r6
 80081b4:	4639      	mov	r1, r7
 80081b6:	f7f8 f80b 	bl	80001d0 <__aeabi_dsub>
 80081ba:	f7f8 fc5b 	bl	8000a74 <__aeabi_d2iz>
 80081be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081c2:	f84b 0b04 	str.w	r0, [fp], #4
 80081c6:	ec51 0b18 	vmov	r0, r1, d8
 80081ca:	f7f8 f803 	bl	80001d4 <__adddf3>
 80081ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80081d2:	4606      	mov	r6, r0
 80081d4:	460f      	mov	r7, r1
 80081d6:	e75b      	b.n	8008090 <__kernel_rem_pio2+0x108>
 80081d8:	d106      	bne.n	80081e8 <__kernel_rem_pio2+0x260>
 80081da:	1e63      	subs	r3, r4, #1
 80081dc:	aa0c      	add	r2, sp, #48	; 0x30
 80081de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80081e6:	e79d      	b.n	8008124 <__kernel_rem_pio2+0x19c>
 80081e8:	4b34      	ldr	r3, [pc, #208]	; (80082bc <__kernel_rem_pio2+0x334>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	f7f8 fc2e 	bl	8000a4c <__aeabi_dcmpge>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d140      	bne.n	8008276 <__kernel_rem_pio2+0x2ee>
 80081f4:	4683      	mov	fp, r0
 80081f6:	2200      	movs	r2, #0
 80081f8:	2300      	movs	r3, #0
 80081fa:	4630      	mov	r0, r6
 80081fc:	4639      	mov	r1, r7
 80081fe:	f7f8 fc07 	bl	8000a10 <__aeabi_dcmpeq>
 8008202:	2800      	cmp	r0, #0
 8008204:	f000 80c1 	beq.w	800838a <__kernel_rem_pio2+0x402>
 8008208:	1e65      	subs	r5, r4, #1
 800820a:	462b      	mov	r3, r5
 800820c:	2200      	movs	r2, #0
 800820e:	9900      	ldr	r1, [sp, #0]
 8008210:	428b      	cmp	r3, r1
 8008212:	da6d      	bge.n	80082f0 <__kernel_rem_pio2+0x368>
 8008214:	2a00      	cmp	r2, #0
 8008216:	f000 808a 	beq.w	800832e <__kernel_rem_pio2+0x3a6>
 800821a:	ab0c      	add	r3, sp, #48	; 0x30
 800821c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008220:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 80ae 	beq.w	8008386 <__kernel_rem_pio2+0x3fe>
 800822a:	4650      	mov	r0, sl
 800822c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80082a0 <__kernel_rem_pio2+0x318>
 8008230:	f000 f9fa 	bl	8008628 <scalbn>
 8008234:	1c6b      	adds	r3, r5, #1
 8008236:	00da      	lsls	r2, r3, #3
 8008238:	9205      	str	r2, [sp, #20]
 800823a:	ec57 6b10 	vmov	r6, r7, d0
 800823e:	aa70      	add	r2, sp, #448	; 0x1c0
 8008240:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80082b4 <__kernel_rem_pio2+0x32c>
 8008244:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008248:	462c      	mov	r4, r5
 800824a:	f04f 0800 	mov.w	r8, #0
 800824e:	2c00      	cmp	r4, #0
 8008250:	f280 80d4 	bge.w	80083fc <__kernel_rem_pio2+0x474>
 8008254:	462c      	mov	r4, r5
 8008256:	2c00      	cmp	r4, #0
 8008258:	f2c0 8102 	blt.w	8008460 <__kernel_rem_pio2+0x4d8>
 800825c:	4b18      	ldr	r3, [pc, #96]	; (80082c0 <__kernel_rem_pio2+0x338>)
 800825e:	461e      	mov	r6, r3
 8008260:	ab70      	add	r3, sp, #448	; 0x1c0
 8008262:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8008266:	1b2b      	subs	r3, r5, r4
 8008268:	f04f 0900 	mov.w	r9, #0
 800826c:	f04f 0a00 	mov.w	sl, #0
 8008270:	2700      	movs	r7, #0
 8008272:	9306      	str	r3, [sp, #24]
 8008274:	e0e6      	b.n	8008444 <__kernel_rem_pio2+0x4bc>
 8008276:	f04f 0b02 	mov.w	fp, #2
 800827a:	e756      	b.n	800812a <__kernel_rem_pio2+0x1a2>
 800827c:	f8d8 3000 	ldr.w	r3, [r8]
 8008280:	bb05      	cbnz	r5, 80082c4 <__kernel_rem_pio2+0x33c>
 8008282:	b123      	cbz	r3, 800828e <__kernel_rem_pio2+0x306>
 8008284:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008288:	f8c8 3000 	str.w	r3, [r8]
 800828c:	2301      	movs	r3, #1
 800828e:	3201      	adds	r2, #1
 8008290:	f108 0804 	add.w	r8, r8, #4
 8008294:	461d      	mov	r5, r3
 8008296:	e74f      	b.n	8008138 <__kernel_rem_pio2+0x1b0>
	...
 80082a4:	3ff00000 	.word	0x3ff00000
 80082a8:	08008a80 	.word	0x08008a80
 80082ac:	40200000 	.word	0x40200000
 80082b0:	3ff00000 	.word	0x3ff00000
 80082b4:	3e700000 	.word	0x3e700000
 80082b8:	41700000 	.word	0x41700000
 80082bc:	3fe00000 	.word	0x3fe00000
 80082c0:	08008a40 	.word	0x08008a40
 80082c4:	1acb      	subs	r3, r1, r3
 80082c6:	f8c8 3000 	str.w	r3, [r8]
 80082ca:	462b      	mov	r3, r5
 80082cc:	e7df      	b.n	800828e <__kernel_rem_pio2+0x306>
 80082ce:	1e62      	subs	r2, r4, #1
 80082d0:	ab0c      	add	r3, sp, #48	; 0x30
 80082d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80082da:	a90c      	add	r1, sp, #48	; 0x30
 80082dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80082e0:	e738      	b.n	8008154 <__kernel_rem_pio2+0x1cc>
 80082e2:	1e62      	subs	r2, r4, #1
 80082e4:	ab0c      	add	r3, sp, #48	; 0x30
 80082e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ea:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80082ee:	e7f4      	b.n	80082da <__kernel_rem_pio2+0x352>
 80082f0:	a90c      	add	r1, sp, #48	; 0x30
 80082f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	430a      	orrs	r2, r1
 80082fa:	e788      	b.n	800820e <__kernel_rem_pio2+0x286>
 80082fc:	3301      	adds	r3, #1
 80082fe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008302:	2900      	cmp	r1, #0
 8008304:	d0fa      	beq.n	80082fc <__kernel_rem_pio2+0x374>
 8008306:	9a08      	ldr	r2, [sp, #32]
 8008308:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800830c:	446a      	add	r2, sp
 800830e:	3a98      	subs	r2, #152	; 0x98
 8008310:	9208      	str	r2, [sp, #32]
 8008312:	9a06      	ldr	r2, [sp, #24]
 8008314:	a920      	add	r1, sp, #128	; 0x80
 8008316:	18a2      	adds	r2, r4, r2
 8008318:	18e3      	adds	r3, r4, r3
 800831a:	f104 0801 	add.w	r8, r4, #1
 800831e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8008322:	9302      	str	r3, [sp, #8]
 8008324:	9b02      	ldr	r3, [sp, #8]
 8008326:	4543      	cmp	r3, r8
 8008328:	da04      	bge.n	8008334 <__kernel_rem_pio2+0x3ac>
 800832a:	461c      	mov	r4, r3
 800832c:	e6a2      	b.n	8008074 <__kernel_rem_pio2+0xec>
 800832e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008330:	2301      	movs	r3, #1
 8008332:	e7e4      	b.n	80082fe <__kernel_rem_pio2+0x376>
 8008334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008336:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800833a:	f7f8 f897 	bl	800046c <__aeabi_i2d>
 800833e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008344:	46ab      	mov	fp, r5
 8008346:	461c      	mov	r4, r3
 8008348:	f04f 0900 	mov.w	r9, #0
 800834c:	2600      	movs	r6, #0
 800834e:	2700      	movs	r7, #0
 8008350:	9b05      	ldr	r3, [sp, #20]
 8008352:	4599      	cmp	r9, r3
 8008354:	dd06      	ble.n	8008364 <__kernel_rem_pio2+0x3dc>
 8008356:	9b08      	ldr	r3, [sp, #32]
 8008358:	e8e3 6702 	strd	r6, r7, [r3], #8
 800835c:	f108 0801 	add.w	r8, r8, #1
 8008360:	9308      	str	r3, [sp, #32]
 8008362:	e7df      	b.n	8008324 <__kernel_rem_pio2+0x39c>
 8008364:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008368:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800836c:	f7f8 f8e8 	bl	8000540 <__aeabi_dmul>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	4630      	mov	r0, r6
 8008376:	4639      	mov	r1, r7
 8008378:	f7f7 ff2c 	bl	80001d4 <__adddf3>
 800837c:	f109 0901 	add.w	r9, r9, #1
 8008380:	4606      	mov	r6, r0
 8008382:	460f      	mov	r7, r1
 8008384:	e7e4      	b.n	8008350 <__kernel_rem_pio2+0x3c8>
 8008386:	3d01      	subs	r5, #1
 8008388:	e747      	b.n	800821a <__kernel_rem_pio2+0x292>
 800838a:	ec47 6b10 	vmov	d0, r6, r7
 800838e:	f1ca 0000 	rsb	r0, sl, #0
 8008392:	f000 f949 	bl	8008628 <scalbn>
 8008396:	ec57 6b10 	vmov	r6, r7, d0
 800839a:	4ba0      	ldr	r3, [pc, #640]	; (800861c <__kernel_rem_pio2+0x694>)
 800839c:	ee10 0a10 	vmov	r0, s0
 80083a0:	2200      	movs	r2, #0
 80083a2:	4639      	mov	r1, r7
 80083a4:	f7f8 fb52 	bl	8000a4c <__aeabi_dcmpge>
 80083a8:	b1f8      	cbz	r0, 80083ea <__kernel_rem_pio2+0x462>
 80083aa:	4b9d      	ldr	r3, [pc, #628]	; (8008620 <__kernel_rem_pio2+0x698>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f8 f8c5 	bl	8000540 <__aeabi_dmul>
 80083b6:	f7f8 fb5d 	bl	8000a74 <__aeabi_d2iz>
 80083ba:	4680      	mov	r8, r0
 80083bc:	f7f8 f856 	bl	800046c <__aeabi_i2d>
 80083c0:	4b96      	ldr	r3, [pc, #600]	; (800861c <__kernel_rem_pio2+0x694>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	f7f8 f8bc 	bl	8000540 <__aeabi_dmul>
 80083c8:	460b      	mov	r3, r1
 80083ca:	4602      	mov	r2, r0
 80083cc:	4639      	mov	r1, r7
 80083ce:	4630      	mov	r0, r6
 80083d0:	f7f7 fefe 	bl	80001d0 <__aeabi_dsub>
 80083d4:	f7f8 fb4e 	bl	8000a74 <__aeabi_d2iz>
 80083d8:	1c65      	adds	r5, r4, #1
 80083da:	ab0c      	add	r3, sp, #48	; 0x30
 80083dc:	f10a 0a18 	add.w	sl, sl, #24
 80083e0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80083e4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80083e8:	e71f      	b.n	800822a <__kernel_rem_pio2+0x2a2>
 80083ea:	4630      	mov	r0, r6
 80083ec:	4639      	mov	r1, r7
 80083ee:	f7f8 fb41 	bl	8000a74 <__aeabi_d2iz>
 80083f2:	ab0c      	add	r3, sp, #48	; 0x30
 80083f4:	4625      	mov	r5, r4
 80083f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80083fa:	e716      	b.n	800822a <__kernel_rem_pio2+0x2a2>
 80083fc:	ab0c      	add	r3, sp, #48	; 0x30
 80083fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008402:	f7f8 f833 	bl	800046c <__aeabi_i2d>
 8008406:	4632      	mov	r2, r6
 8008408:	463b      	mov	r3, r7
 800840a:	f7f8 f899 	bl	8000540 <__aeabi_dmul>
 800840e:	4642      	mov	r2, r8
 8008410:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8008414:	464b      	mov	r3, r9
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	f7f8 f891 	bl	8000540 <__aeabi_dmul>
 800841e:	3c01      	subs	r4, #1
 8008420:	4606      	mov	r6, r0
 8008422:	460f      	mov	r7, r1
 8008424:	e713      	b.n	800824e <__kernel_rem_pio2+0x2c6>
 8008426:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800842a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800842e:	f7f8 f887 	bl	8000540 <__aeabi_dmul>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4648      	mov	r0, r9
 8008438:	4651      	mov	r1, sl
 800843a:	f7f7 fecb 	bl	80001d4 <__adddf3>
 800843e:	3701      	adds	r7, #1
 8008440:	4681      	mov	r9, r0
 8008442:	468a      	mov	sl, r1
 8008444:	9b00      	ldr	r3, [sp, #0]
 8008446:	429f      	cmp	r7, r3
 8008448:	dc02      	bgt.n	8008450 <__kernel_rem_pio2+0x4c8>
 800844a:	9b06      	ldr	r3, [sp, #24]
 800844c:	429f      	cmp	r7, r3
 800844e:	ddea      	ble.n	8008426 <__kernel_rem_pio2+0x49e>
 8008450:	9a06      	ldr	r2, [sp, #24]
 8008452:	ab48      	add	r3, sp, #288	; 0x120
 8008454:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008458:	e9c6 9a00 	strd	r9, sl, [r6]
 800845c:	3c01      	subs	r4, #1
 800845e:	e6fa      	b.n	8008256 <__kernel_rem_pio2+0x2ce>
 8008460:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008462:	2b02      	cmp	r3, #2
 8008464:	dc0b      	bgt.n	800847e <__kernel_rem_pio2+0x4f6>
 8008466:	2b00      	cmp	r3, #0
 8008468:	dc39      	bgt.n	80084de <__kernel_rem_pio2+0x556>
 800846a:	d05d      	beq.n	8008528 <__kernel_rem_pio2+0x5a0>
 800846c:	9b02      	ldr	r3, [sp, #8]
 800846e:	f003 0007 	and.w	r0, r3, #7
 8008472:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008476:	ecbd 8b02 	vpop	{d8}
 800847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008480:	2b03      	cmp	r3, #3
 8008482:	d1f3      	bne.n	800846c <__kernel_rem_pio2+0x4e4>
 8008484:	9b05      	ldr	r3, [sp, #20]
 8008486:	9500      	str	r5, [sp, #0]
 8008488:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800848c:	eb0d 0403 	add.w	r4, sp, r3
 8008490:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8008494:	46a2      	mov	sl, r4
 8008496:	9b00      	ldr	r3, [sp, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	f1aa 0a08 	sub.w	sl, sl, #8
 800849e:	dc69      	bgt.n	8008574 <__kernel_rem_pio2+0x5ec>
 80084a0:	46aa      	mov	sl, r5
 80084a2:	f1ba 0f01 	cmp.w	sl, #1
 80084a6:	f1a4 0408 	sub.w	r4, r4, #8
 80084aa:	f300 8083 	bgt.w	80085b4 <__kernel_rem_pio2+0x62c>
 80084ae:	9c05      	ldr	r4, [sp, #20]
 80084b0:	ab48      	add	r3, sp, #288	; 0x120
 80084b2:	441c      	add	r4, r3
 80084b4:	2000      	movs	r0, #0
 80084b6:	2100      	movs	r1, #0
 80084b8:	2d01      	cmp	r5, #1
 80084ba:	f300 809a 	bgt.w	80085f2 <__kernel_rem_pio2+0x66a>
 80084be:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80084c2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80084c6:	f1bb 0f00 	cmp.w	fp, #0
 80084ca:	f040 8098 	bne.w	80085fe <__kernel_rem_pio2+0x676>
 80084ce:	9b04      	ldr	r3, [sp, #16]
 80084d0:	e9c3 7800 	strd	r7, r8, [r3]
 80084d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80084d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80084dc:	e7c6      	b.n	800846c <__kernel_rem_pio2+0x4e4>
 80084de:	9e05      	ldr	r6, [sp, #20]
 80084e0:	ab48      	add	r3, sp, #288	; 0x120
 80084e2:	441e      	add	r6, r3
 80084e4:	462c      	mov	r4, r5
 80084e6:	2000      	movs	r0, #0
 80084e8:	2100      	movs	r1, #0
 80084ea:	2c00      	cmp	r4, #0
 80084ec:	da33      	bge.n	8008556 <__kernel_rem_pio2+0x5ce>
 80084ee:	f1bb 0f00 	cmp.w	fp, #0
 80084f2:	d036      	beq.n	8008562 <__kernel_rem_pio2+0x5da>
 80084f4:	4602      	mov	r2, r0
 80084f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084fa:	9c04      	ldr	r4, [sp, #16]
 80084fc:	e9c4 2300 	strd	r2, r3, [r4]
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008508:	f7f7 fe62 	bl	80001d0 <__aeabi_dsub>
 800850c:	ae4a      	add	r6, sp, #296	; 0x128
 800850e:	2401      	movs	r4, #1
 8008510:	42a5      	cmp	r5, r4
 8008512:	da29      	bge.n	8008568 <__kernel_rem_pio2+0x5e0>
 8008514:	f1bb 0f00 	cmp.w	fp, #0
 8008518:	d002      	beq.n	8008520 <__kernel_rem_pio2+0x598>
 800851a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800851e:	4619      	mov	r1, r3
 8008520:	9b04      	ldr	r3, [sp, #16]
 8008522:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008526:	e7a1      	b.n	800846c <__kernel_rem_pio2+0x4e4>
 8008528:	9c05      	ldr	r4, [sp, #20]
 800852a:	ab48      	add	r3, sp, #288	; 0x120
 800852c:	441c      	add	r4, r3
 800852e:	2000      	movs	r0, #0
 8008530:	2100      	movs	r1, #0
 8008532:	2d00      	cmp	r5, #0
 8008534:	da09      	bge.n	800854a <__kernel_rem_pio2+0x5c2>
 8008536:	f1bb 0f00 	cmp.w	fp, #0
 800853a:	d002      	beq.n	8008542 <__kernel_rem_pio2+0x5ba>
 800853c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008540:	4619      	mov	r1, r3
 8008542:	9b04      	ldr	r3, [sp, #16]
 8008544:	e9c3 0100 	strd	r0, r1, [r3]
 8008548:	e790      	b.n	800846c <__kernel_rem_pio2+0x4e4>
 800854a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800854e:	f7f7 fe41 	bl	80001d4 <__adddf3>
 8008552:	3d01      	subs	r5, #1
 8008554:	e7ed      	b.n	8008532 <__kernel_rem_pio2+0x5aa>
 8008556:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800855a:	f7f7 fe3b 	bl	80001d4 <__adddf3>
 800855e:	3c01      	subs	r4, #1
 8008560:	e7c3      	b.n	80084ea <__kernel_rem_pio2+0x562>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	e7c8      	b.n	80084fa <__kernel_rem_pio2+0x572>
 8008568:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800856c:	f7f7 fe32 	bl	80001d4 <__adddf3>
 8008570:	3401      	adds	r4, #1
 8008572:	e7cd      	b.n	8008510 <__kernel_rem_pio2+0x588>
 8008574:	e9da 8900 	ldrd	r8, r9, [sl]
 8008578:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800857c:	9b00      	ldr	r3, [sp, #0]
 800857e:	3b01      	subs	r3, #1
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	4632      	mov	r2, r6
 8008584:	463b      	mov	r3, r7
 8008586:	4640      	mov	r0, r8
 8008588:	4649      	mov	r1, r9
 800858a:	f7f7 fe23 	bl	80001d4 <__adddf3>
 800858e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4640      	mov	r0, r8
 8008598:	4649      	mov	r1, r9
 800859a:	f7f7 fe19 	bl	80001d0 <__aeabi_dsub>
 800859e:	4632      	mov	r2, r6
 80085a0:	463b      	mov	r3, r7
 80085a2:	f7f7 fe17 	bl	80001d4 <__adddf3>
 80085a6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80085aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80085ae:	ed8a 7b00 	vstr	d7, [sl]
 80085b2:	e770      	b.n	8008496 <__kernel_rem_pio2+0x50e>
 80085b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80085b8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80085bc:	4640      	mov	r0, r8
 80085be:	4632      	mov	r2, r6
 80085c0:	463b      	mov	r3, r7
 80085c2:	4649      	mov	r1, r9
 80085c4:	f7f7 fe06 	bl	80001d4 <__adddf3>
 80085c8:	e9cd 0100 	strd	r0, r1, [sp]
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4640      	mov	r0, r8
 80085d2:	4649      	mov	r1, r9
 80085d4:	f7f7 fdfc 	bl	80001d0 <__aeabi_dsub>
 80085d8:	4632      	mov	r2, r6
 80085da:	463b      	mov	r3, r7
 80085dc:	f7f7 fdfa 	bl	80001d4 <__adddf3>
 80085e0:	ed9d 7b00 	vldr	d7, [sp]
 80085e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80085e8:	ed84 7b00 	vstr	d7, [r4]
 80085ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085f0:	e757      	b.n	80084a2 <__kernel_rem_pio2+0x51a>
 80085f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80085f6:	f7f7 fded 	bl	80001d4 <__adddf3>
 80085fa:	3d01      	subs	r5, #1
 80085fc:	e75c      	b.n	80084b8 <__kernel_rem_pio2+0x530>
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	9a04      	ldr	r2, [sp, #16]
 8008602:	601f      	str	r7, [r3, #0]
 8008604:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008608:	605c      	str	r4, [r3, #4]
 800860a:	609d      	str	r5, [r3, #8]
 800860c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008610:	60d3      	str	r3, [r2, #12]
 8008612:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008616:	6110      	str	r0, [r2, #16]
 8008618:	6153      	str	r3, [r2, #20]
 800861a:	e727      	b.n	800846c <__kernel_rem_pio2+0x4e4>
 800861c:	41700000 	.word	0x41700000
 8008620:	3e700000 	.word	0x3e700000
 8008624:	00000000 	.word	0x00000000

08008628 <scalbn>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	ec55 4b10 	vmov	r4, r5, d0
 800862e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008632:	4606      	mov	r6, r0
 8008634:	462b      	mov	r3, r5
 8008636:	b999      	cbnz	r1, 8008660 <scalbn+0x38>
 8008638:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800863c:	4323      	orrs	r3, r4
 800863e:	d03f      	beq.n	80086c0 <scalbn+0x98>
 8008640:	4b35      	ldr	r3, [pc, #212]	; (8008718 <scalbn+0xf0>)
 8008642:	4629      	mov	r1, r5
 8008644:	ee10 0a10 	vmov	r0, s0
 8008648:	2200      	movs	r2, #0
 800864a:	f7f7 ff79 	bl	8000540 <__aeabi_dmul>
 800864e:	4b33      	ldr	r3, [pc, #204]	; (800871c <scalbn+0xf4>)
 8008650:	429e      	cmp	r6, r3
 8008652:	4604      	mov	r4, r0
 8008654:	460d      	mov	r5, r1
 8008656:	da10      	bge.n	800867a <scalbn+0x52>
 8008658:	a327      	add	r3, pc, #156	; (adr r3, 80086f8 <scalbn+0xd0>)
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	e01f      	b.n	80086a0 <scalbn+0x78>
 8008660:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008664:	4291      	cmp	r1, r2
 8008666:	d10c      	bne.n	8008682 <scalbn+0x5a>
 8008668:	ee10 2a10 	vmov	r2, s0
 800866c:	4620      	mov	r0, r4
 800866e:	4629      	mov	r1, r5
 8008670:	f7f7 fdb0 	bl	80001d4 <__adddf3>
 8008674:	4604      	mov	r4, r0
 8008676:	460d      	mov	r5, r1
 8008678:	e022      	b.n	80086c0 <scalbn+0x98>
 800867a:	460b      	mov	r3, r1
 800867c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008680:	3936      	subs	r1, #54	; 0x36
 8008682:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008686:	4296      	cmp	r6, r2
 8008688:	dd0d      	ble.n	80086a6 <scalbn+0x7e>
 800868a:	2d00      	cmp	r5, #0
 800868c:	a11c      	add	r1, pc, #112	; (adr r1, 8008700 <scalbn+0xd8>)
 800868e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008692:	da02      	bge.n	800869a <scalbn+0x72>
 8008694:	a11c      	add	r1, pc, #112	; (adr r1, 8008708 <scalbn+0xe0>)
 8008696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800869a:	a319      	add	r3, pc, #100	; (adr r3, 8008700 <scalbn+0xd8>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f7f7 ff4e 	bl	8000540 <__aeabi_dmul>
 80086a4:	e7e6      	b.n	8008674 <scalbn+0x4c>
 80086a6:	1872      	adds	r2, r6, r1
 80086a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80086ac:	428a      	cmp	r2, r1
 80086ae:	dcec      	bgt.n	800868a <scalbn+0x62>
 80086b0:	2a00      	cmp	r2, #0
 80086b2:	dd08      	ble.n	80086c6 <scalbn+0x9e>
 80086b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80086c0:	ec45 4b10 	vmov	d0, r4, r5
 80086c4:	bd70      	pop	{r4, r5, r6, pc}
 80086c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80086ca:	da08      	bge.n	80086de <scalbn+0xb6>
 80086cc:	2d00      	cmp	r5, #0
 80086ce:	a10a      	add	r1, pc, #40	; (adr r1, 80086f8 <scalbn+0xd0>)
 80086d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086d4:	dac0      	bge.n	8008658 <scalbn+0x30>
 80086d6:	a10e      	add	r1, pc, #56	; (adr r1, 8008710 <scalbn+0xe8>)
 80086d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086dc:	e7bc      	b.n	8008658 <scalbn+0x30>
 80086de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80086e2:	3236      	adds	r2, #54	; 0x36
 80086e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80086ec:	4620      	mov	r0, r4
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <scalbn+0xf8>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	e7d5      	b.n	80086a0 <scalbn+0x78>
 80086f4:	f3af 8000 	nop.w
 80086f8:	c2f8f359 	.word	0xc2f8f359
 80086fc:	01a56e1f 	.word	0x01a56e1f
 8008700:	8800759c 	.word	0x8800759c
 8008704:	7e37e43c 	.word	0x7e37e43c
 8008708:	8800759c 	.word	0x8800759c
 800870c:	fe37e43c 	.word	0xfe37e43c
 8008710:	c2f8f359 	.word	0xc2f8f359
 8008714:	81a56e1f 	.word	0x81a56e1f
 8008718:	43500000 	.word	0x43500000
 800871c:	ffff3cb0 	.word	0xffff3cb0
 8008720:	3c900000 	.word	0x3c900000
 8008724:	00000000 	.word	0x00000000

08008728 <floor>:
 8008728:	ec51 0b10 	vmov	r0, r1, d0
 800872c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008734:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008738:	2e13      	cmp	r6, #19
 800873a:	ee10 5a10 	vmov	r5, s0
 800873e:	ee10 8a10 	vmov	r8, s0
 8008742:	460c      	mov	r4, r1
 8008744:	dc31      	bgt.n	80087aa <floor+0x82>
 8008746:	2e00      	cmp	r6, #0
 8008748:	da14      	bge.n	8008774 <floor+0x4c>
 800874a:	a333      	add	r3, pc, #204	; (adr r3, 8008818 <floor+0xf0>)
 800874c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008750:	f7f7 fd40 	bl	80001d4 <__adddf3>
 8008754:	2200      	movs	r2, #0
 8008756:	2300      	movs	r3, #0
 8008758:	f7f8 f982 	bl	8000a60 <__aeabi_dcmpgt>
 800875c:	b138      	cbz	r0, 800876e <floor+0x46>
 800875e:	2c00      	cmp	r4, #0
 8008760:	da53      	bge.n	800880a <floor+0xe2>
 8008762:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008766:	4325      	orrs	r5, r4
 8008768:	d052      	beq.n	8008810 <floor+0xe8>
 800876a:	4c2d      	ldr	r4, [pc, #180]	; (8008820 <floor+0xf8>)
 800876c:	2500      	movs	r5, #0
 800876e:	4621      	mov	r1, r4
 8008770:	4628      	mov	r0, r5
 8008772:	e024      	b.n	80087be <floor+0x96>
 8008774:	4f2b      	ldr	r7, [pc, #172]	; (8008824 <floor+0xfc>)
 8008776:	4137      	asrs	r7, r6
 8008778:	ea01 0307 	and.w	r3, r1, r7
 800877c:	4303      	orrs	r3, r0
 800877e:	d01e      	beq.n	80087be <floor+0x96>
 8008780:	a325      	add	r3, pc, #148	; (adr r3, 8008818 <floor+0xf0>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	f7f7 fd25 	bl	80001d4 <__adddf3>
 800878a:	2200      	movs	r2, #0
 800878c:	2300      	movs	r3, #0
 800878e:	f7f8 f967 	bl	8000a60 <__aeabi_dcmpgt>
 8008792:	2800      	cmp	r0, #0
 8008794:	d0eb      	beq.n	800876e <floor+0x46>
 8008796:	2c00      	cmp	r4, #0
 8008798:	bfbe      	ittt	lt
 800879a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800879e:	4133      	asrlt	r3, r6
 80087a0:	18e4      	addlt	r4, r4, r3
 80087a2:	ea24 0407 	bic.w	r4, r4, r7
 80087a6:	2500      	movs	r5, #0
 80087a8:	e7e1      	b.n	800876e <floor+0x46>
 80087aa:	2e33      	cmp	r6, #51	; 0x33
 80087ac:	dd0b      	ble.n	80087c6 <floor+0x9e>
 80087ae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80087b2:	d104      	bne.n	80087be <floor+0x96>
 80087b4:	ee10 2a10 	vmov	r2, s0
 80087b8:	460b      	mov	r3, r1
 80087ba:	f7f7 fd0b 	bl	80001d4 <__adddf3>
 80087be:	ec41 0b10 	vmov	d0, r0, r1
 80087c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087c6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80087ca:	f04f 37ff 	mov.w	r7, #4294967295
 80087ce:	40df      	lsrs	r7, r3
 80087d0:	4238      	tst	r0, r7
 80087d2:	d0f4      	beq.n	80087be <floor+0x96>
 80087d4:	a310      	add	r3, pc, #64	; (adr r3, 8008818 <floor+0xf0>)
 80087d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087da:	f7f7 fcfb 	bl	80001d4 <__adddf3>
 80087de:	2200      	movs	r2, #0
 80087e0:	2300      	movs	r3, #0
 80087e2:	f7f8 f93d 	bl	8000a60 <__aeabi_dcmpgt>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d0c1      	beq.n	800876e <floor+0x46>
 80087ea:	2c00      	cmp	r4, #0
 80087ec:	da0a      	bge.n	8008804 <floor+0xdc>
 80087ee:	2e14      	cmp	r6, #20
 80087f0:	d101      	bne.n	80087f6 <floor+0xce>
 80087f2:	3401      	adds	r4, #1
 80087f4:	e006      	b.n	8008804 <floor+0xdc>
 80087f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80087fa:	2301      	movs	r3, #1
 80087fc:	40b3      	lsls	r3, r6
 80087fe:	441d      	add	r5, r3
 8008800:	45a8      	cmp	r8, r5
 8008802:	d8f6      	bhi.n	80087f2 <floor+0xca>
 8008804:	ea25 0507 	bic.w	r5, r5, r7
 8008808:	e7b1      	b.n	800876e <floor+0x46>
 800880a:	2500      	movs	r5, #0
 800880c:	462c      	mov	r4, r5
 800880e:	e7ae      	b.n	800876e <floor+0x46>
 8008810:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008814:	e7ab      	b.n	800876e <floor+0x46>
 8008816:	bf00      	nop
 8008818:	8800759c 	.word	0x8800759c
 800881c:	7e37e43c 	.word	0x7e37e43c
 8008820:	bff00000 	.word	0xbff00000
 8008824:	000fffff 	.word	0x000fffff

08008828 <_init>:
 8008828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882a:	bf00      	nop
 800882c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800882e:	bc08      	pop	{r3}
 8008830:	469e      	mov	lr, r3
 8008832:	4770      	bx	lr

08008834 <_fini>:
 8008834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008836:	bf00      	nop
 8008838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800883a:	bc08      	pop	{r3}
 800883c:	469e      	mov	lr, r3
 800883e:	4770      	bx	lr
