
CAN_VESC_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002788  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002950  08002950  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002950  08002950  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002950  08002950  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002954  08002954  00012954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  08002964  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002964  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006dfa  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015ba  00000000  00000000  00026e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  00028438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000533  00000000  00000000  00028b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002521d  00000000  00000000  0002907b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000734f  00000000  00000000  0004e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e425b  00000000  00000000  000555e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b3c  00000000  00000000  00139844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028f8 	.word	0x080028f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080028f8 	.word	0x080028f8

080001c8 <HAL_GPIO_EXTI_Callback>:
uint32_t erpm2 = 0;
uint32_t Current2 = 0;
uint32_t Duty_Cycle2 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_BUTTON_Pin)
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d8:	d121      	bne.n	800021e <HAL_GPIO_EXTI_Callback+0x56>
//		  TxData2[0] = 0x00;
//		  TxData2[1] = 0x00;
//		  TxData2[2] = 0x03;
//		  TxData2[3] = 0xE8;

		int decimalNum1 = 7000;
 80001da:	f641 3358 	movw	r3, #7000	; 0x1b58
 80001de:	60fb      	str	r3, [r7, #12]
		int decimalNum2 = 1000;
 80001e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e4:	60bb      	str	r3, [r7, #8]

		intToCAN(TxData1, decimalNum1);
 80001e6:	68f9      	ldr	r1, [r7, #12]
 80001e8:	480f      	ldr	r0, [pc, #60]	; (8000228 <HAL_GPIO_EXTI_Callback+0x60>)
 80001ea:	f000 f925 	bl	8000438 <intToCAN>
		intToCAN(TxData2, decimalNum2);
 80001ee:	68b9      	ldr	r1, [r7, #8]
 80001f0:	480e      	ldr	r0, [pc, #56]	; (800022c <HAL_GPIO_EXTI_Callback+0x64>)
 80001f2:	f000 f921 	bl	8000438 <intToCAN>

		TxHeader.ExtId = 0x30A;
 80001f6:	4b0e      	ldr	r3, [pc, #56]	; (8000230 <HAL_GPIO_EXTI_Callback+0x68>)
 80001f8:	f240 320a 	movw	r2, #778	; 0x30a
 80001fc:	605a      	str	r2, [r3, #4]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData1, &TxMailbox);
 80001fe:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000200:	4a09      	ldr	r2, [pc, #36]	; (8000228 <HAL_GPIO_EXTI_Callback+0x60>)
 8000202:	490b      	ldr	r1, [pc, #44]	; (8000230 <HAL_GPIO_EXTI_Callback+0x68>)
 8000204:	480c      	ldr	r0, [pc, #48]	; (8000238 <HAL_GPIO_EXTI_Callback+0x70>)
 8000206:	f000 fdd2 	bl	8000dae <HAL_CAN_AddTxMessage>
		TxHeader.ExtId = 0x365;  // ID
 800020a:	4b09      	ldr	r3, [pc, #36]	; (8000230 <HAL_GPIO_EXTI_Callback+0x68>)
 800020c:	f240 3265 	movw	r2, #869	; 0x365
 8000210:	605a      	str	r2, [r3, #4]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData2, &TxMailbox);
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000214:	4a05      	ldr	r2, [pc, #20]	; (800022c <HAL_GPIO_EXTI_Callback+0x64>)
 8000216:	4906      	ldr	r1, [pc, #24]	; (8000230 <HAL_GPIO_EXTI_Callback+0x68>)
 8000218:	4807      	ldr	r0, [pc, #28]	; (8000238 <HAL_GPIO_EXTI_Callback+0x70>)
 800021a:	f000 fdc8 	bl	8000dae <HAL_CAN_AddTxMessage>
	}
}
 800021e:	bf00      	nop
 8000220:	3710      	adds	r7, #16
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000084 	.word	0x20000084
 800022c:	20000094 	.word	0x20000094
 8000230:	20000050 	.word	0x20000050
 8000234:	2000009c 	.word	0x2000009c
 8000238:	20000028 	.word	0x20000028

0800023c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader1, RxData1) != HAL_OK)
 8000244:	4b71      	ldr	r3, [pc, #452]	; (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000246:	4a72      	ldr	r2, [pc, #456]	; (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000248:	2100      	movs	r1, #0
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f000 fe7f 	bl	8000f4e <HAL_CAN_GetRxMessage>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d001      	beq.n	800025a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	  {
	    Error_Handler();
 8000256:	f000 fa37 	bl	80006c8 <Error_Handler>
	  }
	if ((RxHeader1.ExtId == 0x965)) // Id for Status update 1 from VESC
 800025a:	4b6d      	ldr	r3, [pc, #436]	; (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 800025c:	685b      	ldr	r3, [r3, #4]
 800025e:	f640 1265 	movw	r2, #2405	; 0x965
 8000262:	4293      	cmp	r3, r2
 8000264:	d163      	bne.n	800032e <HAL_CAN_RxFifo0MsgPendingCallback+0xf2>
	  {
		HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000266:	2120      	movs	r1, #32
 8000268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026c:	f001 fcba 	bl	8001be4 <HAL_GPIO_TogglePin>

		//rpm1 PART OF THE INTERRUPT
		//We recieve the erpm1 from the VESC, divided by 7 with our motor to get the rpm1
		erpm1 = 0;
 8000270:	4b68      	ldr	r3, [pc, #416]	; (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
		rpm1 = 0;
 8000276:	4b68      	ldr	r3, [pc, #416]	; (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
	    for (int i=0; i<=3; i++) {
 800027c:	2300      	movs	r3, #0
 800027e:	61fb      	str	r3, [r7, #28]
 8000280:	e011      	b.n	80002a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a>
	    	erpm1 <<=8;  // shift by a complete byte, equal to num *= 256
 8000282:	4b64      	ldr	r3, [pc, #400]	; (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	021b      	lsls	r3, r3, #8
 8000288:	4a62      	ldr	r2, [pc, #392]	; (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 800028a:	6013      	str	r3, [r2, #0]
	    	erpm1 |= RxData1[i];  // write the respective byte
 800028c:	4a5f      	ldr	r2, [pc, #380]	; (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	4413      	add	r3, r2
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	461a      	mov	r2, r3
 8000296:	4b5f      	ldr	r3, [pc, #380]	; (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4313      	orrs	r3, r2
 800029c:	4a5d      	ldr	r2, [pc, #372]	; (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 800029e:	6013      	str	r3, [r2, #0]
	    for (int i=0; i<=3; i++) {
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	3301      	adds	r3, #1
 80002a4:	61fb      	str	r3, [r7, #28]
 80002a6:	69fb      	ldr	r3, [r7, #28]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	ddea      	ble.n	8000282 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
	    }
	    rpm1 = erpm1/7;
 80002ac:	4b59      	ldr	r3, [pc, #356]	; (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b5a      	ldr	r3, [pc, #360]	; (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 80002b2:	fba3 1302 	umull	r1, r3, r3, r2
 80002b6:	1ad2      	subs	r2, r2, r3
 80002b8:	0852      	lsrs	r2, r2, #1
 80002ba:	4413      	add	r3, r2
 80002bc:	089b      	lsrs	r3, r3, #2
 80002be:	4a56      	ldr	r2, [pc, #344]	; (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 80002c0:	6013      	str	r3, [r2, #0]

	    //Current11 PART OF THE INTERRUPT'
	    // Current1 is the Current1 of the entire VESC, multiplied with 10
		Current1 = 0;
 80002c2:	4b57      	ldr	r3, [pc, #348]	; (8000420 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
	    for (int i=4; i<=5; i++) {
 80002c8:	2304      	movs	r3, #4
 80002ca:	61bb      	str	r3, [r7, #24]
 80002cc:	e011      	b.n	80002f2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb6>
	    	Current1 <<=8;  // shift by a complete byte, equal to num *= 256
 80002ce:	4b54      	ldr	r3, [pc, #336]	; (8000420 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	021b      	lsls	r3, r3, #8
 80002d4:	4a52      	ldr	r2, [pc, #328]	; (8000420 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80002d6:	6013      	str	r3, [r2, #0]
	    	Current1 |= RxData1[i];  // write the respective byte
 80002d8:	4a4c      	ldr	r2, [pc, #304]	; (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80002da:	69bb      	ldr	r3, [r7, #24]
 80002dc:	4413      	add	r3, r2
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	461a      	mov	r2, r3
 80002e2:	4b4f      	ldr	r3, [pc, #316]	; (8000420 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	4a4d      	ldr	r2, [pc, #308]	; (8000420 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80002ea:	6013      	str	r3, [r2, #0]
	    for (int i=4; i<=5; i++) {
 80002ec:	69bb      	ldr	r3, [r7, #24]
 80002ee:	3301      	adds	r3, #1
 80002f0:	61bb      	str	r3, [r7, #24]
 80002f2:	69bb      	ldr	r3, [r7, #24]
 80002f4:	2b05      	cmp	r3, #5
 80002f6:	ddea      	ble.n	80002ce <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
	    }

	    //DUTY CYCLE PART OF THE INTERRUPT
	    // The Duty cycle is multiplied with 1000
	    Duty_Cycle1 = 0;
 80002f8:	4b4a      	ldr	r3, [pc, #296]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
	    for (int i=6; i<=7; i++) {
 80002fe:	2306      	movs	r3, #6
 8000300:	617b      	str	r3, [r7, #20]
 8000302:	e011      	b.n	8000328 <HAL_CAN_RxFifo0MsgPendingCallback+0xec>
	    	Duty_Cycle1 <<=8;  // shift by a complete byte, equal to num *= 256
 8000304:	4b47      	ldr	r3, [pc, #284]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	021b      	lsls	r3, r3, #8
 800030a:	4a46      	ldr	r2, [pc, #280]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800030c:	6013      	str	r3, [r2, #0]
	    	Duty_Cycle1 |= RxData1[i];  // write the respective byte
 800030e:	4a3f      	ldr	r2, [pc, #252]	; (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	4413      	add	r3, r2
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	4b42      	ldr	r3, [pc, #264]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4313      	orrs	r3, r2
 800031e:	4a41      	ldr	r2, [pc, #260]	; (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000320:	6013      	str	r3, [r2, #0]
	    for (int i=6; i<=7; i++) {
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	3301      	adds	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	2b07      	cmp	r3, #7
 800032c:	ddea      	ble.n	8000304 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
	    }
	  }
	if ((RxHeader1.ExtId == 0x90A)) // Id for Status update 1 from VESC
 800032e:	4b38      	ldr	r3, [pc, #224]	; (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	f640 120a 	movw	r2, #2314	; 0x90a
 8000336:	4293      	cmp	r3, r2
 8000338:	d163      	bne.n	8000402 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c6>
		  {
			HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 800033a:	2120      	movs	r1, #32
 800033c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000340:	f001 fc50 	bl	8001be4 <HAL_GPIO_TogglePin>

			//rpm1 PART OF THE INTERRUPT
			//We recieve the erpm1 from the VESC, divided by 7 with our motor to get the rpm1
			erpm2 = 0;
 8000344:	4b38      	ldr	r3, [pc, #224]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
			rpm2 = 0;
 800034a:	4b38      	ldr	r3, [pc, #224]	; (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
		    for (int i=0; i<=3; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	e011      	b.n	800037a <HAL_CAN_RxFifo0MsgPendingCallback+0x13e>
		    	erpm2 <<=8;  // shift by a complete byte, equal to num *= 256
 8000356:	4b34      	ldr	r3, [pc, #208]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	021b      	lsls	r3, r3, #8
 800035c:	4a32      	ldr	r2, [pc, #200]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800035e:	6013      	str	r3, [r2, #0]
		    	erpm2 |= RxData1[i];  // write the respective byte
 8000360:	4a2a      	ldr	r2, [pc, #168]	; (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000362:	693b      	ldr	r3, [r7, #16]
 8000364:	4413      	add	r3, r2
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	461a      	mov	r2, r3
 800036a:	4b2f      	ldr	r3, [pc, #188]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4313      	orrs	r3, r2
 8000370:	4a2d      	ldr	r2, [pc, #180]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000372:	6013      	str	r3, [r2, #0]
		    for (int i=0; i<=3; i++) {
 8000374:	693b      	ldr	r3, [r7, #16]
 8000376:	3301      	adds	r3, #1
 8000378:	613b      	str	r3, [r7, #16]
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	2b03      	cmp	r3, #3
 800037e:	ddea      	ble.n	8000356 <HAL_CAN_RxFifo0MsgPendingCallback+0x11a>
		    }
		    rpm2 = erpm2/7;
 8000380:	4b29      	ldr	r3, [pc, #164]	; (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	4b25      	ldr	r3, [pc, #148]	; (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000386:	fba3 1302 	umull	r1, r3, r3, r2
 800038a:	1ad2      	subs	r2, r2, r3
 800038c:	0852      	lsrs	r2, r2, #1
 800038e:	4413      	add	r3, r2
 8000390:	089b      	lsrs	r3, r3, #2
 8000392:	4a26      	ldr	r2, [pc, #152]	; (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000394:	6013      	str	r3, [r2, #0]

		    //Current11 PART OF THE INTERRUPT'
		    // Current1 is the Current1 of the entire VESC, multiplied with 10
			Current2 = 0;
 8000396:	4b26      	ldr	r3, [pc, #152]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
		    for (int i=4; i<=5; i++) {
 800039c:	2304      	movs	r3, #4
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	e011      	b.n	80003c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x18a>
		    	Current2 <<=8;  // shift by a complete byte, equal to num *= 256
 80003a2:	4b23      	ldr	r3, [pc, #140]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	021b      	lsls	r3, r3, #8
 80003a8:	4a21      	ldr	r2, [pc, #132]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80003aa:	6013      	str	r3, [r2, #0]
		    	Current2 |= RxData1[i];  // write the respective byte
 80003ac:	4a17      	ldr	r2, [pc, #92]	; (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	461a      	mov	r2, r3
 80003b6:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4313      	orrs	r3, r2
 80003bc:	4a1c      	ldr	r2, [pc, #112]	; (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80003be:	6013      	str	r3, [r2, #0]
		    for (int i=4; i<=5; i++) {
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	3301      	adds	r3, #1
 80003c4:	60fb      	str	r3, [r7, #12]
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	2b05      	cmp	r3, #5
 80003ca:	ddea      	ble.n	80003a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
		    }

		    //DUTY CYCLE PART OF THE INTERRUPT
		    // The Duty cycle is multiplied with 1000
		    Duty_Cycle2 = 0;
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
		    for (int i=6; i<=7; i++) {
 80003d2:	2306      	movs	r3, #6
 80003d4:	60bb      	str	r3, [r7, #8]
 80003d6:	e011      	b.n	80003fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>
		    	Duty_Cycle2 <<=8;  // shift by a complete byte, equal to num *= 256
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	021b      	lsls	r3, r3, #8
 80003de:	4a15      	ldr	r2, [pc, #84]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80003e0:	6013      	str	r3, [r2, #0]
		    	Duty_Cycle2 |= RxData1[i];  // write the respective byte
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	4413      	add	r3, r2
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	461a      	mov	r2, r3
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	4a10      	ldr	r2, [pc, #64]	; (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80003f4:	6013      	str	r3, [r2, #0]
		    for (int i=6; i<=7; i++) {
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	3301      	adds	r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	2b07      	cmp	r3, #7
 8000400:	ddea      	ble.n	80003d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>
		    }
		  }
}
 8000402:	bf00      	nop
 8000404:	3720      	adds	r7, #32
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	2000008c 	.word	0x2000008c
 8000410:	20000068 	.word	0x20000068
 8000414:	200000a4 	.word	0x200000a4
 8000418:	200000a0 	.word	0x200000a0
 800041c:	24924925 	.word	0x24924925
 8000420:	200000a8 	.word	0x200000a8
 8000424:	200000ac 	.word	0x200000ac
 8000428:	200000b4 	.word	0x200000b4
 800042c:	200000b0 	.word	0x200000b0
 8000430:	200000b8 	.word	0x200000b8
 8000434:	200000bc 	.word	0x200000bc

08000438 <intToCAN>:
 *
 * Input:
 * - TxData: 	Writing a int to the TxData buffer to send via CAN.
 * - value:		The value being sent via CAN.
 */
void intToCAN(uint8_t *TxData, int value) {
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]

    int temp;

    for (int i = 0; i < 4; i++) {
 8000442:	2300      	movs	r3, #0
 8000444:	60fb      	str	r3, [r7, #12]
 8000446:	e017      	b.n	8000478 <intToCAN+0x40>
        temp = value % 256;
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	425a      	negs	r2, r3
 800044c:	b2db      	uxtb	r3, r3
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	bf58      	it	pl
 8000452:	4253      	negpl	r3, r2
 8000454:	60bb      	str	r3, [r7, #8]
        *(TxData + 3 - i) = temp;
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	f1c3 0303 	rsb	r3, r3, #3
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	4413      	add	r3, r2
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	b2d2      	uxtb	r2, r2
 8000464:	701a      	strb	r2, [r3, #0]
        value /= 256;
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	da00      	bge.n	800046e <intToCAN+0x36>
 800046c:	33ff      	adds	r3, #255	; 0xff
 800046e:	121b      	asrs	r3, r3, #8
 8000470:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 4; i++) {
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3301      	adds	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b03      	cmp	r3, #3
 800047c:	dde4      	ble.n	8000448 <intToCAN+0x10>
    }

}
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fa08 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f81e 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f8c0 	bl	800061c <MX_GPIO_Init>
  MX_CAN1_Init();
 800049c:	f000 f86c 	bl	8000578 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 80004a0:	480a      	ldr	r0, [pc, #40]	; (80004cc <main+0x40>)
 80004a2:	f000 fc40 	bl	8000d26 <HAL_CAN_Start>

  // Activate the notification
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004a6:	2102      	movs	r1, #2
 80004a8:	4808      	ldr	r0, [pc, #32]	; (80004cc <main+0x40>)
 80004aa:	f000 fe72 	bl	8001192 <HAL_CAN_ActivateNotification>


  TxHeader.DLC = 4;  // data length
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <main+0x44>)
 80004b0:	2204      	movs	r2, #4
 80004b2:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_EXT;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <main+0x44>)
 80004b6:	2204      	movs	r2, #4
 80004b8:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <main+0x44>)
 80004bc:	2200      	movs	r2, #0
 80004be:	60da      	str	r2, [r3, #12]
  TxHeader.ExtId = 0x30A;  // ID
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <main+0x44>)
 80004c2:	f240 320a 	movw	r2, #778	; 0x30a
 80004c6:	605a      	str	r2, [r3, #4]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <main+0x3c>
 80004ca:	bf00      	nop
 80004cc:	20000028 	.word	0x20000028
 80004d0:	20000050 	.word	0x20000050

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b096      	sub	sp, #88	; 0x58
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0314 	add.w	r3, r7, #20
 80004de:	2244      	movs	r2, #68	; 0x44
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 f9dc 	bl	80028a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	463b      	mov	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004fa:	f001 fbb3 	bl	8001c64 <HAL_PWREx_ControlVoltageScaling>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000504:	f000 f8e0 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000508:	2302      	movs	r3, #2
 800050a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800050c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000510:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000512:	2310      	movs	r3, #16
 8000514:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051a:	2302      	movs	r3, #2
 800051c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000522:	230a      	movs	r3, #10
 8000524:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000526:	2307      	movs	r3, #7
 8000528:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800052a:	2302      	movs	r3, #2
 800052c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800052e:	2302      	movs	r3, #2
 8000530:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4618      	mov	r0, r3
 8000538:	f001 fbea 	bl	8001d10 <HAL_RCC_OscConfig>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000542:	f000 f8c1 	bl	80006c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000546:	230f      	movs	r3, #15
 8000548:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054a:	2303      	movs	r3, #3
 800054c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	2104      	movs	r1, #4
 800055e:	4618      	mov	r0, r3
 8000560:	f001 ffb2 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800056a:	f000 f8ad 	bl	80006c8 <Error_Handler>
  }
}
 800056e:	bf00      	nop
 8000570:	3758      	adds	r7, #88	; 0x58
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800057e:	4b25      	ldr	r3, [pc, #148]	; (8000614 <MX_CAN1_Init+0x9c>)
 8000580:	4a25      	ldr	r2, [pc, #148]	; (8000618 <MX_CAN1_Init+0xa0>)
 8000582:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000584:	4b23      	ldr	r3, [pc, #140]	; (8000614 <MX_CAN1_Init+0x9c>)
 8000586:	2210      	movs	r2, #16
 8000588:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800058a:	4b22      	ldr	r3, [pc, #136]	; (8000614 <MX_CAN1_Init+0x9c>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000590:	4b20      	ldr	r3, [pc, #128]	; (8000614 <MX_CAN1_Init+0x9c>)
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <MX_CAN1_Init+0x9c>)
 8000598:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800059c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800059e:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <MX_CAN1_Init+0x9c>)
 80005a0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80005a4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005a6:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <MX_CAN1_Init+0x9c>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <MX_CAN1_Init+0x9c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005b2:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_CAN1_Init+0x9c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_CAN1_Init+0x9c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <MX_CAN1_Init+0x9c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <MX_CAN1_Init+0x9c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ca:	4812      	ldr	r0, [pc, #72]	; (8000614 <MX_CAN1_Init+0x9c>)
 80005cc:	f000 f9e6 	bl	800099c <HAL_CAN_Init>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80005d6:	f000 f877 	bl	80006c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80005da:	2301      	movs	r3, #1
 80005dc:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;  // which filter bank to use from the assigned ones
 80005de:	230a      	movs	r3, #10
 80005e0:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 13;  // how many filters to assign to the CAN1 (master can)
 80005fe:	230d      	movs	r3, #13
 8000600:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <MX_CAN1_Init+0x9c>)
 8000608:	f000 fac3 	bl	8000b92 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000028 	.word	0x20000028
 8000618:	40006400 	.word	0x40006400

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 030c 	add.w	r3, r7, #12
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <MX_GPIO_Init+0xa4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000636:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <MX_GPIO_Init+0xa4>)
 8000638:	f043 0304 	orr.w	r3, r3, #4
 800063c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <MX_GPIO_Init+0xa4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000642:	f003 0304 	and.w	r3, r3, #4
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_GPIO_Init+0xa4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <MX_GPIO_Init+0xa4>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_GPIO_Init+0xa4>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f001 faa3 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800066e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000674:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	4619      	mov	r1, r3
 8000684:	480f      	ldr	r0, [pc, #60]	; (80006c4 <MX_GPIO_Init+0xa8>)
 8000686:	f001 f8eb 	bl	8001860 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800068a:	2320      	movs	r3, #32
 800068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a4:	f001 f8dc 	bl	8001860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	2028      	movs	r0, #40	; 0x28
 80006ae:	f001 f8a0 	bl	80017f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b2:	2028      	movs	r0, #40	; 0x28
 80006b4:	f001 f8b9 	bl	800182a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000800 	.word	0x48000800

080006c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006cc:	b672      	cpsid	i
}
 80006ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <Error_Handler+0x8>
	...

080006d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x44>)
 80006dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x44>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6613      	str	r3, [r2, #96]	; 0x60
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x44>)
 80006e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <HAL_MspInit+0x44>)
 80006f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006f6:	4a08      	ldr	r2, [pc, #32]	; (8000718 <HAL_MspInit+0x44>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6593      	str	r3, [r2, #88]	; 0x58
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <HAL_MspInit+0x44>)
 8000700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40021000 	.word	0x40021000

0800071c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <HAL_CAN_MspInit+0x90>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d131      	bne.n	80007a2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <HAL_CAN_MspInit+0x94>)
 8000740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000742:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <HAL_CAN_MspInit+0x94>)
 8000744:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000748:	6593      	str	r3, [r2, #88]	; 0x58
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <HAL_CAN_MspInit+0x94>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <HAL_CAN_MspInit+0x94>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <HAL_CAN_MspInit+0x94>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <HAL_CAN_MspInit+0x94>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800076e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000780:	2309      	movs	r3, #9
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f001 f867 	bl	8001860 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2014      	movs	r0, #20
 8000798:	f001 f82b 	bl	80017f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800079c:	2014      	movs	r0, #20
 800079e:	f001 f844 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80007a2:	bf00      	nop
 80007a4:	3728      	adds	r7, #40	; 0x28
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40006400 	.word	0x40006400
 80007b0:	40021000 	.word	0x40021000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000800:	f000 f8ac 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800080c:	4802      	ldr	r0, [pc, #8]	; (8000818 <CAN1_RX0_IRQHandler+0x10>)
 800080e:	f000 fce6 	bl	80011de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000028 	.word	0x20000028

0800081c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000820:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000824:	f001 f9f8 	bl	8001c18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SystemInit+0x20>)
 8000832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <SystemInit+0x20>)
 8000838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800083c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000854:	f7ff ffea 	bl	800082c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000858:	480c      	ldr	r0, [pc, #48]	; (800088c <LoopForever+0x6>)
  ldr r1, =_edata
 800085a:	490d      	ldr	r1, [pc, #52]	; (8000890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <LoopForever+0xe>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000860:	e002      	b.n	8000868 <LoopCopyDataInit>

08000862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000866:	3304      	adds	r3, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800086c:	d3f9      	bcc.n	8000862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000870:	4c0a      	ldr	r4, [pc, #40]	; (800089c <LoopForever+0x16>)
  movs r3, #0
 8000872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000874:	e001      	b.n	800087a <LoopFillZerobss>

08000876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000878:	3204      	adds	r2, #4

0800087a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800087c:	d3fb      	bcc.n	8000876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087e:	f002 f817 	bl	80028b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000882:	f7ff fe03 	bl	800048c <main>

08000886 <LoopForever>:

LoopForever:
    b LoopForever
 8000886:	e7fe      	b.n	8000886 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000888:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000894:	08002958 	.word	0x08002958
  ldr r2, =_sbss
 8000898:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800089c:	200000c4 	.word	0x200000c4

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_Init+0x3c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <HAL_Init+0x3c>)
 80008b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ba:	2003      	movs	r0, #3
 80008bc:	f000 ff8e 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 f80f 	bl	80008e4 <HAL_InitTick>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80008cc:	2301      	movs	r3, #1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	e001      	b.n	80008d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008d2:	f7ff feff 	bl	80006d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <HAL_InitTick+0x6c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d023      	beq.n	8000940 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <HAL_InitTick+0x70>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <HAL_InitTick+0x6c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	fbb3 f3f1 	udiv	r3, r3, r1
 800090a:	fbb2 f3f3 	udiv	r3, r2, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f000 ff99 	bl	8001846 <HAL_SYSTICK_Config>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d10f      	bne.n	800093a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b0f      	cmp	r3, #15
 800091e:	d809      	bhi.n	8000934 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000920:	2200      	movs	r2, #0
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f000 ff63 	bl	80017f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_InitTick+0x74>)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	e007      	b.n	8000944 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e004      	b.n	8000944 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800093a:	2301      	movs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e001      	b.n	8000944 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000940:	2301      	movs	r3, #1
 8000942:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000008 	.word	0x20000008
 8000954:	20000000 	.word	0x20000000
 8000958:	20000004 	.word	0x20000004

0800095c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x20>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_IncTick+0x24>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4413      	add	r3, r2
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_IncTick+0x24>)
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000008 	.word	0x20000008
 8000980:	200000c0 	.word	0x200000c0

08000984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <HAL_GetTick+0x14>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	200000c0 	.word	0x200000c0

0800099c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d101      	bne.n	80009ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e0ed      	b.n	8000b8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d102      	bne.n	80009c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f7ff feae 	bl	800071c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f042 0201 	orr.w	r2, r2, #1
 80009ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009d0:	f7ff ffd8 	bl	8000984 <HAL_GetTick>
 80009d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009d6:	e012      	b.n	80009fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d8:	f7ff ffd4 	bl	8000984 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b0a      	cmp	r3, #10
 80009e4:	d90b      	bls.n	80009fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2205      	movs	r2, #5
 80009f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e0c5      	b.n	8000b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0e5      	beq.n	80009d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f022 0202 	bic.w	r2, r2, #2
 8000a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a1c:	f7ff ffb2 	bl	8000984 <HAL_GetTick>
 8000a20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a22:	e012      	b.n	8000a4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a24:	f7ff ffae 	bl	8000984 <HAL_GetTick>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	2b0a      	cmp	r3, #10
 8000a30:	d90b      	bls.n	8000a4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2205      	movs	r2, #5
 8000a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e09f      	b.n	8000b8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f003 0302 	and.w	r3, r3, #2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1e5      	bne.n	8000a24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7e1b      	ldrb	r3, [r3, #24]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d108      	bne.n	8000a72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e007      	b.n	8000a82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7e5b      	ldrb	r3, [r3, #25]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d108      	bne.n	8000a9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	7e9b      	ldrb	r3, [r3, #26]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d108      	bne.n	8000ac6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f042 0220 	orr.w	r2, r2, #32
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	e007      	b.n	8000ad6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f022 0220 	bic.w	r2, r2, #32
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7edb      	ldrb	r3, [r3, #27]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d108      	bne.n	8000af0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f022 0210 	bic.w	r2, r2, #16
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e007      	b.n	8000b00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f042 0210 	orr.w	r2, r2, #16
 8000afe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7f1b      	ldrb	r3, [r3, #28]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d108      	bne.n	8000b1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f042 0208 	orr.w	r2, r2, #8
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	e007      	b.n	8000b2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 0208 	bic.w	r2, r2, #8
 8000b28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	7f5b      	ldrb	r3, [r3, #29]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d108      	bne.n	8000b44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f042 0204 	orr.w	r2, r2, #4
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	e007      	b.n	8000b54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0204 	bic.w	r2, r2, #4
 8000b52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	431a      	orrs	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	691b      	ldr	r3, [r3, #16]
 8000b62:	431a      	orrs	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	695b      	ldr	r3, [r3, #20]
 8000b68:	ea42 0103 	orr.w	r1, r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b087      	sub	sp, #28
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ba8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000baa:	7cfb      	ldrb	r3, [r7, #19]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d003      	beq.n	8000bb8 <HAL_CAN_ConfigFilter+0x26>
 8000bb0:	7cfb      	ldrb	r3, [r7, #19]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	f040 80aa 	bne.w	8000d0c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000bbe:	f043 0201 	orr.w	r2, r3, #1
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f003 031f 	and.w	r3, r3, #31
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d123      	bne.n	8000c3a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000c14:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3248      	adds	r2, #72	; 0x48
 8000c1a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c2e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c30:	6979      	ldr	r1, [r7, #20]
 8000c32:	3348      	adds	r3, #72	; 0x48
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	440b      	add	r3, r1
 8000c38:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d122      	bne.n	8000c88 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	431a      	orrs	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c62:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3248      	adds	r2, #72	; 0x48
 8000c68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c7c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c7e:	6979      	ldr	r1, [r7, #20]
 8000c80:	3348      	adds	r3, #72	; 0x48
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d109      	bne.n	8000ca4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000ca2:	e007      	b.n	8000cb4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	431a      	orrs	r2, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d109      	bne.n	8000cd0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000cce:	e007      	b.n	8000ce0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	431a      	orrs	r2, r3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d107      	bne.n	8000cf8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cfe:	f023 0201 	bic.w	r2, r3, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e006      	b.n	8000d1a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
  }
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	371c      	adds	r7, #28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b084      	sub	sp, #16
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d12e      	bne.n	8000d98 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0201 	bic.w	r2, r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d52:	f7ff fe17 	bl	8000984 <HAL_GetTick>
 8000d56:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d58:	e012      	b.n	8000d80 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d5a:	f7ff fe13 	bl	8000984 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b0a      	cmp	r3, #10
 8000d66:	d90b      	bls.n	8000d80 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2205      	movs	r2, #5
 8000d78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e012      	b.n	8000da6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1e5      	bne.n	8000d5a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e006      	b.n	8000da6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
  }
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b089      	sub	sp, #36	; 0x24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dcc:	7ffb      	ldrb	r3, [r7, #31]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d003      	beq.n	8000dda <HAL_CAN_AddTxMessage+0x2c>
 8000dd2:	7ffb      	ldrb	r3, [r7, #31]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	f040 80ad 	bne.w	8000f34 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d10a      	bne.n	8000dfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d105      	bne.n	8000dfa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 8095 	beq.w	8000f24 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	0e1b      	lsrs	r3, r3, #24
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e04:	2201      	movs	r2, #1
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10d      	bne.n	8000e32 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	6809      	ldr	r1, [r1, #0]
 8000e24:	431a      	orrs	r2, r3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3318      	adds	r3, #24
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	440b      	add	r3, r1
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e00f      	b.n	8000e52 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e3c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e42:	68f9      	ldr	r1, [r7, #12]
 8000e44:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e46:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	3318      	adds	r3, #24
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	440b      	add	r3, r1
 8000e50:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6819      	ldr	r1, [r3, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	691a      	ldr	r2, [r3, #16]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3318      	adds	r3, #24
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	440b      	add	r3, r1
 8000e62:	3304      	adds	r3, #4
 8000e64:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	7d1b      	ldrb	r3, [r3, #20]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d111      	bne.n	8000e92 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3318      	adds	r3, #24
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	4413      	add	r3, r2
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	6811      	ldr	r1, [r2, #0]
 8000e82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3318      	adds	r3, #24
 8000e8a:	011b      	lsls	r3, r3, #4
 8000e8c:	440b      	add	r3, r1
 8000e8e:	3304      	adds	r3, #4
 8000e90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3307      	adds	r3, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	061a      	lsls	r2, r3, #24
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3306      	adds	r3, #6
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	041b      	lsls	r3, r3, #16
 8000ea2:	431a      	orrs	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3305      	adds	r3, #5
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	4313      	orrs	r3, r2
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	3204      	adds	r2, #4
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	6811      	ldr	r1, [r2, #0]
 8000eba:	ea43 0200 	orr.w	r2, r3, r0
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	011b      	lsls	r3, r3, #4
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000ec8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	3303      	adds	r3, #3
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	061a      	lsls	r2, r3, #24
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	041b      	lsls	r3, r3, #16
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	4610      	mov	r0, r2
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	6811      	ldr	r1, [r2, #0]
 8000ef0:	ea43 0200 	orr.w	r2, r3, r0
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	440b      	add	r3, r1
 8000efa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000efe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3318      	adds	r3, #24
 8000f08:	011b      	lsls	r3, r3, #4
 8000f0a:	4413      	add	r3, r2
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	6811      	ldr	r1, [r2, #0]
 8000f12:	f043 0201 	orr.w	r2, r3, #1
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3318      	adds	r3, #24
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	440b      	add	r3, r1
 8000f1e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e00e      	b.n	8000f42 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e006      	b.n	8000f42 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
  }
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b087      	sub	sp, #28
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	60f8      	str	r0, [r7, #12]
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f62:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d003      	beq.n	8000f72 <HAL_CAN_GetRxMessage+0x24>
 8000f6a:	7dfb      	ldrb	r3, [r7, #23]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	f040 8103 	bne.w	8001178 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d10e      	bne.n	8000f96 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d116      	bne.n	8000fb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e0f7      	b.n	8001186 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	691b      	ldr	r3, [r3, #16]
 8000f9c:	f003 0303 	and.w	r3, r3, #3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d107      	bne.n	8000fb4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e0e8      	b.n	8001186 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	331b      	adds	r3, #27
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	4413      	add	r3, r2
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0204 	and.w	r2, r3, #4
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10c      	bne.n	8000fec <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	331b      	adds	r3, #27
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	4413      	add	r3, r2
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0d5b      	lsrs	r3, r3, #21
 8000fe2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	e00b      	b.n	8001004 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	331b      	adds	r3, #27
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	4413      	add	r3, r2
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	08db      	lsrs	r3, r3, #3
 8000ffc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	331b      	adds	r3, #27
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	4413      	add	r3, r2
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0202 	and.w	r2, r3, #2
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	331b      	adds	r3, #27
 8001022:	011b      	lsls	r3, r3, #4
 8001024:	4413      	add	r3, r2
 8001026:	3304      	adds	r3, #4
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2208      	movs	r2, #8
 8001036:	611a      	str	r2, [r3, #16]
 8001038:	e00b      	b.n	8001052 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	331b      	adds	r3, #27
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4413      	add	r3, r2
 8001046:	3304      	adds	r3, #4
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 020f 	and.w	r2, r3, #15
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	331b      	adds	r3, #27
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4413      	add	r3, r2
 800105e:	3304      	adds	r3, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0a1b      	lsrs	r3, r3, #8
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	331b      	adds	r3, #27
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	3304      	adds	r3, #4
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	0c1b      	lsrs	r3, r3, #16
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	011b      	lsls	r3, r3, #4
 800108a:	4413      	add	r3, r2
 800108c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4413      	add	r3, r2
 80010a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	0a1a      	lsrs	r2, r3, #8
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	4413      	add	r3, r2
 80010bc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	0c1a      	lsrs	r2, r3, #16
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3302      	adds	r3, #2
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	4413      	add	r3, r2
 80010d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0e1a      	lsrs	r2, r3, #24
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	3303      	adds	r3, #3
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	011b      	lsls	r3, r3, #4
 80010ee:	4413      	add	r3, r2
 80010f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	3304      	adds	r3, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	4413      	add	r3, r2
 8001108:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0a1a      	lsrs	r2, r3, #8
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	3305      	adds	r3, #5
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	4413      	add	r3, r2
 8001122:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0c1a      	lsrs	r2, r3, #16
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	3306      	adds	r3, #6
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	4413      	add	r3, r2
 800113c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	0e1a      	lsrs	r2, r3, #24
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	3307      	adds	r3, #7
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d108      	bne.n	8001164 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0220 	orr.w	r2, r2, #32
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	e007      	b.n	8001174 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0220 	orr.w	r2, r2, #32
 8001172:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	e006      	b.n	8001186 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001184:	2301      	movs	r3, #1
  }
}
 8001186:	4618      	mov	r0, r3
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011a2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d002      	beq.n	80011b0 <HAL_CAN_ActivateNotification+0x1e>
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d109      	bne.n	80011c4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6959      	ldr	r1, [r3, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	e006      	b.n	80011d2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
  }
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b08a      	sub	sp, #40	; 0x28
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	2b00      	cmp	r3, #0
 8001222:	d07c      	beq.n	800131e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	2b00      	cmp	r3, #0
 800122c:	d023      	beq.n	8001276 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f983 	bl	800154c <HAL_CAN_TxMailbox0CompleteCallback>
 8001246:	e016      	b.n	8001276 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	2b00      	cmp	r3, #0
 8001250:	d004      	beq.n	800125c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
 800125a:	e00c      	b.n	8001276 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d004      	beq.n	8001270 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
 800126e:	e002      	b.n	8001276 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f989 	bl	8001588 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800127c:	2b00      	cmp	r3, #0
 800127e:	d024      	beq.n	80012ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001288:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f963 	bl	8001560 <HAL_CAN_TxMailbox1CompleteCallback>
 800129a:	e016      	b.n	80012ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80012a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
 80012ae:	e00c      	b.n	80012ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d004      	beq.n	80012c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
 80012c2:	e002      	b.n	80012ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f969 	bl	800159c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d024      	beq.n	800131e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 f943 	bl	8001574 <HAL_CAN_TxMailbox2CompleteCallback>
 80012ee:	e016      	b.n	800131e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
 8001302:	e00c      	b.n	800131e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d004      	beq.n	8001318 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
 8001316:	e002      	b.n	800131e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 f949 	bl	80015b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800131e:	6a3b      	ldr	r3, [r7, #32]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00c      	beq.n	8001342 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001338:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2210      	movs	r2, #16
 8001340:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00b      	beq.n	8001364 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	f003 0308 	and.w	r3, r3, #8
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2208      	movs	r2, #8
 800135c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f930 	bl	80015c4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7fe ff5d 	bl	800023c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001388:	2b00      	cmp	r3, #0
 800138a:	d00c      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d007      	beq.n	80013a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2210      	movs	r2, #16
 80013a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00b      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2208      	movs	r2, #8
 80013c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f912 	bl	80015ec <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 f8f9 	bl	80015d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2210      	movs	r2, #16
 8001400:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f8fc 	bl	8001600 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00b      	beq.n	800142a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2208      	movs	r2, #8
 8001422:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f8f5 	bl	8001614 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d07b      	beq.n	800152c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	2b00      	cmp	r3, #0
 800143c:	d072      	beq.n	8001524 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001460:	2b00      	cmp	r3, #0
 8001462:	d008      	beq.n	8001476 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001492:	6a3b      	ldr	r3, [r7, #32]
 8001494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001498:	2b00      	cmp	r3, #0
 800149a:	d043      	beq.n	8001524 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d03e      	beq.n	8001524 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80014ac:	2b60      	cmp	r3, #96	; 0x60
 80014ae:	d02b      	beq.n	8001508 <HAL_CAN_IRQHandler+0x32a>
 80014b0:	2b60      	cmp	r3, #96	; 0x60
 80014b2:	d82e      	bhi.n	8001512 <HAL_CAN_IRQHandler+0x334>
 80014b4:	2b50      	cmp	r3, #80	; 0x50
 80014b6:	d022      	beq.n	80014fe <HAL_CAN_IRQHandler+0x320>
 80014b8:	2b50      	cmp	r3, #80	; 0x50
 80014ba:	d82a      	bhi.n	8001512 <HAL_CAN_IRQHandler+0x334>
 80014bc:	2b40      	cmp	r3, #64	; 0x40
 80014be:	d019      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x316>
 80014c0:	2b40      	cmp	r3, #64	; 0x40
 80014c2:	d826      	bhi.n	8001512 <HAL_CAN_IRQHandler+0x334>
 80014c4:	2b30      	cmp	r3, #48	; 0x30
 80014c6:	d010      	beq.n	80014ea <HAL_CAN_IRQHandler+0x30c>
 80014c8:	2b30      	cmp	r3, #48	; 0x30
 80014ca:	d822      	bhi.n	8001512 <HAL_CAN_IRQHandler+0x334>
 80014cc:	2b10      	cmp	r3, #16
 80014ce:	d002      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x2f8>
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	d005      	beq.n	80014e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80014d4:	e01d      	b.n	8001512 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014de:	e019      	b.n	8001514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014e8:	e014      	b.n	8001514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	f043 0320 	orr.w	r3, r3, #32
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014f2:	e00f      	b.n	8001514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80014f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014fc:	e00a      	b.n	8001514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001506:	e005      	b.n	8001514 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001510:	e000      	b.n	8001514 <HAL_CAN_IRQHandler+0x336>
            break;
 8001512:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	699a      	ldr	r2, [r3, #24]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001522:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2204      	movs	r2, #4
 800152a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f872 	bl	8001628 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001658:	4013      	ands	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x44>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <__NVIC_GetPriorityGrouping+0x18>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	f003 0307 	and.w	r3, r3, #7
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	db0b      	blt.n	80016ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	f003 021f 	and.w	r2, r3, #31
 80016b8:	4907      	ldr	r1, [pc, #28]	; (80016d8 <__NVIC_EnableIRQ+0x38>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	095b      	lsrs	r3, r3, #5
 80016c0:	2001      	movs	r0, #1
 80016c2:	fa00 f202 	lsl.w	r2, r0, r2
 80016c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff8e 	bl	80016dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff29 	bl	800163c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff3e 	bl	8001684 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff8e 	bl	8001730 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5d 	bl	80016dc <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff31 	bl	80016a0 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa2 	bl	8001798 <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186e:	e17f      	b.n	8001b70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8171 	beq.w	8001b6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0303 	and.w	r3, r3, #3
 8001890:	2b01      	cmp	r3, #1
 8001892:	d005      	beq.n	80018a0 <HAL_GPIO_Init+0x40>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d130      	bne.n	8001902 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018d6:	2201      	movs	r2, #1
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	f003 0201 	and.w	r2, r3, #1
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b03      	cmp	r3, #3
 800190c:	d118      	bne.n	8001940 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	6939      	ldr	r1, [r7, #16]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80ac 	beq.w	8001b6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a16:	4a5e      	ldr	r2, [pc, #376]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a1e:	4b5c      	ldr	r3, [pc, #368]	; (8001b90 <HAL_GPIO_Init+0x330>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a2a:	4a5a      	ldr	r2, [pc, #360]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a54:	d025      	beq.n	8001aa2 <HAL_GPIO_Init+0x242>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4f      	ldr	r2, [pc, #316]	; (8001b98 <HAL_GPIO_Init+0x338>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01f      	beq.n	8001a9e <HAL_GPIO_Init+0x23e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_GPIO_Init+0x33c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d019      	beq.n	8001a9a <HAL_GPIO_Init+0x23a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4d      	ldr	r2, [pc, #308]	; (8001ba0 <HAL_GPIO_Init+0x340>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d013      	beq.n	8001a96 <HAL_GPIO_Init+0x236>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4c      	ldr	r2, [pc, #304]	; (8001ba4 <HAL_GPIO_Init+0x344>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d00d      	beq.n	8001a92 <HAL_GPIO_Init+0x232>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4b      	ldr	r2, [pc, #300]	; (8001ba8 <HAL_GPIO_Init+0x348>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d007      	beq.n	8001a8e <HAL_GPIO_Init+0x22e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_GPIO_Init+0x34c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d101      	bne.n	8001a8a <HAL_GPIO_Init+0x22a>
 8001a86:	2306      	movs	r3, #6
 8001a88:	e00c      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	e00a      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a8e:	2305      	movs	r3, #5
 8001a90:	e008      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a92:	2304      	movs	r3, #4
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a96:	2303      	movs	r3, #3
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x244>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	f002 0203 	and.w	r2, r2, #3
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4093      	lsls	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ab4:	4937      	ldr	r1, [pc, #220]	; (8001b94 <HAL_GPIO_Init+0x334>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aec:	4b30      	ldr	r3, [pc, #192]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b10:	4a27      	ldr	r2, [pc, #156]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b3a:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_GPIO_Init+0x350>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f47f ae78 	bne.w	8001870 <HAL_GPIO_Init+0x10>
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	48000800 	.word	0x48000800
 8001ba0:	48000c00 	.word	0x48000c00
 8001ba4:	48001000 	.word	0x48001000
 8001ba8:	48001400 	.word	0x48001400
 8001bac:	48001800 	.word	0x48001800
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43d9      	mvns	r1, r3
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	400b      	ands	r3, r1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d006      	beq.n	8001c3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fac6 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40010400 	.word	0x40010400

08001c48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40007000 	.word	0x40007000

08001c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c72:	d130      	bne.n	8001cd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c80:	d038      	beq.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c82:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c92:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2232      	movs	r2, #50	; 0x32
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	4a1b      	ldr	r2, [pc, #108]	; (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	0c9b      	lsrs	r3, r3, #18
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca8:	e002      	b.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbc:	d102      	bne.n	8001cc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f2      	bne.n	8001caa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd0:	d110      	bne.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e00f      	b.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ce2:	d007      	beq.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cec:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40007000 	.word	0x40007000
 8001d08:	20000000 	.word	0x20000000
 8001d0c:	431bde83 	.word	0x431bde83

08001d10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e3ca      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d22:	4b97      	ldr	r3, [pc, #604]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
 8001d2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d2c:	4b94      	ldr	r3, [pc, #592]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 80e4 	beq.w	8001f0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d007      	beq.n	8001d5a <HAL_RCC_OscConfig+0x4a>
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b0c      	cmp	r3, #12
 8001d4e:	f040 808b 	bne.w	8001e68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	f040 8087 	bne.w	8001e68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d5a:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d005      	beq.n	8001d72 <HAL_RCC_OscConfig+0x62>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e3a2      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1a      	ldr	r2, [r3, #32]
 8001d76:	4b82      	ldr	r3, [pc, #520]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <HAL_RCC_OscConfig+0x7c>
 8001d82:	4b7f      	ldr	r3, [pc, #508]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8a:	e005      	b.n	8001d98 <HAL_RCC_OscConfig+0x88>
 8001d8c:	4b7c      	ldr	r3, [pc, #496]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d223      	bcs.n	8001de4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 fd1d 	bl	80027e0 <RCC_SetFlashLatencyFromMSIRange>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e383      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db0:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001db6:	f043 0308 	orr.w	r3, r3, #8
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	4b70      	ldr	r3, [pc, #448]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	496d      	ldr	r1, [pc, #436]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dce:	4b6c      	ldr	r3, [pc, #432]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	4968      	ldr	r1, [pc, #416]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
 8001de2:	e025      	b.n	8001e30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001de4:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a65      	ldr	r2, [pc, #404]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	4960      	ldr	r1, [pc, #384]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e02:	4b5f      	ldr	r3, [pc, #380]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	495b      	ldr	r1, [pc, #364]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d109      	bne.n	8001e30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f000 fcdd 	bl	80027e0 <RCC_SetFlashLatencyFromMSIRange>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e343      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e30:	f000 fc4a 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b52      	ldr	r3, [pc, #328]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	091b      	lsrs	r3, r3, #4
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	4950      	ldr	r1, [pc, #320]	; (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	f003 031f 	and.w	r3, r3, #31
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4c:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_RCC_OscConfig+0x278>)
 8001e4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e50:	4b4e      	ldr	r3, [pc, #312]	; (8001f8c <HAL_RCC_OscConfig+0x27c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fd45 	bl	80008e4 <HAL_InitTick>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d052      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	e327      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d032      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e70:	4b43      	ldr	r3, [pc, #268]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a42      	ldr	r2, [pc, #264]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fd82 	bl	8000984 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e84:	f7fe fd7e 	bl	8000984 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e310      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e96:	4b3a      	ldr	r3, [pc, #232]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea2:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a36      	ldr	r2, [pc, #216]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ea8:	f043 0308 	orr.w	r3, r3, #8
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4931      	ldr	r1, [pc, #196]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec0:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	492c      	ldr	r1, [pc, #176]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	e01a      	b.n	8001f0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a29      	ldr	r2, [pc, #164]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001ee2:	f7fe fd4f 	bl	8000984 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001eea:	f7fe fd4b 	bl	8000984 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e2dd      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001efc:	4b20      	ldr	r3, [pc, #128]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x1da>
 8001f08:	e000      	b.n	8001f0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d074      	beq.n	8002002 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x21a>
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d10e      	bne.n	8001f42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d10b      	bne.n	8001f42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d064      	beq.n	8002000 <HAL_RCC_OscConfig+0x2f0>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d160      	bne.n	8002000 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e2ba      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x24a>
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e026      	b.n	8001fa8 <HAL_RCC_OscConfig+0x298>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f62:	d115      	bne.n	8001f90 <HAL_RCC_OscConfig+0x280>
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a02      	ldr	r2, [pc, #8]	; (8001f80 <HAL_RCC_OscConfig+0x270>)
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	e014      	b.n	8001fa8 <HAL_RCC_OscConfig+0x298>
 8001f7e:	bf00      	nop
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08002910 	.word	0x08002910
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000004 	.word	0x20000004
 8001f90:	4ba0      	ldr	r3, [pc, #640]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a9f      	ldr	r2, [pc, #636]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b9d      	ldr	r3, [pc, #628]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a9c      	ldr	r2, [pc, #624]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d013      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fce8 	bl	8000984 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7fe fce4 	bl	8000984 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e276      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fca:	4b92      	ldr	r3, [pc, #584]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x2a8>
 8001fd6:	e014      	b.n	8002002 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7fe fcd4 	bl	8000984 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe0:	f7fe fcd0 	bl	8000984 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b64      	cmp	r3, #100	; 0x64
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e262      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff2:	4b88      	ldr	r3, [pc, #544]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x2d0>
 8001ffe:	e000      	b.n	8002002 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d060      	beq.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2b04      	cmp	r3, #4
 8002012:	d005      	beq.n	8002020 <HAL_RCC_OscConfig+0x310>
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d119      	bne.n	800204e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b02      	cmp	r3, #2
 800201e:	d116      	bne.n	800204e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002020:	4b7c      	ldr	r3, [pc, #496]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_OscConfig+0x328>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e23f      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	061b      	lsls	r3, r3, #24
 8002046:	4973      	ldr	r1, [pc, #460]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800204c:	e040      	b.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d023      	beq.n	800209e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002056:	4b6f      	ldr	r3, [pc, #444]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6e      	ldr	r2, [pc, #440]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7fe fc8f 	bl	8000984 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206a:	f7fe fc8b 	bl	8000984 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e21d      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207c:	4b65      	ldr	r3, [pc, #404]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002088:	4b62      	ldr	r3, [pc, #392]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	495f      	ldr	r1, [pc, #380]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
 800209c:	e018      	b.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b5d      	ldr	r3, [pc, #372]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7fe fc6b 	bl	8000984 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b2:	f7fe fc67 	bl	8000984 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1f9      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d03c      	beq.n	8002156 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01c      	beq.n	800211e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e4:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	4a4a      	ldr	r2, [pc, #296]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f4:	f7fe fc46 	bl	8000984 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020fc:	f7fe fc42 	bl	8000984 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e1d4      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0ef      	beq.n	80020fc <HAL_RCC_OscConfig+0x3ec>
 800211c:	e01b      	b.n	8002156 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002124:	4a3b      	ldr	r2, [pc, #236]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002126:	f023 0301 	bic.w	r3, r3, #1
 800212a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe fc29 	bl	8000984 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7fe fc25 	bl	8000984 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1b7      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1ef      	bne.n	8002136 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80a6 	beq.w	80022b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002164:	2300      	movs	r3, #0
 8002166:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002168:	4b2a      	ldr	r3, [pc, #168]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d10d      	bne.n	8002190 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 800217a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217e:	6593      	str	r3, [r2, #88]	; 0x58
 8002180:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218c:	2301      	movs	r3, #1
 800218e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002190:	4b21      	ldr	r3, [pc, #132]	; (8002218 <HAL_RCC_OscConfig+0x508>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	2b00      	cmp	r3, #0
 800219a:	d118      	bne.n	80021ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCC_OscConfig+0x508>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <HAL_RCC_OscConfig+0x508>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021a8:	f7fe fbec 	bl	8000984 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b0:	f7fe fbe8 	bl	8000984 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e17a      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021c2:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_RCC_OscConfig+0x508>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d108      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4d8>
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e6:	e029      	b.n	800223c <HAL_RCC_OscConfig+0x52c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d115      	bne.n	800221c <HAL_RCC_OscConfig+0x50c>
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80021f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f6:	4a07      	ldr	r2, [pc, #28]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 80021f8:	f043 0304 	orr.w	r3, r3, #4
 80021fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002200:	4b04      	ldr	r3, [pc, #16]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	4a03      	ldr	r2, [pc, #12]	; (8002214 <HAL_RCC_OscConfig+0x504>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002210:	e014      	b.n	800223c <HAL_RCC_OscConfig+0x52c>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	40007000 	.word	0x40007000
 800221c:	4b9c      	ldr	r3, [pc, #624]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800221e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002222:	4a9b      	ldr	r2, [pc, #620]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800222c:	4b98      	ldr	r3, [pc, #608]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002232:	4a97      	ldr	r2, [pc, #604]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002234:	f023 0304 	bic.w	r3, r3, #4
 8002238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d016      	beq.n	8002272 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7fe fb9e 	bl	8000984 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224a:	e00a      	b.n	8002262 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800224c:	f7fe fb9a 	bl	8000984 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e12a      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0ed      	beq.n	800224c <HAL_RCC_OscConfig+0x53c>
 8002270:	e015      	b.n	800229e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7fe fb87 	bl	8000984 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002278:	e00a      	b.n	8002290 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800227a:	f7fe fb83 	bl	8000984 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	f241 3288 	movw	r2, #5000	; 0x1388
 8002288:	4293      	cmp	r3, r2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e113      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002290:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1ed      	bne.n	800227a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229e:	7ffb      	ldrb	r3, [r7, #31]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d105      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a4:	4b7a      	ldr	r3, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a79      	ldr	r2, [pc, #484]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80022aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80fe 	beq.w	80024b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	2b02      	cmp	r3, #2
 80022c0:	f040 80d0 	bne.w	8002464 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022c4:	4b72      	ldr	r3, [pc, #456]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d130      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	3b01      	subs	r3, #1
 80022e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d127      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d11f      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002304:	2a07      	cmp	r2, #7
 8002306:	bf14      	ite	ne
 8002308:	2201      	movne	r2, #1
 800230a:	2200      	moveq	r2, #0
 800230c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800230e:	4293      	cmp	r3, r2
 8002310:	d113      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	3b01      	subs	r3, #1
 8002320:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d109      	bne.n	800233a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d06e      	beq.n	8002418 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d069      	beq.n	8002414 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800234c:	4b50      	ldr	r3, [pc, #320]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0ad      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800235c:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a4b      	ldr	r2, [pc, #300]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002368:	f7fe fb0c 	bl	8000984 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fb08 	bl	8000984 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e09a      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238e:	4b40      	ldr	r3, [pc, #256]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	4b40      	ldr	r3, [pc, #256]	; (8002494 <HAL_RCC_OscConfig+0x784>)
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800239e:	3a01      	subs	r2, #1
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	4311      	orrs	r1, r2
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023a8:	0212      	lsls	r2, r2, #8
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023b0:	0852      	lsrs	r2, r2, #1
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0552      	lsls	r2, r2, #21
 80023b6:	4311      	orrs	r1, r2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023bc:	0852      	lsrs	r2, r2, #1
 80023be:	3a01      	subs	r2, #1
 80023c0:	0652      	lsls	r2, r2, #25
 80023c2:	4311      	orrs	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023c8:	0912      	lsrs	r2, r2, #4
 80023ca:	0452      	lsls	r2, r2, #17
 80023cc:	430a      	orrs	r2, r1
 80023ce:	4930      	ldr	r1, [pc, #192]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023d4:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 80023e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023ec:	f7fe faca 	bl	8000984 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe fac6 	bl	8000984 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e058      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002406:	4b22      	ldr	r3, [pc, #136]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002412:	e050      	b.n	80024b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e04f      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d148      	bne.n	80024b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a19      	ldr	r2, [pc, #100]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002430:	4b17      	ldr	r3, [pc, #92]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a16      	ldr	r2, [pc, #88]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800243a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800243c:	f7fe faa2 	bl	8000984 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fa9e 	bl	8000984 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e030      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002456:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x734>
 8002462:	e028      	b.n	80024b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d023      	beq.n	80024b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_RCC_OscConfig+0x780>)
 8002470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fa85 	bl	8000984 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247c:	e00c      	b.n	8002498 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800247e:	f7fe fa81 	bl	8000984 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d905      	bls.n	8002498 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e013      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
 8002490:	40021000 	.word	0x40021000
 8002494:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_OscConfig+0x7b0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ec      	bne.n	800247e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_RCC_OscConfig+0x7b0>)
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	4905      	ldr	r1, [pc, #20]	; (80024c0 <HAL_RCC_OscConfig+0x7b0>)
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_OscConfig+0x7b4>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	60cb      	str	r3, [r1, #12]
 80024b0:	e001      	b.n	80024b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3720      	adds	r7, #32
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40021000 	.word	0x40021000
 80024c4:	feeefffc 	.word	0xfeeefffc

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0e7      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024dc:	4b75      	ldr	r3, [pc, #468]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d910      	bls.n	800250c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ea:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0207 	bic.w	r2, r3, #7
 80024f2:	4970      	ldr	r1, [pc, #448]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0cf      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d010      	beq.n	800253a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	4b66      	ldr	r3, [pc, #408]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002524:	429a      	cmp	r2, r3
 8002526:	d908      	bls.n	800253a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002528:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4960      	ldr	r1, [pc, #384]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002536:	4313      	orrs	r3, r2
 8002538:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	d04c      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b03      	cmp	r3, #3
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800254e:	4b5a      	ldr	r3, [pc, #360]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d121      	bne.n	800259e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e0a6      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002566:	4b54      	ldr	r3, [pc, #336]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d115      	bne.n	800259e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e09a      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800257e:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e08e      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800258e:	4b4a      	ldr	r3, [pc, #296]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e086      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800259e:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f023 0203 	bic.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4943      	ldr	r1, [pc, #268]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b0:	f7fe f9e8 	bl	8000984 <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7fe f9e4 	bl	8000984 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e06e      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 020c 	and.w	r2, r3, #12
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	429a      	cmp	r2, r3
 80025de:	d1eb      	bne.n	80025b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d010      	beq.n	800260e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d208      	bcs.n	800260e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025fc:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	492b      	ldr	r1, [pc, #172]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800260e:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d210      	bcs.n	800263e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261c:	4b25      	ldr	r3, [pc, #148]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 0207 	bic.w	r2, r3, #7
 8002624:	4923      	ldr	r1, [pc, #140]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <HAL_RCC_ClockConfig+0x1ec>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d001      	beq.n	800263e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e036      	b.n	80026ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264a:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4918      	ldr	r1, [pc, #96]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4910      	ldr	r1, [pc, #64]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800267c:	f000 f824 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b0d      	ldr	r3, [pc, #52]	; (80026b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	490b      	ldr	r1, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x1f4>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1f8>)
 800269a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_RCC_ClockConfig+0x1fc>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe f91f 	bl	80008e4 <HAL_InitTick>
 80026a6:	4603      	mov	r3, r0
 80026a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80026aa:	7afb      	ldrb	r3, [r7, #11]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08002910 	.word	0x08002910
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	; 0x24
 80026cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d6:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e0:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x34>
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d121      	bne.n	800273a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d11e      	bne.n	800273a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026fc:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002708:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800270a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e005      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002718:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002724:	4a2b      	ldr	r2, [pc, #172]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10d      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d102      	bne.n	8002746 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002740:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e004      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d101      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <HAL_RCC_GetSysClockFreq+0x114>)
 800274e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d134      	bne.n	80027c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002756:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d003      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0xa6>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d003      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xac>
 800276c:	e005      	b.n	800277a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002770:	617b      	str	r3, [r7, #20]
      break;
 8002772:	e005      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002776:	617b      	str	r3, [r7, #20]
      break;
 8002778:	e002      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	617b      	str	r3, [r7, #20]
      break;
 800277e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	3301      	adds	r3, #1
 800278c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	fb03 f202 	mul.w	r2, r3, r2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	0e5b      	lsrs	r3, r3, #25
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	3301      	adds	r3, #1
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027c0:	69bb      	ldr	r3, [r7, #24]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08002920 	.word	0x08002920
 80027d8:	00f42400 	.word	0x00f42400
 80027dc:	007a1200 	.word	0x007a1200

080027e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027e8:	2300      	movs	r3, #0
 80027ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027f8:	f7ff fa26 	bl	8001c48 <HAL_PWREx_GetVoltageRange>
 80027fc:	6178      	str	r0, [r7, #20]
 80027fe:	e014      	b.n	800282a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002800:	4b25      	ldr	r3, [pc, #148]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	4a24      	ldr	r2, [pc, #144]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800280a:	6593      	str	r3, [r2, #88]	; 0x58
 800280c:	4b22      	ldr	r3, [pc, #136]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002818:	f7ff fa16 	bl	8001c48 <HAL_PWREx_GetVoltageRange>
 800281c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002828:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002830:	d10b      	bne.n	800284a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b80      	cmp	r3, #128	; 0x80
 8002836:	d919      	bls.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2ba0      	cmp	r3, #160	; 0xa0
 800283c:	d902      	bls.n	8002844 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800283e:	2302      	movs	r3, #2
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	e013      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002844:	2301      	movs	r3, #1
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e010      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d902      	bls.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002850:	2303      	movs	r3, #3
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	e00a      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d102      	bne.n	8002862 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800285c:	2302      	movs	r3, #2
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	e004      	b.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b70      	cmp	r3, #112	; 0x70
 8002866:	d101      	bne.n	800286c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002868:	2301      	movs	r3, #1
 800286a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800286c:	4b0b      	ldr	r3, [pc, #44]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 0207 	bic.w	r2, r3, #7
 8002874:	4909      	ldr	r1, [pc, #36]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d001      	beq.n	800288e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	40022000 	.word	0x40022000

080028a0 <memset>:
 80028a0:	4402      	add	r2, r0
 80028a2:	4603      	mov	r3, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <__libc_init_array>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	4d0d      	ldr	r5, [pc, #52]	; (80028e8 <__libc_init_array+0x38>)
 80028b4:	4c0d      	ldr	r4, [pc, #52]	; (80028ec <__libc_init_array+0x3c>)
 80028b6:	1b64      	subs	r4, r4, r5
 80028b8:	10a4      	asrs	r4, r4, #2
 80028ba:	2600      	movs	r6, #0
 80028bc:	42a6      	cmp	r6, r4
 80028be:	d109      	bne.n	80028d4 <__libc_init_array+0x24>
 80028c0:	4d0b      	ldr	r5, [pc, #44]	; (80028f0 <__libc_init_array+0x40>)
 80028c2:	4c0c      	ldr	r4, [pc, #48]	; (80028f4 <__libc_init_array+0x44>)
 80028c4:	f000 f818 	bl	80028f8 <_init>
 80028c8:	1b64      	subs	r4, r4, r5
 80028ca:	10a4      	asrs	r4, r4, #2
 80028cc:	2600      	movs	r6, #0
 80028ce:	42a6      	cmp	r6, r4
 80028d0:	d105      	bne.n	80028de <__libc_init_array+0x2e>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80028d8:	4798      	blx	r3
 80028da:	3601      	adds	r6, #1
 80028dc:	e7ee      	b.n	80028bc <__libc_init_array+0xc>
 80028de:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e2:	4798      	blx	r3
 80028e4:	3601      	adds	r6, #1
 80028e6:	e7f2      	b.n	80028ce <__libc_init_array+0x1e>
 80028e8:	08002950 	.word	0x08002950
 80028ec:	08002950 	.word	0x08002950
 80028f0:	08002950 	.word	0x08002950
 80028f4:	08002954 	.word	0x08002954

080028f8 <_init>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr

08002904 <_fini>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr
